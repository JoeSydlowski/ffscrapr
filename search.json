[{"path":[]},{"path":"https://ffscrapr.ffverse.com/CODE_OF_CONDUCT.html","id":"our-pledge","dir":"","previous_headings":"","what":"Our Pledge","title":"Contributor Covenant Code of Conduct","text":"interest fostering open welcoming environment, contributors maintainers pledge making participation project community harassment-free experience everyone, regardless age, body size, disability, ethnicity, sex characteristics, gender identity expression, level experience, education, socio-economic status, nationality, personal appearance, race, religion, sexual identity orientation.","code":""},{"path":"https://ffscrapr.ffverse.com/CODE_OF_CONDUCT.html","id":"our-standards","dir":"","previous_headings":"","what":"Our Standards","title":"Contributor Covenant Code of Conduct","text":"Examples behavior contributes creating positive environment include: Using welcoming inclusive language respectful differing viewpoints experiences Gracefully accepting constructive criticism Focusing best community Showing empathy towards community members Examples unacceptable behavior participants include: use sexualized language imagery unwelcome sexual attention advances Trolling, insulting/derogatory comments, personal political attacks Public private harassment Publishing others’ private information, physical electronic address, without explicit permission conduct reasonably considered inappropriate professional setting","code":""},{"path":"https://ffscrapr.ffverse.com/CODE_OF_CONDUCT.html","id":"our-responsibilities","dir":"","previous_headings":"","what":"Our Responsibilities","title":"Contributor Covenant Code of Conduct","text":"Project maintainers responsible clarifying standards acceptable behavior expected take appropriate fair corrective action response instances unacceptable behavior. Project maintainers right responsibility remove, edit, reject comments, commits, code, wiki edits, issues, contributions aligned Code Conduct, ban temporarily permanently contributor behaviors deem inappropriate, threatening, offensive, harmful.","code":""},{"path":"https://ffscrapr.ffverse.com/CODE_OF_CONDUCT.html","id":"scope","dir":"","previous_headings":"","what":"Scope","title":"Contributor Covenant Code of Conduct","text":"Code Conduct applies within project spaces public spaces individual representing project community. Examples representing project community include using official project e-mail address, posting via official social media account, acting appointed representative online offline event. Representation project may defined clarified project maintainers.","code":""},{"path":"https://ffscrapr.ffverse.com/CODE_OF_CONDUCT.html","id":"enforcement","dir":"","previous_headings":"","what":"Enforcement","title":"Contributor Covenant Code of Conduct","text":"Instances abusive, harassing, otherwise unacceptable behavior may reported contacting project team hello@dynastyprocess.com. complaints reviewed investigated result response deemed necessary appropriate circumstances. project team obligated maintain confidentiality regard reporter incident. details specific enforcement policies may posted separately. Project maintainers follow enforce Code Conduct good faith may face temporary permanent repercussions determined members project’s leadership.","code":""},{"path":"https://ffscrapr.ffverse.com/CODE_OF_CONDUCT.html","id":"attribution","dir":"","previous_headings":"","what":"Attribution","title":"Contributor Covenant Code of Conduct","text":"Code Conduct adapted Contributor Covenant, version 1.4, available https://www.contributor-covenant.org/version/1/4/code--conduct.html answers common questions code conduct, see https://www.contributor-covenant.org/faq","code":""},{"path":"https://ffscrapr.ffverse.com/CONTRIBUTING.html","id":null,"dir":"","previous_headings":"","what":"Contributing","title":"Contributing","text":"Many hands make light work! ways can contribute project:","code":""},{"path":"https://ffscrapr.ffverse.com/CONTRIBUTING.html","id":"sponsor","dir":"","previous_headings":"","what":"Sponsor","title":"Contributing","text":"can sponsor project donating help server costs!","code":""},{"path":"https://ffscrapr.ffverse.com/CONTRIBUTING.html","id":"open-an-issue","dir":"","previous_headings":"","what":"Open an issue","title":"Contributing","text":"can open issue ’d like request specific function report bug/error.","code":""},{"path":"https://ffscrapr.ffverse.com/CONTRIBUTING.html","id":"fixing-typos","dir":"","previous_headings":"","what":"Fixing typos","title":"Contributing","text":"can fix typos, spelling mistakes, grammatical errors documentation directly using GitHub web interface, long changes made source file. generally means ’ll need edit roxygen2 comments .R, .Rd file. can find .R file generates .Rd reading comment first line.","code":""},{"path":"https://ffscrapr.ffverse.com/CONTRIBUTING.html","id":"bigger-changes","dir":"","previous_headings":"","what":"Bigger changes","title":"Contributing","text":"want make bigger change, ’s good idea first file issue make sure someone team agrees ’s needed. ’ve found bug, please file issue illustrates bug minimal reprex (also help write unit test, needed).","code":""},{"path":"https://ffscrapr.ffverse.com/CONTRIBUTING.html","id":"project-and-branch-strategy","dir":"","previous_headings":"","what":"Project and branch strategy","title":"Contributing","text":"project now uses GitHub Flow v1.4.7+, rather Git Flow per previous. Feature development package organized GitHub Projects, track towards minor version release. function/method tracked GitHub Issue, linked /closed Pull Requests. CRAN releases can found GitHub Releases page. main branch contains latest development version package, fully tested, linted, documented. Development branches (e.g. fleaflicker, espn) contain -progress code. get squash-merged onto main branch tested documented. Sub-branches development may created necessary experimental purposes.","code":""},{"path":"https://ffscrapr.ffverse.com/CONTRIBUTING.html","id":"pull-request-process","dir":"","previous_headings":"","what":"Pull request process","title":"Contributing","text":"Fork package clone onto computer. haven’t done , recommend using usethis::create_from_github(\"ffverse/ffscrapr\", fork = TRUE). Install development dependencies devtools::install_dev_deps(), make sure package passes R CMD check running devtools::check(). R CMD check doesn’t pass cleanly, ’s good idea ask help continuing. Create Git branch pull request (PR). recommend using usethis::pr_init(\"brief-description--change\"). Make changes, commit git, create PR running usethis::pr_push(), following prompts browser. title PR briefly describe change. body PR contain Fixes #issue-number. user-facing changes, add bullet top NEWS.md (.e. just first header). Follow style described https://style.tidyverse.org/news.html.","code":""},{"path":"https://ffscrapr.ffverse.com/CONTRIBUTING.html","id":"code-style","dir":"","previous_headings":"","what":"Code style","title":"Contributing","text":"New code follow tidyverse style guide. can use styler package apply styles, please don’t restyle code nothing PR. use roxygen2, Markdown syntax, documentation. use testthat unit tests. Contributions test cases included easier accept.","code":""},{"path":"https://ffscrapr.ffverse.com/CONTRIBUTING.html","id":"code-of-conduct","dir":"","previous_headings":"","what":"Code of Conduct","title":"Contributing","text":"Please note usethis project released Contributor Code Conduct. contributing project agree abide terms. contribution guidelines inspired guidelines {usethis}","code":""},{"path":"https://ffscrapr.ffverse.com/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2021 Tan Ho Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://ffscrapr.ffverse.com/articles/espn_authentication.html","id":"instructions","dir":"Articles","previous_headings":"","what":"Instructions","title":"ESPN: Private Leagues","text":"Visit main league page (.e. https://fantasy.espn.com/football/team?leagueId=899513&seasonId=2020) Make sure logged . Open Developer Tools (Chrome/Firefox, right-click anywhere page select Inspect Element) Go Storage (Firefox) Application (Chrome) browse Cookies available fantasy.espn.com values SWID ESPN_S2 parameters used ffscrapr connect private league. can right-click copy values . convenient way handle project store environment variables. can run usethis::edit_r_environ() add user environment, adding lines look like: values truncated (security purposes) ESPN_S2 often 250 characters long SWID 38 characters long including curly brackets. adding lines .Renviron restarting R, can access espn_connect call using Sys.getenv per :","code":"TAN_ESPN_S2=\"AECt%2F12312Dwd5ktQSzfuG\" TAN_SWID=\"{1E6CC139-}\" conn <- espn_connect(   season = 2019,   league_id = 899513,   espn_s2 = Sys.getenv(\"TAN_ESPN_S2\"),   swid = Sys.getenv(\"TAN_SWID\") )"},{"path":"https://ffscrapr.ffverse.com/articles/espn_basics.html","id":"values","dir":"Articles","previous_headings":"","what":"Values","title":"ESPN: Basics","text":"Cool! Let’s pull additional context adding DynastyProcess player values. Let’s team summaries now! , ’ve got team summary values! like applying context, let’s turn percentages - helps normalise league environment. Armed value summary like , can see team strengths weaknesses pretty quickly, figure might interested positional surpluses might surplus position want look .","code":"player_values <- dp_values(\"values-players.csv\")  # The values are stored by fantasypros ID since that's where the data comes from.  # To join it to our rosters, we'll need playerID mappings.  player_ids <- dp_playerids() %>%    select(espn_id,fantasypros_id) %>%    filter(!is.na(espn_id),!is.na(fantasypros_id))  # We'll be joining it onto rosters, so we can trim down the values dataframe # to just IDs, age, and values  player_values <- player_values %>%    left_join(player_ids, by = c(\"fp_id\" = \"fantasypros_id\")) %>%    select(espn_id,age,ecr_2qb,ecr_pos,value_2qb)  # we can join the roster's player_ids on the values' espn_id, with a bit of a type conversion first sucioboys_values <- sucioboys_rosters %>%    mutate(player_id = as.character(player_id)) %>%    left_join(player_values, by = c(\"player_id\"=\"espn_id\")) %>%    arrange(franchise_id,desc(value_2qb))  head(sucioboys_values) #> # A tibble: 6 × 14 #>   franchise_id franchise_name playe…¹ playe…² team  pos   eligi…³ status acqui…⁴ #>          <int> <chr>          <chr>   <chr>   <chr> <chr> <list>  <chr>  <chr>   #> 1            1 The Early GGod 4242335 Jonath… IND   RB    <chr>   NORMAL DRAFT   #> 2            1 The Early GGod 4241985 J.K. D… BAL   RB    <chr>   NORMAL DRAFT   #> 3            1 The Early GGod 2976316 Michae… NOS   WR    <chr>   NORMAL DRAFT   #> 4            1 The Early GGod 4040715 Jalen … PHI   QB    <chr>   NORMAL ADD     #> 5            1 The Early GGod 4239993 Tee Hi… CIN   WR    <chr>   NORMAL ADD     #> 6            1 The Early GGod 4241479 Tua Ta… MIA   QB    <chr>   NORMAL DRAFT   #> # … with 5 more variables: acquisition_date <dttm>, age <dbl>, ecr_2qb <dbl>, #> #   ecr_pos <dbl>, value_2qb <int>, and abbreviated variable names ¹​player_id, #> #   ²​player_name, ³​eligible_pos, ⁴​acquisition_type value_summary <- sucioboys_values %>%    group_by(franchise_id,franchise_name,pos) %>%    summarise(total_value = sum(value_2qb,na.rm = TRUE)) %>%   ungroup() %>%    group_by(franchise_id,franchise_name) %>%    mutate(team_value = sum(total_value)) %>%    ungroup() %>%    pivot_wider(names_from = pos, values_from = total_value) %>%    arrange(desc(team_value)) %>%    select(franchise_id,franchise_name,team_value,QB,RB,WR,TE)  value_summary #> # A tibble: 10 × 7 #>    franchise_id franchise_name               team_value    QB    RB    WR    TE #>           <int> <chr>                             <int> <int> <int> <int> <int> #>  1            5 \"The Juggernaut\"                  49693  8628 18592 16747  5726 #>  2            6 \"OBJ's Personal Porta Potty\"      46447 20424 22738   997  2288 #>  3            7 \"Tony El Tigre\"                   44547 15508 17020  5921  6098 #>  4            2 \"Coom  Dumpster\"                  41599 13314  2329 24668  1288 #>  5            4 \"I'm Also Sad \"                   37216  1467 15597 16565  3587 #>  6            3 \"PAKI STANS\"                      32697  6048 11980 12829  1840 #>  7            1 \"The Early GGod\"                  32247  6642 13916  9406  2283 #>  8            9 \"RAFI CUNADO\"                     31958  6878 10726 13365   989 #>  9            8 \"Big Coomers\"                     21493  7416  1453 12408   216 #> 10           10 \"Austin 🐐Drew Lock🐐\"            20832  7153   276 13324    79 value_summary_pct <- value_summary %>%    mutate_at(c(\"team_value\",\"QB\",\"RB\",\"WR\",\"TE\"),~.x/sum(.x)) %>%    mutate_at(c(\"team_value\",\"QB\",\"RB\",\"WR\",\"TE\"),round, 3)  value_summary_pct #> # A tibble: 10 × 7 #>    franchise_id franchise_name               team_value    QB    RB    WR    TE #>           <int> <chr>                             <dbl> <dbl> <dbl> <dbl> <dbl> #>  1            5 \"The Juggernaut\"                  0.139 0.092 0.162 0.133 0.235 #>  2            6 \"OBJ's Personal Porta Potty\"      0.129 0.218 0.198 0.008 0.094 #>  3            7 \"Tony El Tigre\"                   0.124 0.166 0.148 0.047 0.25  #>  4            2 \"Coom  Dumpster\"                  0.116 0.142 0.02  0.195 0.053 #>  5            4 \"I'm Also Sad \"                   0.104 0.016 0.136 0.131 0.147 #>  6            3 \"PAKI STANS\"                      0.091 0.065 0.105 0.102 0.075 #>  7            1 \"The Early GGod\"                  0.09  0.071 0.121 0.075 0.094 #>  8            9 \"RAFI CUNADO\"                     0.089 0.074 0.094 0.106 0.041 #>  9            8 \"Big Coomers\"                     0.06  0.079 0.013 0.098 0.009 #> 10           10 \"Austin 🐐Drew Lock🐐\"            0.058 0.077 0.002 0.106 0.003"},{"path":"https://ffscrapr.ffverse.com/articles/espn_basics.html","id":"age","dir":"Articles","previous_headings":"","what":"Age","title":"ESPN: Basics","text":"Another question might ask: average age given team? like looking average age position, weighted dynasty value. helps give better idea age team - including might looking offload older veteran!","code":"age_summary <- sucioboys_values %>%    filter(pos %in% c(\"QB\",\"RB\",\"WR\",\"TE\")) %>%    group_by(franchise_id,pos) %>%    mutate(position_value = sum(value_2qb,na.rm=TRUE)) %>%    ungroup() %>%    mutate(weighted_age = age*value_2qb/position_value,          weighted_age = round(weighted_age, 1)) %>%    group_by(franchise_id,franchise_name,pos) %>%    summarise(count = n(),             age = sum(weighted_age,na.rm = TRUE)) %>%    pivot_wider(names_from = pos,               values_from = c(age,count))  age_summary #> # A tibble: 10 × 10 #> # Groups:   franchise_id, franchise_name [10] #>    franchi…¹ franc…² age_QB age_RB age_TE age_WR count…³ count…⁴ count…⁵ count…⁶ #>        <int> <chr>    <dbl>  <dbl>  <dbl>  <dbl>   <int>   <int>   <int>   <int> #>  1         1 \"The E…   23.5   22.4   24.7   26         4       6       3       7 #>  2         2 \"Coom …   28.7   25.9   26.8   25.6       4       7       3       6 #>  3         3 \"PAKI …   29.1   25.3   23.9   25.9       3       6       2       9 #>  4         4 \"I'm A…   35.4   24.8   28.7   27.4       2       5       2       8 #>  5         5 \"The J…   25     24.6   31.6   25.3       3       8       2       7 #>  6         6 \"OBJ's…   24.8   24.7   25.3   23.4       3       6       2       7 #>  7         7 \"Tony …   24.8   25.3   27.8   26.6       3       5       3       6 #>  8         8 \"Big C…   23.5   26     27.2   27.1       3       7       2       6 #>  9         9 \"RAFI …   35.1   25.9   26.4   24.4       3       5       3       8 #> 10        10 \"Austi…   32.2   24.4   32.2   25.5       3       5       3       5 #> # … with abbreviated variable names ¹​franchise_id, ²​franchise_name, ³​count_QB, #> #   ⁴​count_RB, ⁵​count_TE, ⁶​count_WR"},{"path":"https://ffscrapr.ffverse.com/articles/espn_basics.html","id":"next-steps","dir":"Articles","previous_headings":"","what":"Next steps","title":"ESPN: Basics","text":"vignette, ’ve used functions: ff_connect, ff_league, ff_rosters, dp_values. Now ’ve gotten far, check possibilities?","code":""},{"path":"https://ffscrapr.ffverse.com/articles/espn_getendpoint.html","id":"espn-api---an-adventure-into-uncharted-territory","dir":"Articles","previous_headings":"","what":"ESPN API - An Adventure Into Uncharted Territory","title":"ESPN: Get Endpoint","text":"Accessing ESPN Fantasy API bit adventure undocumented abyss. vignette give bit rundown use espn_getendpoint lower-level espn_getendpoint_raw, talk x-fantasy-filter, detail known view parameters helpful.","code":"library(ffscrapr) library(httr) library(jsonlite) library(glue)"},{"path":"https://ffscrapr.ffverse.com/articles/espn_getendpoint.html","id":"known-endpoints","dir":"Articles","previous_headings":"","what":"Known Endpoints","title":"ESPN: Get Endpoint","text":"ESPN Fantasy API typically accessed two endpoints: ’s non-exhaustive list view endpoints know : mTeam mMatchup mRoster mSettings mBoxscore mMatchupScore kona_player_info player_wl mSchedule mScoreboard Please note calling various combinations views can often return different results calling separately. good way stumble endpoints load Developer Tools browser, go Network tab, interact fantasy.espn.com site see API requests main page making. Alternatively, can consult source code API packages (including languages) might give bit better idea ’s possible!","code":"https://fantasy.espn.com/apis/v3/games/ffl/seasons/{season}/segments/0/leagues/{league_id} # for 2018 onward https://fantasy.espn.com/apis/v3/games/ffl/leagueHistory/{league_id}?seasonId={season} # for 2017 or earlier"},{"path":"https://ffscrapr.ffverse.com/articles/espn_getendpoint.html","id":"using-espn_getendpoint","dir":"Articles","previous_headings":"","what":"Using espn_getendpoint","title":"ESPN: Get Endpoint","text":"ESPN’s API mostly structured making requests different views main league endpoint. example, https://fantasy.espn.com/apis/v3/games/ffl/seasons/2020/segments/0/leagues/899513?view=mDraftDetail pull draft details 2020 league ID 899513. espn_getendpoint helps facilitate request allowing instead write: automatically pass league ID, season, authentication cookies (used) conn object place request. can also use lower-level equivalent, espn_getendpoint_raw, build URL conn object still uses conn object pass along authentication cookies: equivalent requests. One reason use “raw” version able pass multiple view parameters view=mDraftDetail&view=mSettings query, possible main endpoint function accepts one option view http query.","code":"conn <- espn_connect(season = 2020, league_id = 899513)  draft_details <- espn_getendpoint(conn, view = \"mDraftDetail\")  draft_details #> <ESPN - GET - Success: (200) OK> #> QUERY: <https://fantasy.espn.com/apis/v3/games/ffl/seasons/2020/segments/0/leagues/899513?view=mDraftDetail> #> List of 8 #>  $ draftDetail    :List of 4 #>  $ gameId         : int 1 #>  $ id             : int 899513 #>  $ scoringPeriodId: int 18 #>  $ seasonId       : int 2020 #>  $ segmentId      : int 0 #>  $ settings       :List of 1 #>  $ status         :List of 21 draft_details_raw <- espn_getendpoint_raw(   conn,   \"https://fantasy.espn.com/apis/v3/games/ffl/seasons/2020/segments/0/leagues/899513?view=mDraftDetail\")  draft_details_raw #> <ESPN - GET - Success: (200) OK> #> QUERY: <https://fantasy.espn.com/apis/v3/games/ffl/seasons/2020/segments/0/leagues/899513?view=mDraftDetail> #> List of 8 #>  $ draftDetail    :List of 4 #>  $ gameId         : int 1 #>  $ id             : int 899513 #>  $ scoringPeriodId: int 18 #>  $ seasonId       : int 2020 #>  $ segmentId      : int 0 #>  $ settings       :List of 1 #>  $ status         :List of 21"},{"path":"https://ffscrapr.ffverse.com/articles/espn_getendpoint.html","id":"x-fantasy-filter","dir":"Articles","previous_headings":"","what":"X-Fantasy-Filter","title":"ESPN: Get Endpoint","text":"Many endpoints also affected JSON header, X-Fantasy-Filter, can filter/sort/limit (remove limits) API response. example build valid JSON x-fantasy-filter, sourced code ff_playerscores: JSON limits total responses 5, filters “statIDs” returned just ones prefixed “00”, sorts whole thing percent owned, descending. ’m exactly clear options x-fantasy-filter , can use emulate ’s happening request fantasy.espn.com. espn_getendpoint espn_getendpoint_raw functions can accept x-fantasy-filters. espn_getendpoint x_fantasy_filterargument takes JSON object created , espn_getendpoint_raw requires object converted HTTP header first. Examples :","code":"xff <- list(players = list(   limit = 5,   sortPercOwned =      list(sortAsc = FALSE,          sortPriority = 1),   filterStatsForTopScoringPeriodIDs =      list(value = 2,          additionalValue = c(paste0(\"00\", conn$season)))   )) %>%   jsonlite::toJSON(auto_unbox = TRUE)  xff #> {\"players\":{\"limit\":5,\"sortPercOwned\":{\"sortAsc\":false,\"sortPriority\":1},\"filterStatsForTopScoringPeriodIDs\":{\"value\":2,\"additionalValue\":\"002020\"}}} player_scores <- espn_getendpoint(conn, view = \"kona_player_info\", x_fantasy_filter = xff)  player_scores_2 <- espn_getendpoint_raw(   conn,   \"https://fantasy.espn.com/apis/v3/games/ffl/seasons/2020/segments/0/leagues/899513?view=kona_player_info\",   httr::add_headers(`X-Fantasy-Filter` = xff))"},{"path":"https://ffscrapr.ffverse.com/articles/espn_getendpoint.html","id":"other-espn-api-resources","dir":"Articles","previous_headings":"","what":"Other ESPN API resources","title":"ESPN: Get Endpoint","text":"Kiernan Nichols’s fflr R package R package available CRAN built specifically ESPN API access. writing (2021-03-03) supports public leagues, style differences light-weight/lower-dependency package. Many API endpoints researched languages might able draw inspiration ’s possible checking : Christian Wendt’s espn-api Python package incredibly helpful discovering known documented API endpoints. Mike Kreiser’s ESPN-Fantasy-Football-API well-documented JS client. Steven Morse also several great blog posts using API, mostly accessed via Python.","code":""},{"path":"https://ffscrapr.ffverse.com/articles/ffscrapr_caching.html","id":"caching-its-responsible-web-etiquette","dir":"Articles","previous_headings":"","what":"Caching: It’s Responsible Web Etiquette!","title":"ffscrapr: Managing Cache","text":"One many packages inspired ffscrapr Dmytro Perepolkin’s polite package, sets pillars responsible web etiquette, including introducing , taking slowly, never asking twice thing. ffscrapr gives convenient routes support : can set user_agent string connection help identify API platform (MFL actually gives higher rate limit register API Client!) can set rate_limit options help manage load API (comply restrictions APIs set ) Behind scenes, ffscrapr saving results expensive (.e. slow, data-heavy) stable (.e. likely change rapidly) queries ) can return things faster b) minimize server load. vignette explains helps manage caching.","code":""},{"path":"https://ffscrapr.ffverse.com/articles/ffscrapr_caching.html","id":"what-is-being-cached-how-long-is-it-being-cached-for","dir":"Articles","previous_headings":"","what":"What is being cached? How long is it being cached for?","title":"ffscrapr: Managing Cache","text":"ffscrapr’s core functions often loop , stable endpoints help return data function - things like “player names/positions/teams”, “franchise IDs/names”, “league scoring rules” used frequently. ffscrapr incorporates memoise package help functionality, (writing) saves results functions: mfl_players(), sleeper_players(), fleaflicker_players() - functions stored 7 days ff_franchises(), ff_scoring(), ff_league() - functions stored 24 hours ff_standings(), ff_playerscores(), ff_starters(), ff_schedule() , ff_userleagues() - functions stored one hour dp_playerids() dp_values() - functions stored 24 hours can find updated list cached functions zzz.R source code page.","code":""},{"path":"https://ffscrapr.ffverse.com/articles/ffscrapr_caching.html","id":"where-is-it-being-cached","dir":"Articles","previous_headings":"","what":"Where is it being cached?","title":"ffscrapr: Managing Cache","text":"default, ffscrapr save results function call (.e. function + arguments) memory. like cache stored local filesystem, can adjust behaviour adding following line (project) .Rprofile, adding library/load package. instruct ffscrapr store cache machine, dictated typical cache location operating system. can see running following line code:","code":"options(ffscrapr.cache = \"filesystem\") rappdirs::user_cache_dir(\"ffscrapr\")"},{"path":"https://ffscrapr.ffverse.com/articles/ffscrapr_caching.html","id":"how-can-i-clear-the-cache","dir":"Articles","previous_headings":"","what":"How can I clear the cache?","title":"ffscrapr: Managing Cache","text":"can use following function clear cache (whether memory filesystem):","code":".ffscrapr_clear_cache()"},{"path":"https://ffscrapr.ffverse.com/articles/fleaflicker_basics.html","id":"values","dir":"Articles","previous_headings":"","what":"Values","title":"Fleaflicker: Basics","text":"Cool! Let’s pull additional context adding DynastyProcess player values. Let’s team summaries now! , ’ve got team summary values! like applying context, let’s turn percentages - helps normalise league environment. Armed value summary like , can see team strengths weaknesses pretty quickly, figure might interested positional surpluses might surplus position want look .","code":"player_values <- dp_values(\"values-players.csv\")  # The values are stored by fantasypros ID since that's where the data comes from.  # To join it to our rosters, we'll need playerID mappings.  player_ids <- dp_playerids() %>%    select(sportradar_id,fantasypros_id) %>%    filter(!is.na(sportradar_id),!is.na(fantasypros_id))  # We'll be joining it onto rosters, so we can trim down the values dataframe # to just IDs, age, and values  player_values <- player_values %>%    left_join(player_ids, by = c(\"fp_id\" = \"fantasypros_id\")) %>%    select(sportradar_id,age,ecr_2qb,ecr_pos,value_2qb)  # ff_rosters() will return the sportradar_id, which we can then match to our player values!  aaa_values <- aaa_rosters %>%    left_join(player_values, by = c(\"sportradar_id\"=\"sportradar_id\")) %>%    arrange(franchise_id,desc(value_2qb))  head(aaa_values) #> # A tibble: 6 × 11 #>   franchise_id franc…¹ playe…² playe…³ pos   team  sport…⁴   age ecr_2qb ecr_pos #>          <int> <chr>     <int> <chr>   <chr> <chr> <chr>   <dbl>   <dbl>   <dbl> #> 1      1578553 Runnin…   12159 Dak Pr… QB    DAL   861977…  27.9    10.3     4.4 #> 2      1578553 Runnin…   16250 Ja'Mar… WR    CIN   fa99e9…  21.3    41.9    13.8 #> 3      1578553 Runnin…   12926 Chris … WR    TB    baa61b…  25.3    42.6    13.8 #> 4      1578553 Runnin…   16259 Trey L… QB    SF    676a50…  21.1    43.3    13   #> 5      1578553 Runnin…   13325 Austin… RB    LAC   e5b8c4…  26.1    48.4    16.2 #> 6      1578553 Runnin…   15531 Brando… WR    SF    c90471…  23.2    57.1    20.4 #> # … with 1 more variable: value_2qb <int>, and abbreviated variable names #> #   ¹​franchise_name, ²​player_id, ³​player_name, ⁴​sportradar_id value_summary <- aaa_values %>%    group_by(franchise_id,franchise_name,pos) %>%    summarise(total_value = sum(value_2qb,na.rm = TRUE)) %>%   ungroup() %>%    group_by(franchise_id,franchise_name) %>%    mutate(team_value = sum(total_value)) %>%    ungroup() %>%    pivot_wider(names_from = pos, values_from = total_value) %>%    arrange(desc(team_value)) %>%    select(franchise_id,franchise_name,team_value,QB,RB,WR,TE)  value_summary #> # A tibble: 12 × 7 #>    franchise_id franchise_name        team_value    QB    RB    WR    TE #>           <int> <chr>                      <int> <int> <int> <int> <int> #>  1      1581722 syd12nyjets's Team         42601 12120 10478 19263   740 #>  2      1581719 Jmuthers's Team            42502 12069 19213  3641  7579 #>  3      1581803 ZachFarni's Team           39715  5908 20641 12931   235 #>  4      1582416 Ray Jay Team               37522  3843  7855 15337 10487 #>  5      1582423 The Verblanders            31289 10117  9972 10878   322 #>  6      1581721 Mjenkyns2004's Team        30245 13421  4682 11325   817 #>  7      1581718 Officially Rebuilding      29336  6340  7124 12921  2951 #>  8      1578553 Running Bear               29082 14002  3464 11551    65 #>  9      1581988 The DK Crew                28349 11822  8480  6218  1773 #> 10      1581726 SCJaguars's Team           26596  6999 10538  8510   549 #> 11      1581753 fede_mndz's Team           26485  2489 10871 12673   452 #> 12      1581720 brosene's Team             16432    NA  8277  6190  1965 value_summary_pct <- value_summary %>%    mutate_at(c(\"team_value\",\"QB\",\"RB\",\"WR\",\"TE\"),~.x/sum(.x)) %>%    mutate_at(c(\"team_value\",\"QB\",\"RB\",\"WR\",\"TE\"),round, 3)  value_summary_pct #> # A tibble: 12 × 7 #>    franchise_id franchise_name        team_value    QB    RB    WR    TE #>           <int> <chr>                      <dbl> <dbl> <dbl> <dbl> <dbl> #>  1      1581722 syd12nyjets's Team         0.112    NA 0.086 0.147 0.026 #>  2      1581719 Jmuthers's Team            0.112    NA 0.158 0.028 0.271 #>  3      1581803 ZachFarni's Team           0.104    NA 0.17  0.098 0.008 #>  4      1582416 Ray Jay Team               0.099    NA 0.065 0.117 0.375 #>  5      1582423 The Verblanders            0.082    NA 0.082 0.083 0.012 #>  6      1581721 Mjenkyns2004's Team        0.08     NA 0.039 0.086 0.029 #>  7      1581718 Officially Rebuilding      0.077    NA 0.059 0.098 0.106 #>  8      1578553 Running Bear               0.077    NA 0.028 0.088 0.002 #>  9      1581988 The DK Crew                0.075    NA 0.07  0.047 0.063 #> 10      1581726 SCJaguars's Team           0.07     NA 0.087 0.065 0.02  #> 11      1581753 fede_mndz's Team           0.07     NA 0.089 0.096 0.016 #> 12      1581720 brosene's Team             0.043    NA 0.068 0.047 0.07"},{"path":"https://ffscrapr.ffverse.com/articles/fleaflicker_basics.html","id":"age","dir":"Articles","previous_headings":"","what":"Age","title":"Fleaflicker: Basics","text":"Another question might ask: average age given team? like looking average age position, weighted dynasty value. helps give better idea age team - including might looking offload older veteran!","code":"age_summary <- aaa_values %>%    filter(pos %in% c(\"QB\",\"RB\",\"WR\",\"TE\")) %>%    group_by(franchise_id,pos) %>%    mutate(position_value = sum(value_2qb,na.rm=TRUE)) %>%    ungroup() %>%    mutate(weighted_age = age*value_2qb/position_value,          weighted_age = round(weighted_age, 1)) %>%    group_by(franchise_id,franchise_name,pos) %>%    summarise(count = n(),             age = sum(weighted_age,na.rm = TRUE)) %>%    pivot_wider(names_from = pos,               values_from = c(age,count))  age_summary #> # A tibble: 12 × 10 #> # Groups:   franchise_id, franchise_name [12] #>    franchi…¹ franc…² age_QB age_RB age_TE age_WR count…³ count…⁴ count…⁵ count…⁶ #>        <int> <chr>    <dbl>  <dbl>  <dbl>  <dbl>   <int>   <int>   <int>   <int> #>  1   1578553 Runnin…   26     26      8.4   23.5       6       5       3      14 #>  2   1581718 Offici…   31.4   24.5   21.1   26.4       3       8       2       8 #>  3   1581719 Jmuthe…   24.7   24.8   26.7   28.4       4       5       4       9 #>  4   1581720 brosen…   NA     25.7   24.6   26.3      NA       7       2       5 #>  5   1581721 Mjenky…   25.7   23     23.4   26.6       4       6       5       8 #>  6   1581722 syd12n…   24.4   23     25.5   22.5       5       5       4      14 #>  7   1581726 SCJagu…   22.2   24.3   26.3   24         5       7       4      10 #>  8   1581753 fede_m…   30.3   24.9   23.5   27.7       5       9       3      10 #>  9   1581803 ZachFa…   28.3   22.3   26.7   24.3       4       6       5      12 #> 10   1581988 The DK…   25.8   22.5   24.2   27.7       5       6       5       8 #> 11   1582416 Ray Ja…   30.8   27.2   29.9   25.7       3       3       7       7 #> 12   1582423 The Ve…   24.4   25.7   26.7   27.3       3       5       2       9 #> # … with abbreviated variable names ¹​franchise_id, ²​franchise_name, ³​count_QB, #> #   ⁴​count_RB, ⁵​count_TE, ⁶​count_WR"},{"path":"https://ffscrapr.ffverse.com/articles/fleaflicker_basics.html","id":"next-steps","dir":"Articles","previous_headings":"","what":"Next steps","title":"Fleaflicker: Basics","text":"vignette, ’ve used functions: ff_connect, ff_league, ff_rosters, dp_values. Now ’ve gotten far, check possibilities?","code":""},{"path":"https://ffscrapr.ffverse.com/articles/fleaflicker_getendpoint.html","id":"creating-custom-fleaflicker-api-calls","dir":"Articles","previous_headings":"","what":"Creating custom Fleaflicker API calls","title":"Fleaflicker: Get Endpoint","text":"Fleaflicker API fairly extensive. something ’d like access ’s beyond current scope ffscrapr, can use lower-level “fleaflicker_getendpoint” function create GET request access data, still using authentication rate-limiting features ’ve already created. example can call one endpoints - case, let’s zoom Fetch League Scoreboard endpoint, used inside different ffscrapr functions summarised ways. ’ll start opening page, https://www.fleaflicker.com/api-docs/index.html#operation--FetchLeagueScoreboard-get, documentation page particular endpoint. , can see Fleaflicker’s documentation says endpoint parameters : fleaflicker_getendpoint function already base url encoded, ’ll need pass endpoint without /, pass HTTP parameters arguments function (case sensitive!) Along parsed content, function also returns query response sent server. helpful debugging, can turn content dataframe careful application tidyverse. , ’ll able feed IDs FetchLeagueBoxscore endpoint https://www.fleaflicker.com/api-docs/index.html#operation--FetchLeagueScoreboard-get fantasy_game_id - ’ll able get player-level points actual stat data fantasy game! , can keep unravelling - including “viewingActualPoints” “viewingActualStats” columns!","code":"library(ffscrapr) library(dplyr) library(purrr) library(glue) GET /FetchLeagueScoreboard  Parameters:  - sport: string NFL, MLB, NBA, NHL NFL (in query)  - league_id: integer (int32) (in query)  - season: integer (int32) (in query)  - scoring_period: integer (int32) (in query) sport <- \"NFL\" league_id <- 206154 season <- 2020 week <- 5  response_scoreboard <- fleaflicker_getendpoint(\"FetchLeagueScoreboard\",                                                sport = sport,                                                 league_id = league_id,                                                 season = season,                                                 scoring_period = week) #> Using request.R from \"ffscrapr\"  str(response_scoreboard, max.level = 1) #> List of 3 #>  $ content :List of 3 #>  $ query   : chr \"https://www.fleaflicker.com/api/FetchLeagueScoreboard?sport=NFL&league_id=206154&season=2020&scoring_period=5\" #>  $ response:List of 9 #>   ..- attr(*, \"class\")= chr \"response\" #>  - attr(*, \"class\")= chr \"fleaflicker_api\" df_scoreboard <- response_scoreboard %>%    purrr::pluck(\"content\",\"games\") %>%    tibble::tibble() %>%    tidyr::unnest_wider(1) %>%    dplyr::mutate_at(c(\"away\",\"home\"),purrr::map_chr,purrr::pluck,\"name\") %>%    dplyr::mutate_at(c(\"homeScore\",\"awayScore\"),purrr::map_dbl,purrr::pluck,\"score\",\"value\")  head(df_scoreboard) #> # A tibble: 6 × 8 #>   id       away                    home  awayS…¹ homeS…² homeR…³ awayR…⁴ isFin…⁵ #>   <chr>    <chr>                   <chr>   <dbl>   <dbl> <chr>   <chr>   <lgl>   #> 1 46301923 Winterfell Dire Wolves  Top …    207.    162. LOSE    WIN     TRUE    #> 2 46301919 Goldenrod City Nightma… Wint…    145.    157. WIN     LOSE    TRUE    #> 3 46301921 Winterthur Angry Ducks  Clut…    153.    192. WIN     LOSE    TRUE    #> 4 46301922 Manitoba Marmots        Bame…    182.    183. WIN     LOSE    TRUE    #> 5 46301920 Springfield Isotopes    Shan…    176.    129. LOSE    WIN     TRUE    #> 6 46301926 Boomtown Sly Foxes      Phil…    199.    200. WIN     LOSE    TRUE    #> # … with abbreviated variable names ¹​awayScore, ²​homeScore, ³​homeResult, #> #   ⁴​awayResult, ⁵​isFinalScore # same variables as previous endpoint call! onegame_lineups <- fleaflicker_getendpoint(   \"FetchLeagueBoxscore\",   sport = sport,    league_id = league_id,    # example for one call, but you can call this in a map or loop!    fantasy_game_id = df_scoreboard$id[[1]],    scoring_period = week) %>%    purrr::pluck('content','lineups') %>%    tibble::tibble() %>%    tidyr::unnest_wider(1) %>%    tidyr::unnest_longer('slots') %>%    tidyr::unnest_wider('slots') %>%    tidyr::pivot_longer(c(\"home\",\"away\"),names_to = \"franchise\",values_to = \"player\") %>%    tidyr::unnest_wider('player')  str(onegame_lineups,max.level = 2) #> tibble [98 × 16] (S3: tbl_df/tbl/data.frame) #>  $ group               : chr [1:98] \"START\" \"START\" \"START\" \"START\" ... #>  $ position            :List of 98 #>  $ positionColor       :List of 98 #>  $ franchise           : chr [1:98] \"home\" \"away\" \"home\" \"away\" ... #>  $ proPlayer           :List of 98 #>  $ requestedGames      :List of 98 #>  $ viewingActualPoints :List of 98 #>  $ viewingActualStats  :List of 98 #>  $ requestedGamesPeriod:List of 98 #>  $ viewingFormat       : chr [1:98] \"TOTAL\" \"TOTAL\" \"TOTAL\" \"TOTAL\" ... #>  $ viewingRange        :List of 98 #>  $ owner               :List of 98 #>  $ displayGroup        : chr [1:98] \"PASSER\" \"PASSER\" \"RUSHER\" \"RUSHER\" ... #>  $ rankFantasy         :List of 98 #>  $ rankDraft           :List of 98 #>  $ lastX               :List of 98"},{"path":"https://ffscrapr.ffverse.com/articles/mfl_basics.html","id":"values","dir":"Articles","previous_headings":"","what":"Values","title":"MFL: Basics","text":"Cool! Let’s pull additional context adding DynastyProcess player values. Let’s team summaries now! , ’ve got team summary values! like applying context, let’s turn percentages. Armed value summary like , can see team strengths weaknesses pretty quickly, figure might interested positional surpluses might surplus position want look .","code":"player_values <- dp_values(\"values-players.csv\")  # The values are stored by fantasypros ID since that's where the data comes from.  # To join it to our rosters, we'll need playerID mappings.  player_ids <- dp_playerids() %>%    select(mfl_id,fantasypros_id)  player_values <- player_values %>%    left_join(player_ids, by = c(\"fp_id\" = \"fantasypros_id\")) %>%    select(mfl_id,ecr_1qb,ecr_pos,value_1qb)  # Drilling down to just 1QB values and IDs, we'll be joining it onto rosters and don't need the extra stuff  ssb_values <- ssb_rosters %>%    left_join(player_values, by = c(\"player_id\"=\"mfl_id\")) %>%    arrange(franchise_id,desc(value_1qb))  head(ssb_values) #> # A tibble: 6 × 14 #>   franchise_id franc…¹ playe…² playe…³ pos   team    age roste…⁴ drafted draft…⁵ #>   <chr>        <chr>   <chr>   <chr>   <chr> <chr> <dbl> <chr>   <chr>   <chr>   #> 1 0001         Team P… 14803   Edward… RB    KCC    23.7 ROSTER  1.01    2020    #> 2 0001         Team P… 14835   Higgin… WR    CIN    23.9 ROSTER  Trade   2020    #> 3 0001         Team P… 14779   Herber… QB    LAC    24.8 ROSTER  2.11    2020    #> 4 0001         Team P… 14777   Burrow… QB    CIN    26   INJURE… 1.14    2020    #> 5 0001         Team P… 14838   Shenau… WR    JAC    24.2 ROSTER  2.02    2020    #> 6 0001         Team P… 11680   Landry… WR    CLE    30   ROSTER  4.02    2014    #> # … with 4 more variables: draft_round <chr>, ecr_1qb <dbl>, ecr_pos <dbl>, #> #   value_1qb <int>, and abbreviated variable names ¹​franchise_name, #> #   ²​player_id, ³​player_name, ⁴​roster_status, ⁵​draft_year value_summary <- ssb_values %>%    group_by(franchise_id,franchise_name,pos) %>%    summarise(total_value = sum(value_1qb,na.rm = TRUE)) %>%   ungroup() %>%    group_by(franchise_id,franchise_name) %>%    mutate(team_value = sum(total_value)) %>%    ungroup() %>%    pivot_wider(names_from = pos, values_from = total_value) %>%    arrange(desc(team_value))  value_summary #> # A tibble: 14 × 7 #>    franchise_id franchise_name     team_value    QB    RB    TE    WR #>    <chr>        <chr>                   <int> <int> <int> <int> <int> #>  1 0010         Team Yoshi              41170  4753 14710  7284 14423 #>  2 0006         Team King Dedede        35184  6458  2513   597 25616 #>  3 0004         Team Ice Climbers       35091   115 19362  2470 13144 #>  4 0009         Team Link               33078  1168 10578  5188 16144 #>  5 0003         Team Donkey Kong        30043  1299  6034  7220 15490 #>  6 0007         Team Kirby              27880  4890 14108   182  8700 #>  7 0005         Team Dr. Mario          27659    17  7137  2586 17919 #>  8 0011         Team Diddy Kong         26143   564 12406  2583 10590 #>  9 0002         Team Simon Belmont      25905    40 11318    12 14535 #> 10 0012         Team Mewtwo             24317   618 17670  1340  4689 #> 11 0013         Team Ness               20004   803 15980  1744  1477 #> 12 0014         Team Luigi              19761  1738  5828  1068 11127 #> 13 0001         Team Pikachu            17651  4323  6293   833  6202 #> 14 0008         Team Bowser             13150  5673  4069    25  3383 value_summary_pct <- value_summary %>%    mutate_at(c(\"team_value\",\"QB\",\"RB\",\"WR\",\"TE\"),~.x/sum(.x)) %>%    mutate_at(c(\"team_value\",\"QB\",\"RB\",\"WR\",\"TE\"),round, 3)  value_summary_pct #> # A tibble: 14 × 7 #>    franchise_id franchise_name     team_value    QB    RB    TE    WR #>    <chr>        <chr>                   <dbl> <dbl> <dbl> <dbl> <dbl> #>  1 0010         Team Yoshi              0.109 0.146 0.099 0.22  0.088 #>  2 0006         Team King Dedede        0.093 0.199 0.017 0.018 0.157 #>  3 0004         Team Ice Climbers       0.093 0.004 0.131 0.075 0.08  #>  4 0009         Team Link               0.088 0.036 0.071 0.157 0.099 #>  5 0003         Team Donkey Kong        0.08  0.04  0.041 0.218 0.095 #>  6 0007         Team Kirby              0.074 0.151 0.095 0.005 0.053 #>  7 0005         Team Dr. Mario          0.073 0.001 0.048 0.078 0.11  #>  8 0011         Team Diddy Kong         0.069 0.017 0.084 0.078 0.065 #>  9 0002         Team Simon Belmont      0.069 0.001 0.076 0     0.089 #> 10 0012         Team Mewtwo             0.064 0.019 0.119 0.04  0.029 #> 11 0013         Team Ness               0.053 0.025 0.108 0.053 0.009 #> 12 0014         Team Luigi              0.052 0.054 0.039 0.032 0.068 #> 13 0001         Team Pikachu            0.047 0.133 0.043 0.025 0.038 #> 14 0008         Team Bowser             0.035 0.175 0.027 0.001 0.021"},{"path":"https://ffscrapr.ffverse.com/articles/mfl_basics.html","id":"age","dir":"Articles","previous_headings":"","what":"Age","title":"MFL: Basics","text":"Another question might ask: average age given team? like looking average age position, weighted dynasty value. helps give better idea age team!","code":"age_summary <- ssb_values %>%    group_by(franchise_id,pos) %>%    mutate(position_value = sum(value_1qb,na.rm=TRUE)) %>%    ungroup() %>%    mutate(weighted_age = age*value_1qb/position_value) %>%    group_by(franchise_id,franchise_name,pos) %>%    summarise(count = n(),             age = sum(weighted_age,na.rm = TRUE)) %>%    pivot_wider(names_from = pos,               values_from = c(age,count))  age_summary #> # A tibble: 14 × 10 #> # Groups:   franchise_id, franchise_name [14] #>    franchi…¹ franc…² age_QB age_RB age_TE age_WR count…³ count…⁴ count…⁵ count…⁶ #>    <chr>     <chr>    <dbl>  <dbl>  <dbl>  <dbl>   <int>   <int>   <int>   <int> #>  1 0001      Team P…   25.3   24.2   27.6   24.7       4       8       7      14 #>  2 0002      Team S…   26.3   26.9   26.1   25.9       8      11       3       8 #>  3 0003      Team D…   26.4   25.1   33.1   28.5       5       8       7      13 #>  4 0004      Team I…   30.1   26.9   28.1   28.5       5       9       9      13 #>  5 0005      Team D…   37.2   24.7   26.4   26.2       2       7       3      19 #>  6 0006      Team K…   27.2   27.3   28.0   26.6       3      10       7      10 #>  7 0007      Team K…   25.9   26.7   30.3   30.2       4       9       4      17 #>  8 0008      Team B…   27.6   28.2   34.6   29.8       4      11       4      11 #>  9 0009      Team L…   28.8   27.6   29.9   29.8       3      11       5       7 #> 10 0010      Team Y…   29.3   23.8   29.3   27.5       2       6       6      16 #> 11 0011      Team D…   32.9   28.3   25.5   24.9       4      12       6      11 #> 12 0012      Team M…   34.5   25.5   26.0   25.3       5       7       6      13 #> 13 0013      Team N…   34.3   25.1   25.1   26.8       5       9       5      12 #> 14 0014      Team L…   34.0   26.8   25.1   28.6       3      10       7      14 #> # … with abbreviated variable names ¹​franchise_id, ²​franchise_name, ³​count_QB, #> #   ⁴​count_RB, ⁵​count_TE, ⁶​count_WR"},{"path":"https://ffscrapr.ffverse.com/articles/mfl_basics.html","id":"next-steps","dir":"Articles","previous_headings":"","what":"Next steps","title":"MFL: Basics","text":"vignette, ’ve used three functions: ff_connect, ff_league, ff_rosters. Now ’ve gotten far, check possibilities?","code":""},{"path":"https://ffscrapr.ffverse.com/articles/mfl_getendpoint.html","id":"creating-custom-mfl-api-calls","dir":"Articles","previous_headings":"","what":"Creating custom MFL API calls","title":"MFL: Get Endpoint","text":"MFL API extensive. something ’d like access beyond current scope ffscrapr, can use lower-level “mfl_getendpoint” function create GET request access data, still using authentication rate-limiting features ’ve already created. example can call one endpoints - case, let’s try searching SFBX leagues leagueSearch endpoint. ’ll start opening page, https://api.myfantasyleague.com/2020/api_info?STATE=test&CCAT=export&TYPE=leagueSearch, “test” page particular endpoint. , can see parameter required “SEARCH”. need connection object pass mfl_getendpoint function, although example don’t need give much since endpoint doesn’t need leagueID username/password APIKEY. parameters mfl_getendpoint function conn, endpoint, optional parameters required API. function automatically insert league_id, API key, /authentication cookies connection object, request JSON - need add parameters. safest assume everything case-sensitive: endpoint must match case displayed MFL (“leagueSearch”) SEARCH argument name must provided upper-case. function returns list query sent, response received, content parsed - helps debug result function later, inspecting query sent response received. like extract content purrr::pluck convert tibble unnest content , can use base R subsetting magrittr::extract2 purpose.","code":"library(ffscrapr) conn <- mfl_connect(season = 2020)  conn #> <MFL connection 2020_> #> List of 5 #>  $ platform   : chr \"MFL\" #>  $ season     : num 2020 #>  $ league_id  : chr(0)  #>  $ APIKEY     : NULL #>  $ auth_cookie: NULL #>  - attr(*, \"class\")= chr \"mfl_conn\" sfb_search <- mfl_getendpoint(conn,endpoint = \"leagueSearch\", SEARCH = \"sfbx conference\") #> Using request.R from \"ffscrapr\"  str(sfb_search, max.level = 1) #> List of 3 #>  $ content :List of 3 #>  $ query   : chr \"https://api.myfantasyleague.com/2020/export?TYPE=leagueSearch&SEARCH=sfbx%20conference&JSON=1\" #>  $ response:List of 9 #>   ..- attr(*, \"class\")= chr \"response\" #>  - attr(*, \"class\")= chr \"mfl_api\" search_results <- sfb_search %>%    purrr::pluck(\"content\",\"leagues\",\"league\") %>%    tibble::tibble() %>%    tidyr::unnest_wider(1)  head(search_results) #> # A tibble: 6 × 3 #>   homeURL                                          name                id    #>   <chr>                                            <chr>               <chr> #> 1 http://www73.myfantasyleague.com/2020/home/13411 #SFBX Conference 12 13411 #> 2 http://www73.myfantasyleague.com/2020/home/16428 #SFBX Conference 6  16428 #> 3 http://www73.myfantasyleague.com/2020/home/17910 #SFBX Conference 11 17910 #> 4 http://www73.myfantasyleague.com/2020/home/26453 #SFBX Conference 8  26453 #> 5 http://www73.myfantasyleague.com/2020/home/27495 #SFBX Conference 2  27495 #> 6 http://www73.myfantasyleague.com/2020/home/31492 #SFBX Conference 14 31492"},{"path":"https://ffscrapr.ffverse.com/articles/mfl_getendpoint.html","id":"another-example-trade-bait","dir":"Articles","previous_headings":"","what":"Another Example: Trade Bait","title":"MFL: Get Endpoint","text":"’s another example, time trade bait endpoint: https://api.myfantasyleague.com/2020/api_info?STATE=test&CCAT=export&TYPE=tradeBait","code":"fog <- mfl_connect(season = 2019, league_id = 12608)  fog_tradebait <- mfl_getendpoint(fog, \"tradeBait\", INCLUDE_DRAFT_PICKS = 1) %>%    purrr::pluck(\"content\",\"tradeBaits\",\"tradeBait\") %>%    tibble::tibble() %>%    tidyr::unnest_wider(1) %>%    tidyr::separate_rows(\"willGiveUp\",sep = \",\") %>%    dplyr::left_join(     ff_franchises(fog) %>% dplyr::select(\"franchise_id\",\"franchise_name\"),     by = c(\"franchise_id\")   ) %>%    dplyr::left_join(     mfl_players(fog) %>% dplyr::select(\"player_id\",\"player_name\",\"pos\",\"age\",\"team\"),     by = c(\"willGiveUp\" = \"player_id\")   )  head(fog_tradebait) #> # A tibble: 6 × 9 #>   timestamp  franchise_id willGiveUp inExcha…¹ franc…² playe…³ pos     age team  #>   <chr>      <chr>        <chr>      <chr>     <chr>   <chr>   <chr> <dbl> <chr> #> 1 1574520555 0001         7394       \"anyone … @JohnB… Rivers… QB     41   LAC   #> 2 1574520555 0001         13128      \"anyone … @JohnB… Cook, … RB     27.3 MIN   #> 3 1580535809 0003         13319      \"\"        The Ac… Jones,… RB     28   GBP   #> 4 1580535809 0003         13139      \"\"        The Ac… Willia… RB     27.7 GBP   #> 5 1580535809 0003         11675      \"\"        The Ac… Adams,… WR     30   GBP   #> 6 1580572165 0004         12171      \"\"        Kevin … Johnso… RB     31   ARI   #> # … with abbreviated variable names ¹​inExchangeFor, ²​franchise_name, #> #   ³​player_name"},{"path":"https://ffscrapr.ffverse.com/articles/sleeper_basics.html","id":"values","dir":"Articles","previous_headings":"","what":"Values","title":"Sleeper: Basics","text":"Cool! Let’s pull additional context adding DynastyProcess player values. Let’s team summaries now! , ’ve got team summary values! like applying context, let’s turn percentages - helps normalise league environment. Armed value summary like , can see team strengths weaknesses pretty quickly, figure might interested positional surpluses might surplus position want look .","code":"player_values <- dp_values(\"values-players.csv\")  # The values are stored by fantasypros ID since that's where the data comes from.  # To join it to our rosters, we'll need playerID mappings.  player_ids <- dp_playerids() %>%    select(sleeper_id,fantasypros_id)  player_values <- player_values %>%    left_join(player_ids, by = c(\"fp_id\" = \"fantasypros_id\")) %>%    select(sleeper_id,ecr_1qb,ecr_pos,value_1qb)  # Drilling down to just 1QB values and IDs, we'll be joining it onto rosters and don't need the extra stuff  jml_values <- jml_rosters %>%    left_join(player_values, by = c(\"player_id\"=\"sleeper_id\")) %>%    arrange(franchise_id,desc(value_1qb))  head(jml_values) #> # A tibble: 6 × 10 #>   franchise_id franc…¹ playe…² playe…³ pos   team    age ecr_1qb ecr_pos value…⁴ #>   <chr>        <chr>   <chr>   <chr>   <chr> <chr> <dbl>   <dbl>   <dbl>   <int> #> 1 1            Fake N… 4866    Saquon… RB    NYG    25.8     3.4     2.8    9694 #> 2 1            Fake N… 4199    Aaron … RB    GB     28      21      10.3    6410 #> 3 1            Fake N… 1426    DeAndr… WR    ARI    30.5    21.1     7.2    6395 #> 4 1            Fake N… 4037    Chris … WR    TB     26.8    33.7    13.8    4756 #> 5 1            Fake N… 4098    Kareem… RB    CLE    27.4    63.7    23.7    2350 #> 6 1            Fake N… 5022    Dallas… TE    PHI    27.4    83.2     7.8    1486 #> # … with abbreviated variable names ¹​franchise_name, ²​player_id, ³​player_name, #> #   ⁴​value_1qb value_summary <- jml_values %>%    group_by(franchise_id,franchise_name,pos) %>%    summarise(total_value = sum(value_1qb,na.rm = TRUE)) %>%   ungroup() %>%    group_by(franchise_id,franchise_name) %>%    mutate(team_value = sum(total_value)) %>%    ungroup() %>%    pivot_wider(names_from = pos, values_from = total_value) %>%    arrange(desc(team_value))  value_summary #> # A tibble: 12 × 8 #>    franchise_id franchise_name    team_value    QB    RB    TE    WR    FB #>    <chr>        <chr>                  <int> <int> <int> <int> <int> <int> #>  1 3            solarpool              45406  7664 23920   529 13293    NA #>  2 4            The FANTom Menace      41754  3051  7594  1820 29289    NA #>  3 11           Permian Panthers       40081  3889  9902  6997 19293    NA #>  4 1            Fake News              37716  1505 19221  2730 14260    NA #>  5 8            Hocka Flocka           37314  1234 20459  2511 13110    NA #>  6 12           jaydk                  33981  1696 17692  2936 11657    NA #>  7 5            Barbarians             32614  3770 19492  4629  4723    NA #>  8 6            sox05syd               30780  4329  5614  8136 12701    NA #>  9 9            ZPMiller97             24697  2941 12782   998  7976    NA #> 10 2            KingGabe               19931    41  6327    15 13548    NA #> 11 7            Flipadelphia05         18140  1951  4799   789 10601    NA #> 12 10           JMLarkin               14197   336    67   884 12908     2 value_summary_pct <- value_summary %>%    mutate_at(c(\"team_value\",\"QB\",\"RB\",\"WR\",\"TE\"),~.x/sum(.x)) %>%    mutate_at(c(\"team_value\",\"QB\",\"RB\",\"WR\",\"TE\"),round, 3)  value_summary_pct #> # A tibble: 12 × 8 #>    franchise_id franchise_name    team_value    QB    RB    TE    WR    FB #>    <chr>        <chr>                  <dbl> <dbl> <dbl> <dbl> <dbl> <int> #>  1 3            solarpool              0.121 0.236 0.162 0.016 0.081    NA #>  2 4            The FANTom Menace      0.111 0.094 0.051 0.055 0.179    NA #>  3 11           Permian Panthers       0.106 0.12  0.067 0.212 0.118    NA #>  4 1            Fake News              0.1   0.046 0.13  0.083 0.087    NA #>  5 8            Hocka Flocka           0.099 0.038 0.138 0.076 0.08     NA #>  6 12           jaydk                  0.09  0.052 0.12  0.089 0.071    NA #>  7 5            Barbarians             0.087 0.116 0.132 0.14  0.029    NA #>  8 6            sox05syd               0.082 0.134 0.038 0.247 0.078    NA #>  9 9            ZPMiller97             0.066 0.091 0.086 0.03  0.049    NA #> 10 2            KingGabe               0.053 0.001 0.043 0     0.083    NA #> 11 7            Flipadelphia05         0.048 0.06  0.032 0.024 0.065    NA #> 12 10           JMLarkin               0.038 0.01  0     0.027 0.079     2"},{"path":"https://ffscrapr.ffverse.com/articles/sleeper_basics.html","id":"age","dir":"Articles","previous_headings":"","what":"Age","title":"Sleeper: Basics","text":"Another question might ask: average age given team? like looking average age position, weighted dynasty value. helps give better idea age team - including might looking offload older veteran!","code":"age_summary <- jml_values %>%    group_by(franchise_id,pos) %>%    mutate(position_value = sum(value_1qb,na.rm=TRUE)) %>%    ungroup() %>%    mutate(weighted_age = age*value_1qb/position_value,          weighted_age = round(weighted_age, 1)) %>%    group_by(franchise_id,franchise_name,pos) %>%    summarise(count = n(),             age = sum(weighted_age,na.rm = TRUE)) %>%    pivot_wider(names_from = pos,               values_from = c(age,count))  age_summary #> # A tibble: 12 × 12 #> # Groups:   franchise_id, franchise_name [12] #>    franchis…¹ franc…² age_QB age_RB age_TE age_WR age_FB count…³ count…⁴ count…⁵ #>    <chr>      <chr>    <dbl>  <dbl>  <dbl>  <dbl>  <dbl>   <int>   <int>   <int> #>  1 1          Fake N…   30.2   26.8   27.1   28.9   NA         3       8       7 #>  2 10         JMLark…   29.9   28.7   27.4   26.6   31.6       3      10       3 #>  3 11         Permia…   25.5   24.5   33     27     NA         4       9       7 #>  4 12         jaydk     33.5   27.1   27.5   29.3   NA         4       7       5 #>  5 2          KingGa…   30.4   23.9   28.7   23.7   NA         5       4       3 #>  6 3          solarp…   26.8   27.2   28.1   29.2   NA         5      10       4 #>  7 4          The FA…   30.3   25     25.3   28.3   NA         5      14       2 #>  8 5          Barbar…   26.6   26     30.2   27.7   NA         3      10       6 #>  9 6          sox05s…   25.3   25.5   28.6   26.8   NA         3       5       9 #> 10 7          Flipad…   34.4   27     28.8   28.3   NA         2      10       4 #> 11 8          Hocka …   32.9   25.7   25.3   25     NA         3       6       4 #> 12 9          ZPMill…   25.9   25.4   28.1   26.4   NA         3       9       4 #> # … with 2 more variables: count_WR <int>, count_FB <int>, and abbreviated #> #   variable names ¹​franchise_id, ²​franchise_name, ³​count_QB, ⁴​count_RB, #> #   ⁵​count_TE"},{"path":"https://ffscrapr.ffverse.com/articles/sleeper_basics.html","id":"next-steps","dir":"Articles","previous_headings":"","what":"Next steps","title":"Sleeper: Basics","text":"vignette, ’ve used ~three functions: ff_connect, ff_league, ff_rosters. Now ’ve gotten far, check possibilities?","code":""},{"path":"https://ffscrapr.ffverse.com/articles/sleeper_getendpoint.html","id":"creating-custom-sleeper-api-calls","dir":"Articles","previous_headings":"","what":"Creating custom Sleeper API calls","title":"Sleeper: Get Endpoint","text":"Sleeper API pretty extensive. something ’d like access ’s beyond current scope ffscrapr, can use lower-level “sleeper_getendpoint” function create GET request access data, still using authentication rate-limiting features ’ve already created. example can call one endpoints - case, let’s pull Sleeper’s trending players data! ’ll start opening page, https://docs.sleeper.app/#trending-players, documentation page particular endpoint. , can see Sleeper’s documentation says endpoint : https://api.sleeper.app/v1/players/<sport>/trending/<type>?lookback_hours=<hours>&limit=<int> first glance, can see takes two parameters within endpoint call (sport type) can adjust query HTTP parameters lookback_hours limit. sleeper_getendpoint function already https://api.sleeper.app/v1/ part encoded, ’ll need pass remaining part URL endpoint, pass HTTP parameters arguments function (case sensitive!) can use glue package parameterise , although can also use base R’s paste function just easily. Along parsed content, function also returns query response sent server. helpful debugging, can turn content dataframe careful application tidyverse. isn’t helpful without knowing players , let’s pull players endpoint well - one convenient function! - means something us now! writing (2020-11-10), Kalen Ballage added player. Haven’t bitten ?","code":"library(ffscrapr) library(dplyr) library(purrr) library(glue) type <- \"add\"  query <- glue::glue('players/nfl/trending/{type}')  query #> players/nfl/trending/add  response_trending <- sleeper_getendpoint(query,lookback_hours = 48, limit = 10) #> Using request.R from \"ffscrapr\" #> No encoding supplied: defaulting to UTF-8.  str(response_trending, max.level = 1) #> List of 3 #>  $ content :List of 10 #>  $ query   : chr \"https://api.sleeper.app/v1/players/nfl/trending/add?lookback_hours=48&limit=10\" #>  $ response:List of 8 #>   ..- attr(*, \"class\")= chr \"response\" #>  - attr(*, \"class\")= chr \"sleeper_api\" df_trending <- response_trending %>%    purrr::pluck(\"content\") %>%    dplyr::bind_rows()  head(df_trending) #> # A tibble: 6 × 2 #>   player_id count #>   <chr>     <int> #> 1 6002      14287 #> 2 7904      11553 #> 3 7703      11403 #> 4 4622       8548 #> 5 2711       7165 #> 6 6271       5452 players <- sleeper_players() %>%    select(player_id, player_name, pos, team, age) #> No encoding supplied: defaulting to UTF-8.  trending <- df_trending %>%    left_join(players, by = \"player_id\")  trending #> # A tibble: 10 × 6 #>    player_id count player_name       pos   team    age #>    <chr>     <int> <chr>             <chr> <chr> <dbl> #>  1 6002      14287 Qadree Ollison    RB    ATL    26.3 #>  2 7904      11553 Stevie Scott      RB    NO     NA   #>  3 7703      11403 Jacob Harris      TE    LAR    NA   #>  4 4622       8548 Keelan Cole       WR    NYJ    29.6 #>  5 2711       7165 Taylor Heinicke   QB    WAS    29.7 #>  6 6271       5452 Olamide Zaccheaus WR    ATL    25.4 #>  7 5199       4462 Byron Pringle     WR    KC     29.1 #>  8 7622       4082 Sammis Reyes      TE    WAS    27.1 #>  9 7530       3646 Frank Darby       WR    ATL    NA   #> 10 2583       3201 Tyrell Williams   WR    DET    30.8"},{"path":"https://ffscrapr.ffverse.com/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Tan Ho. Author, maintainer. Tony ElHabr. Contributor. Joe Sydlowski. Contributor.","code":""},{"path":"https://ffscrapr.ffverse.com/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Ho T (2022). ffscrapr: API Client Fantasy Football League Platforms. https://ffscrapr.ffverse.com, https://github.com/ffverse/ffscrapr, https://api.myfantasyleague.com/2020/api_info, https://docs.sleeper.app, https://www.fleaflicker.com/api-docs/index.html, https://www.espn.com/fantasy/, https://www.nflfastr.com/reference/load_player_stats.html.","code":"@Manual{,   title = {ffscrapr: API Client for Fantasy Football League Platforms},   author = {Tan Ho},   year = {2022},   note = {https://ffscrapr.ffverse.com, https://github.com/ffverse/ffscrapr, https://api.myfantasyleague.com/2020/api_info, https://docs.sleeper.app, https://www.fleaflicker.com/api-docs/index.html, https://www.espn.com/fantasy/, https://www.nflfastr.com/reference/load_player_stats.html}, }"},{"path":"https://ffscrapr.ffverse.com/index.html","id":"ffscrapr-","dir":"","previous_headings":"","what":"ffscrapr • an R package for Fantasy Football APIs","title":"ffscrapr • an R package for Fantasy Football APIs","text":"R Client Fantasy Football League APIs Helps access various Fantasy Football APIs (currently MFL, Sleeper, Fleaflicker, ESPN - eventually Yahoo, potentially others) handling authentication/rate-limiting/caching, forming appropriate calls, returning tidy dataframes can easily connected data sources.","code":""},{"path":"https://ffscrapr.ffverse.com/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"ffscrapr • an R package for Fantasy Football APIs","text":"Install stable version package CRAN: Install development version either r-universe GitHub: dev version separate documentation site .","code":"install.packages(\"ffscrapr\") install.packages(\"ffscrapr\", repos = \"https://ffverse.r-universe.dev\") # pak is recommended, see https://github.com/r-lib/pak pak::pak(\"ffverse/ffscrapr\") # can also use remotes remotes::install_github(\"ffverse/ffscrapr\")"},{"path":"https://ffscrapr.ffverse.com/index.html","id":"usage","dir":"","previous_headings":"","what":"Usage","title":"ffscrapr • an R package for Fantasy Football APIs","text":"ffscrapr functions start connection object created ff_connect(), stores connection, authentication, user-defined parameters. object used functions help return correct data. Platform-specific guides getting started ffscrapr : MyFantasyLeague Sleeper Fleaflicker ESPN also advanced guides custom API calls Articles section, well guides optimizing ffscrapr’s performance.","code":"library(ffscrapr) ssb <- ff_connect(platform = \"mfl\", league_id = \"54040\", season = 2020)  # Get a summary of league settings ff_league(ssb) %>% str() #> tibble [1 x 17] (S3: tbl_df/tbl/data.frame) #>  $ league_id        : chr \"54040\" #>  $ league_name      : chr \"The Super Smash Bros Dynasty League\" #>  $ season           : int 2020 #>  $ league_type      : chr NA #>  $ franchise_count  : num 14 #>  $ qb_type          : chr \"1QB\" #>  $ idp              : logi FALSE #>  $ scoring_flags    : chr \"0.5_ppr, TEPrem, PP1D\" #>  $ best_ball        : logi FALSE #>  $ salary_cap       : logi FALSE #>  $ player_copies    : num 1 #>  $ years_active     : chr \"2018-2021\" #>  $ qb_count         : chr \"1\" #>  $ roster_size      : num 33 #>  $ league_depth     : num 462 #>  $ draft_type       : chr \"email draft\" #>  $ draft_player_pool: chr \"Both\"  # Get rosters ff_rosters(ssb) #> # A tibble: 442 x 11 #>   franchise_id franchise_name player_id player_name     pos   team    age #>   <chr>        <chr>          <chr>     <chr>           <chr> <chr> <dbl> #> 1 0001         Team Pikachu   13189     Engram, Evan    TE    NYG    27.7 #> 2 0001         Team Pikachu   11680     Landry, Jarvis  WR    CLE    29.5 #> 3 0001         Team Pikachu   13645     Smith, Tre'Quan WR    NOS    26.3 #> 4 0001         Team Pikachu   12110     Brate, Cameron  TE    TBB    30.9 #> 5 0001         Team Pikachu   13168     Reynolds, Josh  WR    LAR    27.2 #> # ... with 437 more rows, and 4 more variables: roster_status <chr>, #> #   drafted <chr>, draft_year <chr>, draft_round <chr>  # Get transactions ff_transactions(ssb) #> # A tibble: 1,145 x 12 #>   timestamp           type  type_desc   franchise_id franchise_name #>   <dttm>              <chr> <chr>       <chr>        <chr>          #> 1 2021-02-12 14:32:39 TRADE traded_away 0008         Team Bowser    #> 2 2021-02-12 14:32:39 TRADE traded_for  0008         Team Bowser    #> 3 2021-02-12 14:32:39 TRADE traded_for  0008         Team Bowser    #> 4 2021-02-12 14:32:39 TRADE traded_for  0008         Team Bowser    #> 5 2021-02-12 14:32:39 TRADE traded_for  0008         Team Bowser    #> # ... with 1,140 more rows, and 7 more variables: player_id <chr>, #> #   player_name <chr>, pos <chr>, team <chr>, bbid_spent <dbl>, #> #   trade_partner <chr>, comments <chr>"},{"path":"https://ffscrapr.ffverse.com/index.html","id":"support","dir":"","previous_headings":"","what":"Support","title":"ffscrapr • an R package for Fantasy Football APIs","text":"best places get help package : nflverse discord (package well anything R/NFL related) opening issue","code":""},{"path":"https://ffscrapr.ffverse.com/index.html","id":"contributing","dir":"","previous_headings":"","what":"Contributing","title":"ffscrapr • an R package for Fantasy Football APIs","text":"Many hands make light work! ways can contribute project: can open issue ’d like request specific data report bug/error. can sponsor project donations! ’d like contribute code, please check contribution guidelines.","code":""},{"path":"https://ffscrapr.ffverse.com/index.html","id":"terms-of-use","dir":"","previous_headings":"","what":"Terms of Use","title":"ffscrapr • an R package for Fantasy Football APIs","text":"R code package released open source MIT license. APIs data accessed package belong respective owners, governed terms use.","code":""},{"path":"https://ffscrapr.ffverse.com/reference/dot-add_allplay.html","id":null,"dir":"Reference","previous_headings":"","what":"Add allplay from a standardised schedule output — .add_allplay","title":"Add allplay from a standardised schedule output — .add_allplay","text":"Add allplay standardised schedule output","code":""},{"path":"https://ffscrapr.ffverse.com/reference/dot-add_allplay.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add allplay from a standardised schedule output — .add_allplay","text":"","code":".add_allplay(schedule)"},{"path":"https://ffscrapr.ffverse.com/reference/dot-add_allplay.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add allplay from a standardised schedule output — .add_allplay","text":"schedule output ff_schedule","code":""},{"path":"https://ffscrapr.ffverse.com/reference/dot-as_date.html","id":null,"dir":"Reference","previous_headings":"","what":"date utils — .as_date","title":"date utils — .as_date","text":"date utils","code":""},{"path":"https://ffscrapr.ffverse.com/reference/dot-as_date.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"date utils — .as_date","text":"","code":".as_date(x)"},{"path":"https://ffscrapr.ffverse.com/reference/dot-as_datetime.html","id":null,"dir":"Reference","previous_headings":"","what":"date utils — .as_datetime","title":"date utils — .as_datetime","text":"date utils","code":""},{"path":"https://ffscrapr.ffverse.com/reference/dot-as_datetime.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"date utils — .as_datetime","text":"","code":".as_datetime(x)"},{"path":"https://ffscrapr.ffverse.com/reference/dot-espn_activity_map.html","id":null,"dir":"Reference","previous_headings":"","what":"ESPN Activity/Transaction Mapping — .espn_activity_map","title":"ESPN Activity/Transaction Mapping — .espn_activity_map","text":"ESPN Activity/Transaction Mapping","code":""},{"path":"https://ffscrapr.ffverse.com/reference/dot-espn_activity_map.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"ESPN Activity/Transaction Mapping — .espn_activity_map","text":"","code":".espn_activity_map()"},{"path":[]},{"path":"https://ffscrapr.ffverse.com/reference/dot-espn_lineupslot_map.html","id":null,"dir":"Reference","previous_headings":"","what":"ESPN Lineup Slot map — .espn_lineupslot_map","title":"ESPN Lineup Slot map — .espn_lineupslot_map","text":"starting lineup specifically - primary positions accessible via .espn_pos_map","code":""},{"path":"https://ffscrapr.ffverse.com/reference/dot-espn_lineupslot_map.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"ESPN Lineup Slot map — .espn_lineupslot_map","text":"","code":".espn_lineupslot_map()"},{"path":[]},{"path":"https://ffscrapr.ffverse.com/reference/dot-espn_pos_map.html","id":null,"dir":"Reference","previous_headings":"","what":"ESPN Primary Position map — .espn_pos_map","title":"ESPN Primary Position map — .espn_pos_map","text":"Decoded hand - IDP ESPN league please open GitHub issue pass along league info can expand .","code":""},{"path":"https://ffscrapr.ffverse.com/reference/dot-espn_pos_map.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"ESPN Primary Position map — .espn_pos_map","text":"","code":".espn_pos_map()"},{"path":"https://ffscrapr.ffverse.com/reference/dot-espn_stat_map.html","id":null,"dir":"Reference","previous_headings":"","what":"ESPN Stat ID map — .espn_stat_map","title":"ESPN Stat ID map — .espn_stat_map","text":"ESPN Stat ID map","code":""},{"path":"https://ffscrapr.ffverse.com/reference/dot-espn_stat_map.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"ESPN Stat ID map — .espn_stat_map","text":"","code":".espn_stat_map()"},{"path":[]},{"path":"https://ffscrapr.ffverse.com/reference/dot-espn_team_map.html","id":null,"dir":"Reference","previous_headings":"","what":"ESPN Team ID map — .espn_team_map","title":"ESPN Team ID map — .espn_team_map","text":"Opinionatedly conforming DynastyProcess standards, match MyFantasyLeague. Abbreviations consistently three letters.","code":""},{"path":"https://ffscrapr.ffverse.com/reference/dot-espn_team_map.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"ESPN Team ID map — .espn_team_map","text":"","code":".espn_team_map()"},{"path":[]},{"path":"https://ffscrapr.ffverse.com/reference/dot-ff_clear_cache.html","id":null,"dir":"Reference","previous_headings":"","what":"Empty Function Cache — .ff_clear_cache","title":"Empty Function Cache — .ff_clear_cache","text":"function reset cache ffscrapr cached functions.","code":""},{"path":"https://ffscrapr.ffverse.com/reference/dot-ff_clear_cache.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Empty Function Cache — .ff_clear_cache","text":"","code":".ff_clear_cache()"},{"path":"https://ffscrapr.ffverse.com/reference/dot-fn_choose_season.html","id":null,"dir":"Reference","previous_headings":"","what":"Choose current season — .fn_choose_season","title":"Choose current season — .fn_choose_season","text":"helper function return current year March later, otherwise assume previous year","code":""},{"path":"https://ffscrapr.ffverse.com/reference/dot-fn_choose_season.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Choose current season — .fn_choose_season","text":"","code":".fn_choose_season(date = NULL)"},{"path":"https://ffscrapr.ffverse.com/reference/dot-fn_drop_nulls.html","id":null,"dir":"Reference","previous_headings":"","what":"Drop nulls from a list/vector — .fn_drop_nulls","title":"Drop nulls from a list/vector — .fn_drop_nulls","text":"Drop nulls list/vector","code":""},{"path":"https://ffscrapr.ffverse.com/reference/dot-fn_drop_nulls.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Drop nulls from a list/vector — .fn_drop_nulls","text":"","code":".fn_drop_nulls(x)"},{"path":"https://ffscrapr.ffverse.com/reference/dot-fn_set_ratelimit.html","id":null,"dir":"Reference","previous_headings":"","what":"Set rate limit — .fn_set_ratelimit","title":"Set rate limit — .fn_set_ratelimit","text":"helper function creates new copy httr::GET function stores .ffscrapr_env hidden object","code":""},{"path":"https://ffscrapr.ffverse.com/reference/dot-fn_set_ratelimit.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Set rate limit — .fn_set_ratelimit","text":"","code":".fn_set_ratelimit(toggle = TRUE, platform, rate_number, rate_seconds)"},{"path":"https://ffscrapr.ffverse.com/reference/dot-fn_set_ratelimit.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Set rate limit — .fn_set_ratelimit","text":"toggle logical turn rate_limiting TRUE FALSE rate_number number calls per rate_seconds rate_seconds number seconds","code":""},{"path":"https://ffscrapr.ffverse.com/reference/dot-fn_set_useragent.html","id":null,"dir":"Reference","previous_headings":"","what":"Set user agent — .fn_set_useragent","title":"Set user agent — .fn_set_useragent","text":"Self-identifying mostly polite, although MFL program give verified clients bandwidth! See: https://www03.myfantasyleague.com/2020/csetup?C=APICLI","code":""},{"path":"https://ffscrapr.ffverse.com/reference/dot-fn_set_useragent.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Set user agent — .fn_set_useragent","text":"","code":".fn_set_useragent(user_agent)"},{"path":"https://ffscrapr.ffverse.com/reference/dot-mfl_logincookie.html","id":null,"dir":"Reference","previous_headings":"","what":"Get MFL Login Cookie — .mfl_logincookie","title":"Get MFL Login Cookie — .mfl_logincookie","text":"Gets login cookie MFL based user_name/password Docs: https://api.myfantasyleague.com/2020/api_info#login_info","code":""},{"path":"https://ffscrapr.ffverse.com/reference/dot-mfl_logincookie.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get MFL Login Cookie — .mfl_logincookie","text":"","code":".mfl_logincookie(user_name, password, season)"},{"path":"https://ffscrapr.ffverse.com/reference/dot-mfl_logincookie.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get MFL Login Cookie — .mfl_logincookie","text":"user_name MFL user_name (string) password MFL password (string) season Season","code":""},{"path":"https://ffscrapr.ffverse.com/reference/dot-mfl_logincookie.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get MFL Login Cookie — .mfl_logincookie","text":"login cookie, included parameter httr GET request","code":""},{"path":"https://ffscrapr.ffverse.com/reference/dot-retry_get.html","id":null,"dir":"Reference","previous_headings":"","what":"Create RETRY version of GET — .retry_get","title":"Create RETRY version of GET — .retry_get","text":"wrapper httr retries httr::GET function based best-practice heuristics","code":""},{"path":"https://ffscrapr.ffverse.com/reference/dot-retry_get.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create RETRY version of GET — .retry_get","text":"","code":".retry_get(...)"},{"path":"https://ffscrapr.ffverse.com/reference/dot-retry_get.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create RETRY version of GET — .retry_get","text":"... arguments passed httr::GET","code":""},{"path":"https://ffscrapr.ffverse.com/reference/dot-retry_post.html","id":null,"dir":"Reference","previous_headings":"","what":"Create RETRY version of POST — .retry_post","title":"Create RETRY version of POST — .retry_post","text":"wrapper httr retries httr::POST function based best-practice heuristics.","code":""},{"path":"https://ffscrapr.ffverse.com/reference/dot-retry_post.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create RETRY version of POST — .retry_post","text":"","code":".retry_post(...)"},{"path":"https://ffscrapr.ffverse.com/reference/dot-retry_post.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create RETRY version of POST — .retry_post","text":"... arguments passed httr::POST","code":""},{"path":"https://ffscrapr.ffverse.com/reference/dot-sleeper_matchup.html","id":null,"dir":"Reference","previous_headings":"","what":"Individual sleeper matchup — .sleeper_matchup","title":"Individual sleeper matchup — .sleeper_matchup","text":"Individual sleeper matchup","code":""},{"path":"https://ffscrapr.ffverse.com/reference/dot-sleeper_matchup.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Individual sleeper matchup — .sleeper_matchup","text":"","code":".sleeper_matchup(week, conn, last_scored_week)"},{"path":"https://ffscrapr.ffverse.com/reference/dot-sleeper_userid.html","id":null,"dir":"Reference","previous_headings":"","what":"Get Sleeper User ID — .sleeper_userid","title":"Get Sleeper User ID — .sleeper_userid","text":"Docs: https://docs.sleeper.app","code":""},{"path":"https://ffscrapr.ffverse.com/reference/dot-sleeper_userid.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get Sleeper User ID — .sleeper_userid","text":"","code":".sleeper_userid(user_name)"},{"path":"https://ffscrapr.ffverse.com/reference/dot-sleeper_userid.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get Sleeper User ID — .sleeper_userid","text":"user_name Sleeper username","code":""},{"path":"https://ffscrapr.ffverse.com/reference/dot-sleeper_userid.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get Sleeper User ID — .sleeper_userid","text":"sleeper userID","code":""},{"path":"https://ffscrapr.ffverse.com/reference/dp_clean_html.html","id":null,"dir":"Reference","previous_headings":"","what":"Remove HTML from string — dp_clean_html","title":"Remove HTML from string — dp_clean_html","text":"Applies regex clean html tags strings. useful platforms MFL interpret HTML franchise name fields.","code":""},{"path":"https://ffscrapr.ffverse.com/reference/dp_clean_html.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Remove HTML from string — dp_clean_html","text":"","code":"dp_clean_html(names)"},{"path":"https://ffscrapr.ffverse.com/reference/dp_clean_html.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Remove HTML from string — dp_clean_html","text":"names character (character vector)","code":""},{"path":"https://ffscrapr.ffverse.com/reference/dp_clean_html.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Remove HTML from string — dp_clean_html","text":"character vector cleaned strings","code":""},{"path":"https://ffscrapr.ffverse.com/reference/dp_clean_html.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Remove HTML from string — dp_clean_html","text":"","code":"c(   \"<b><font color= Cyan>Kevin OBrien (@kevinobrienff) <\/FONT><\/B>\",   \"<em><font color= Purple> Other fun names<\/font><\/em>\" ) %>% dp_clean_html() #> [1] \"Kevin OBrien (@kevinobrienff)\" \"Other fun names\""},{"path":"https://ffscrapr.ffverse.com/reference/dp_cleannames.html","id":null,"dir":"Reference","previous_headings":"","what":"Clean Names — dp_cleannames","title":"Clean Names — dp_cleannames","text":"Applies name-cleaning heuristics facilitate joins. heuristics may include: removing periods apostrophes removing common suffixes, Jr, Sr, II, III, IV converting lowercase using dp_name_mapping common name substitutions, Mitch Trubisky Mitchell Trubisky","code":""},{"path":"https://ffscrapr.ffverse.com/reference/dp_cleannames.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Clean Names — dp_cleannames","text":"","code":"dp_cleannames(   player_name,   lowercase = FALSE,   convert_lastfirst = TRUE,   use_name_database = TRUE )  dp_clean_names(   player_name,   lowercase = FALSE,   convert_lastfirst = TRUE,   use_name_database = TRUE )"},{"path":"https://ffscrapr.ffverse.com/reference/dp_cleannames.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Clean Names — dp_cleannames","text":"player_name character (character vector) lowercase defaults FALSE - TRUE, converts lowercase convert_lastfirst converts names \"Last, First\" \"First Last\" (.e. MFL style) use_name_database uses internal name database common substitutions (Mitchell Trubisky Mitch Trubisky etc)","code":""},{"path":"https://ffscrapr.ffverse.com/reference/dp_cleannames.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Clean Names — dp_cleannames","text":"character vector cleaned names","code":""},{"path":[]},{"path":"https://ffscrapr.ffverse.com/reference/dp_cleannames.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Clean Names — dp_cleannames","text":"","code":"# \\donttest{  dp_cleannames(c(\"A.J. Green\", \"Odell Beckham Jr.\", \"Le'Veon Bell Sr.\")) #> [1] \"AJ Green\"      \"Odell Beckham\" \"LeVeon Bell\"    dp_cleannames(c(\"Trubisky, Mitch\", \"Atwell, Chatarius\", \"Elliott, Zeke\", \"Elijah Moore\"),   convert_lastfirst = TRUE,   use_name_database = TRUE ) #> [1] \"Mitchell Trubisky\" \"Tutu Atwell\"       \"Ezekiel Elliott\"   #> [4] \"Elijah Moore\"      # }"},{"path":"https://ffscrapr.ffverse.com/reference/dp_name_mapping.html","id":null,"dir":"Reference","previous_headings":"","what":"Alternate name mappings — dp_name_mapping","title":"Alternate name mappings — dp_name_mapping","text":"named character vector mapping common alternate names","code":""},{"path":"https://ffscrapr.ffverse.com/reference/dp_name_mapping.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Alternate name mappings — dp_name_mapping","text":"","code":"dp_name_mapping"},{"path":"https://ffscrapr.ffverse.com/reference/dp_name_mapping.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Alternate name mappings — dp_name_mapping","text":"named character vector name attribute \"alternate\" name. value attribute \"correct\" name.","code":""},{"path":"https://ffscrapr.ffverse.com/reference/dp_name_mapping.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Alternate name mappings — dp_name_mapping","text":"","code":"# \\donttest{ dp_name_mapping[c(\"Chatarius Atwell\", \"Robert Kelley\")] #> Chatarius Atwell    Robert Kelley  #>    \"Tutu Atwell\"     \"Rob Kelley\"  # }"},{"path":"https://ffscrapr.ffverse.com/reference/dp_playerids.html","id":null,"dir":"Reference","previous_headings":"","what":"Import latest DynastyProcess player IDs — dp_playerids","title":"Import latest DynastyProcess player IDs — dp_playerids","text":"Fetches copy latest DynastyProcess player IDs csv","code":""},{"path":"https://ffscrapr.ffverse.com/reference/dp_playerids.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Import latest DynastyProcess player IDs — dp_playerids","text":"","code":"dp_playerids()"},{"path":"https://ffscrapr.ffverse.com/reference/dp_playerids.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Import latest DynastyProcess player IDs — dp_playerids","text":"tibble player IDs","code":""},{"path":[]},{"path":"https://ffscrapr.ffverse.com/reference/dp_playerids.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Import latest DynastyProcess player IDs — dp_playerids","text":"","code":"# \\donttest{ try( # try only shown here because sometimes CRAN checks are weird   dp_playerids() ) #> # A tibble: 11,013 × 35 #>    mfl_id sportr…¹ fanta…² gsis_id pff_id sleep…³ nfl_id espn_id yahoo…⁴ fleaf…⁵ #>    <chr>  <chr>    <chr>   <chr>   <chr>  <chr>   <chr>  <chr>   <chr>   <chr>   #>  1 15691  d7f4a7f… 23028   NA      NA     8164    NA     NA      NA      NA      #>  2 15692  ef7ae1f… 22722   NA      NA     8160    NA     NA      NA      NA      #>  3 15693  7d85e9c… 23045   NA      NA     8162    NA     NA      NA      NA      #>  4 15694  55aefcf… 23499   NA      NA     8161    NA     NA      NA      NA      #>  5 15695  b605922… 23042   NA      NA     8158    NA     NA      NA      NA      #>  6 15696  1492686… 24027   NA      NA     8157    NA     NA      NA      NA      #>  7 15697  6bf3576… 20080   NA      NA     8159    NA     NA      NA      NA      #>  8 15698  d5aef70… 19797   NA      NA     8183    NA     NA      NA      NA      #>  9 15699  5ba2c36… 24170   NA      NA     8206    NA     NA      NA      NA      #> 10 15700  NA       NA      NA      NA     NA      NA     NA      NA      NA      #> # … with 11,003 more rows, 25 more variables: cbs_id <chr>, rotowire_id <chr>, #> #   rotoworld_id <chr>, ktc_id <chr>, pfr_id <chr>, cfbref_id <chr>, #> #   stats_id <chr>, stats_global_id <chr>, fantasy_data_id <chr>, #> #   swish_id <chr>, name <chr>, merge_name <chr>, position <chr>, team <chr>, #> #   birthdate <chr>, age <dbl>, draft_year <int>, draft_round <int>, #> #   draft_pick <int>, draft_ovr <int>, twitter_username <chr>, height <int>, #> #   weight <int>, college <chr>, db_season <int>, and abbreviated variable … # }"},{"path":"https://ffscrapr.ffverse.com/reference/dp_values.html","id":null,"dir":"Reference","previous_headings":"","what":"Import latest DynastyProcess values — dp_values","title":"Import latest DynastyProcess values — dp_values","text":"Fetches copy latest DynastyProcess dynasty trade values sheets","code":""},{"path":"https://ffscrapr.ffverse.com/reference/dp_values.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Import latest DynastyProcess values — dp_values","text":"","code":"dp_values(file = c(\"values.csv\", \"values-players.csv\", \"values-picks.csv\"))"},{"path":"https://ffscrapr.ffverse.com/reference/dp_values.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Import latest DynastyProcess values — dp_values","text":"file one c(\"values.csv\",\"values-players.csv\",\"values-picks.csv\")","code":""},{"path":"https://ffscrapr.ffverse.com/reference/dp_values.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Import latest DynastyProcess values — dp_values","text":"tibble trade values DynastyProcess","code":""},{"path":[]},{"path":"https://ffscrapr.ffverse.com/reference/dp_values.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Import latest DynastyProcess values — dp_values","text":"","code":"# \\donttest{ try( # try only shown here because sometimes CRAN checks are weird   dp_values() ) #> # A tibble: 636 × 12 #>    player      pos   team    age draft…¹ ecr_1qb ecr_2qb ecr_pos value…² value…³ #>    <chr>       <chr> <chr> <dbl>   <int>   <dbl>   <dbl>   <dbl>   <int>   <int> #>  1 Justin Jef… WR    MIN    23.5    2020     1.9     5.5     1     10041    9227 #>  2 Ja'Marr Ch… WR    CIN    22.8    2021     3.2     7.3     2      9739    8845 #>  3 Jonathan T… RB    IND    23.9    2020     3.4     8.4     1.6    9694    8619 #>  4 Kenneth Wa… RB    SEA    22.1    2022     5.9    11.8     3.5    9141    7957 #>  5 Saquon Bar… RB    NYG    25.8    2018     6      12.4     2.6    9119    7846 #>  6 A.J. Brown  WR    PHI    25.4    2019     9.3    15.1     3.6    8439    7363 #>  7 CeeDee Lamb WR    DAL    23.7    2020     9.6    15.9     4.5    8379    7226 #>  8 Breece Hall RB    NYJ    21.5    2022     9.9    16.7     4.9    8321    7092 #>  9 Christian … RB    SF     26.5    2017    10      16.3     4.3    8301    7159 #> 10 Jaylen Wad… WR    MIA    24      2021    12.3    20.1     5.8    7864    6547 #> # … with 626 more rows, 2 more variables: scrape_date <chr>, fp_id <chr>, and #> #   abbreviated variable names ¹​draft_year, ²​value_1qb, ³​value_2qb # }"},{"path":"https://ffscrapr.ffverse.com/reference/espn_connect.html","id":null,"dir":"Reference","previous_headings":"","what":"Connect to ESPN League — espn_connect","title":"Connect to ESPN League — espn_connect","text":"function creates connection object stores parameters user ID available.","code":""},{"path":"https://ffscrapr.ffverse.com/reference/espn_connect.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Connect to ESPN League — espn_connect","text":"","code":"espn_connect(   season = NULL,   league_id = NULL,   swid = NULL,   espn_s2 = NULL,   user_agent = NULL,   rate_limit = TRUE,   rate_limit_number = NULL,   rate_limit_seconds = NULL,   ... )"},{"path":"https://ffscrapr.ffverse.com/reference/espn_connect.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Connect to ESPN League — espn_connect","text":"season Season access Fleaflicker - missing, guess based system date (current year March later, otherwise previous year) league_id League ID swid SWID parameter accessing private leagues - see vignette details espn_s2 ESPN_S2 parameter accessing private leagues - see vignette details user_agent User agent self-identify (optional) rate_limit TRUE default - turn rate limiting FALSE rate_limit_number number calls per rate_limit_seconds, suggested 1000 calls per 60 seconds rate_limit_seconds number seconds denominator rate_limit ... arguments (methods, R compat)","code":""},{"path":"https://ffscrapr.ffverse.com/reference/espn_connect.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Connect to ESPN League — espn_connect","text":"list stores ESPN connection objects","code":""},{"path":"https://ffscrapr.ffverse.com/reference/espn_connect.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Connect to ESPN League — espn_connect","text":"","code":"# \\donttest{ conn <- espn_connect(   season = 2018,   league_id = 1178049,   espn_s2 = Sys.getenv(\"TAN_ESPN_S2\"),   swid = Sys.getenv(\"TAN_SWID\") ) # }"},{"path":"https://ffscrapr.ffverse.com/reference/espn_getendpoint.html","id":null,"dir":"Reference","previous_headings":"","what":"GET ESPN fantasy league endpoint — espn_getendpoint","title":"GET ESPN fantasy league endpoint — espn_getendpoint","text":"function used call ESPN Fantasy API league-based endpoints.","code":""},{"path":"https://ffscrapr.ffverse.com/reference/espn_getendpoint.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"GET ESPN fantasy league endpoint — espn_getendpoint","text":"","code":"espn_getendpoint(conn, ..., x_fantasy_filter = NULL)"},{"path":"https://ffscrapr.ffverse.com/reference/espn_getendpoint.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"GET ESPN fantasy league endpoint — espn_getendpoint","text":"conn connection object created espn_connect ff_connect() ... Arguments passed \"argumentname = argument\" HTTP query parameter x_fantasy_filter JSON-encoded character string specifies filter data","code":""},{"path":"https://ffscrapr.ffverse.com/reference/espn_getendpoint.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"GET ESPN fantasy league endpoint — espn_getendpoint","text":"list object containing query, response, parsed content.","code":""},{"path":"https://ffscrapr.ffverse.com/reference/espn_getendpoint.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"GET ESPN fantasy league endpoint — espn_getendpoint","text":"ESPN Fantasy API undocumented used advanced users familiar API. chooses correct league endpoint based year (eg leagueHistory <2018), checks x_fantasy_filter valid JSON input, builds url optional query parameters, executes request authentication rate limiting. HTTP query parameters (.e. arguments ...) Case Sensitive. Please see vignette usage.","code":""},{"path":[]},{"path":"https://ffscrapr.ffverse.com/reference/espn_getendpoint_raw.html","id":null,"dir":"Reference","previous_headings":"","what":"GET ESPN endpoint (raw) — espn_getendpoint_raw","title":"GET ESPN endpoint (raw) — espn_getendpoint_raw","text":"function lower-level function powers API call: takes URL headers executes http request rate-limiting authentication. checks JSON return warnings/errors, parses json, returns espn_api object parsed content, raw response, actual query.","code":""},{"path":"https://ffscrapr.ffverse.com/reference/espn_getendpoint_raw.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"GET ESPN endpoint (raw) — espn_getendpoint_raw","text":"","code":"espn_getendpoint_raw(conn, url_query, ...)"},{"path":"https://ffscrapr.ffverse.com/reference/espn_getendpoint_raw.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"GET ESPN endpoint (raw) — espn_getendpoint_raw","text":"conn connection object created ff_connect equivalent - used authentication url_query fully-formed URL call ... headers httr request objects pass along","code":""},{"path":"https://ffscrapr.ffverse.com/reference/espn_getendpoint_raw.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"GET ESPN endpoint (raw) — espn_getendpoint_raw","text":"object class espn_api parsed content, request, response","code":""},{"path":[]},{"path":"https://ffscrapr.ffverse.com/reference/espn_players.html","id":null,"dir":"Reference","previous_headings":"","what":"ESPN players library — espn_players","title":"ESPN players library — espn_players","text":"cached table ESPN NFL players. store memory session! (via memoise zzz.R)","code":""},{"path":"https://ffscrapr.ffverse.com/reference/espn_players.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"ESPN players library — espn_players","text":"","code":"espn_players(conn = NULL, season = NULL)"},{"path":"https://ffscrapr.ffverse.com/reference/espn_players.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"ESPN players library — espn_players","text":"conn connection object created espn_connect ff_connect() season season fetch","code":""},{"path":"https://ffscrapr.ffverse.com/reference/espn_players.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"ESPN players library — espn_players","text":"dataframe containing ~2000+ active players ESPN database","code":""},{"path":"https://ffscrapr.ffverse.com/reference/espn_players.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"ESPN players library — espn_players","text":"","code":"# \\donttest{ try({ # try only shown here because sometimes CRAN checks are weird    conn <- espn_connect(season = 2020, league_id = 1178049)    espn_players(conn, season = 2020) }) # end try #> # A tibble: 2,656 × 5 #>    player_id player_name          pos   eligible_pos team  #>        <int> <chr>                <chr> <list>       <chr> #>  1   4029893 Antonio Gandy-Golden WR    <chr [8]>    WAS   #>  2   3915196 D'Andre Walker       DE    <chr [6]>    FA    #>  3   2588098 Tye Smith            CB    <chr [5]>    TEN   #>  4   3915190 Jayson Stanley       CB    <chr [5]>    SEA   #>  5   3915189 Roquan Smith         LB    <chr [4]>    CHI   #>  6     15773 Darren Fells         TE    <chr [6]>    HOU   #>  7   3128774 Kalen Ballage        RB    <chr [6]>    LAC   #>  8     15782 Chris Banjo          S     <chr [5]>    ARI   #>  9   3915186 Chauncey Rivers      DE    <chr [6]>    BAL   #> 10     15785 Ezekiel Ansah        DE    <chr [6]>    SFO   #> # … with 2,646 more rows # }"},{"path":"https://ffscrapr.ffverse.com/reference/espn_potentialpoints.html","id":null,"dir":"Reference","previous_headings":"","what":"ESPN Potential Points — espn_potentialpoints","title":"ESPN Potential Points — espn_potentialpoints","text":"function calculates optimal starters given week, using lineup heuristics.","code":""},{"path":"https://ffscrapr.ffverse.com/reference/espn_potentialpoints.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"ESPN Potential Points — espn_potentialpoints","text":"","code":"espn_potentialpoints(conn, weeks = 1:17)"},{"path":"https://ffscrapr.ffverse.com/reference/espn_potentialpoints.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"ESPN Potential Points — espn_potentialpoints","text":"conn list object created ff_connect() weeks numeric vector determining weeks calculate","code":""},{"path":"https://ffscrapr.ffverse.com/reference/espn_potentialpoints.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"ESPN Potential Points — espn_potentialpoints","text":"tibble best lineup team whether started ","code":""},{"path":"https://ffscrapr.ffverse.com/reference/espn_potentialpoints.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"ESPN Potential Points — espn_potentialpoints","text":"","code":"# \\donttest{ try({ # try only shown here because sometimes CRAN checks are weird   conn <- espn_connect(season = 2021, league_id = 950665)   espn_potentialpoints(conn, weeks = 1) }) # end try #> # A tibble: 298 × 11 #>     week franchi…¹ franc…² franc…³ optim…⁴ actua…⁵ playe…⁶ playe…⁷ playe…⁸ team  #>    <int>     <int> <chr>     <dbl> <chr>   <chr>     <dbl> <chr>   <chr>   <chr> #>  1     1         1 Herber…    100. QB      BE         18.3 Carson… QB      IND   #>  2     1         1 Herber…    100. RB      BE          6.3 Tony P… RB      DAL   #>  3     1         1 Herber…    100. RB      RB          4.9 Ezekie… RB      DAL   #>  4     1         1 Herber…    100. WR      BE         16.2 Marvin… WR      JAC   #>  5     1         1 Herber…    100. WR      WR         12.9 A.J. B… WR      TEN   #>  6     1         1 Herber…    100. TE      TE          9.8 George… TE      SFO   #>  7     1         1 Herber…    100. RB/WR/… WR         12.4 DJ Moo… WR      CAR   #>  8     1         1 Herber…    100. RB/WR/… RB/WR/…     8.4 Kenny … WR      NYG   #>  9     1         1 Herber…    100. OP      BE         18.3 Zach W… QB      NYJ   #> 10     1         1 Herber…    100. DST     DST        16   Steele… DST     PIT   #> # … with 288 more rows, 1 more variable: player_id <int>, and abbreviated #> #   variable names ¹​franchise_id, ²​franchise_name, ³​franchise_score, #> #   ⁴​optimal_slot, ⁵​actual_slot, ⁶​player_score, ⁷​player_name, ⁸​player_pos # }"},{"path":"https://ffscrapr.ffverse.com/reference/ff_connect.html","id":null,"dir":"Reference","previous_headings":"","what":"Connect to a League — ff_connect","title":"Connect to a League — ff_connect","text":"function creates connection object stores parameters gets login-cookie available - passing arguments appropriate league-based handler.","code":""},{"path":"https://ffscrapr.ffverse.com/reference/ff_connect.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Connect to a League — ff_connect","text":"","code":"ff_connect(platform = \"mfl\", league_id = NULL, ...)"},{"path":"https://ffscrapr.ffverse.com/reference/ff_connect.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Connect to a League — ff_connect","text":"platform one MFL Sleeper (Fleaflicker, ESPN, Yahoo approximate priority order going forward) league_id league_id (currently assuming one league time) ... parameters passed connect function specific platform.","code":""},{"path":"https://ffscrapr.ffverse.com/reference/ff_connect.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Connect to a League — ff_connect","text":"connection object used ff_* functions","code":""},{"path":[]},{"path":"https://ffscrapr.ffverse.com/reference/ff_connect.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Connect to a League — ff_connect","text":"","code":"# \\donttest{ ff_connect(platform = \"mfl\", season = 2019, league_id = 54040, rate_limit = FALSE) #> <MFL connection 2019_54040> #> List of 5 #>  $ platform   : chr \"MFL\" #>  $ season     : num 2019 #>  $ league_id  : chr \"54040\" #>  $ APIKEY     : NULL #>  $ auth_cookie: NULL #>  - attr(*, \"class\")= chr \"mfl_conn\" # }"},{"path":"https://ffscrapr.ffverse.com/reference/ff_draft.html","id":null,"dir":"Reference","previous_headings":"","what":"Get Draft Results — ff_draft","title":"Get Draft Results — ff_draft","text":"function gets tidy dataframe draft results current year. Can handle MFL devy drafts startup drafts specifying custom_players argument","code":""},{"path":"https://ffscrapr.ffverse.com/reference/ff_draft.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get Draft Results — ff_draft","text":"","code":"ff_draft(conn, ...)  # S3 method for espn_conn ff_draft(conn, ...)  # S3 method for flea_conn ff_draft(conn, ...)  # S3 method for mfl_conn ff_draft(conn, custom_players = deprecated(), ...)  # S3 method for sleeper_conn ff_draft(conn, ...)"},{"path":"https://ffscrapr.ffverse.com/reference/ff_draft.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get Draft Results — ff_draft","text":"conn conn object created ff_connect() ... args methods custom_players - now returns custom players default","code":""},{"path":"https://ffscrapr.ffverse.com/reference/ff_draft.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get Draft Results — ff_draft","text":"tidy dataframe draft results","code":""},{"path":"https://ffscrapr.ffverse.com/reference/ff_draft.html","id":"methods-by-class-","dir":"Reference","previous_headings":"","what":"Methods (by class)","title":"Get Draft Results — ff_draft","text":"espn_conn: ESPN: returns current year's draft/auction, including details keepers flea_conn: Fleaflicker: returns table drafts current year mfl_conn: MFL: returns table drafts current year - can handle devy/startup-rookie-picks specifying custom_players (slower!) sleeper_conn: Sleeper: returns dataframe drafts draft selections, available.","code":""},{"path":"https://ffscrapr.ffverse.com/reference/ff_draft.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get Draft Results — ff_draft","text":"","code":"# \\donttest{ try({ # try only shown here because sometimes CRAN checks are weird   conn <- espn_connect(season = 2020, league_id = 899513)   ff_draft(conn) }) # end try #> # A tibble: 220 × 21 #>    round  pick overall franchise_id franch…¹ user_…² playe…³ playe…⁴ pos   team  #>    <int> <int>   <int>        <int> <chr>    <chr>     <int> <chr>   <chr> <chr> #>  1     1     1       1            9 \"RAFI C… Brando… 3120348 JuJu S… WR    PIT   #>  2     1     2       2            5 \"The Ju… longho… 4047646 A.J. B… WR    TEN   #>  3     1     3       3            1 \"The Ea… dachos… 2977644 Todd G… RB    ATL   #>  4     1     4       4            4 \"I'm Al… Ciaval… 3121422 Terry … WR    WAS   #>  5     1     5       5            8 \"Big Co… Zarkoa   -16033 Ravens… DST   BAL   #>  6     1     6       6            3 \"PAKI S… erodri… 3122840 Deshau… QB    HOU   #>  7     1     7       7            2 \"Coom  … mfespi…   16800 Davant… WR    GBP   #>  8     1     8       8            6 \"OBJ's … drake …   15683 Justin… K     BAL   #>  9     1     9       9           10 \"Austin… espn14…   14880 Kirk C… QB    MIN   #> 10     1    10      10            7 \"Tony E… anthon… 2573079 Carson… QB    IND   #> # … with 210 more rows, 11 more variables: bid_amount <int>, #> #   nominating_team_id <int>, is_keeper <lgl>, can_keeper <lgl>, #> #   autodraft_type <int>, complete_date <dttm>, in_progress <lgl>, #> #   pick_id <int>, drafted <lgl>, lineupSlotId <int>, tradeLocked <lgl>, and #> #   abbreviated variable names ¹​franchise_name, ²​user_nickname, ³​player_id, #> #   ⁴​player_name # }  # \\donttest{ try({ # try only shown here because sometimes CRAN checks are weird   conn <- fleaflicker_connect(season = 2020, league_id = 206154)   ff_draft(conn) }) # end try #> # A tibble: 80 × 9 #>    round  pick overall franchise_id franchise_name   playe…¹ playe…² pos   team  #>    <int> <int>   <int>        <int> <chr>              <int> <chr>   <chr> <chr> #>  1     1     1       1      1373970 Bamenda Herd       15539 Clyde … RB    KC    #>  2     1     2       2      1374252 Central City Cr…   15604 Jonath… RB    IND   #>  3     1     3       3      1373991 Top City Terrors   15523 CeeDee… WR    DAL   #>  4     1     4       4      1374315 Shanghai Commun…   15555 J.K. D… RB    BAL   #>  5     1     5       5      1374271 Clutch City Bal…   15601 D'Andr… RB    DET   #>  6     1     6       6      1374271 Clutch City Bal…   15563 Cam Ak… RB    LAR   #>  7     1     7       7      1373883 Manitoba Marmots   15540 Justin… WR    MIN   #>  8     1     8       8      1373973 Red River Land …   15544 Jerry … WR    DEN   #>  9     1     9       9      1374271 Clutch City Bal…   15537 Chase … EDR   WAS   #> 10     1    10      10      1373535 Winterthur Angr…   15620 Ke'Sha… RB    TB    #> # … with 70 more rows, and abbreviated variable names ¹​player_id, ²​player_name # }  # \\donttest{ try({ # try only shown here because sometimes CRAN checks are weird   ssb_conn <- ff_connect(platform = \"mfl\", league_id = 54040, season = 2020)   ff_draft(ssb_conn) }) # end try #> # A tibble: 90 × 11 #>    timestamp           round pick  overall franc…¹ franc…² playe…³ playe…⁴ pos   #>    <dttm>              <chr> <chr>   <int> <chr>   <chr>   <chr>   <chr>   <chr> #>  1 2021-02-08 18:52:22 01    01          1 0014    Team L… 11244   Kelce,… TE    #>  2 2021-02-08 19:20:07 01    02          2 0003    Team D… 14073   Jacobs… RB    #>  3 2021-02-08 20:01:16 01    03          3 0008    Team B… 11678   Robins… WR    #>  4 2021-02-08 20:01:30 02    01          4 0008    Team B… 13131   Mixon,… RB    #>  5 2021-02-08 20:12:30 02    02          5 0003    Team D… 11671   Evans,… WR    #>  6 2021-02-09 02:55:39 02    03          6 0012    Team M… 13593   Jackso… QB    #>  7 2021-02-09 03:09:50 03    01          7 0014    Team L… 0829    2021 P… XX    #>  8 2021-02-09 03:12:44 03    02          8 0003    Team D… 11222   Allen,… WR    #>  9 2021-02-09 03:22:50 03    03          9 0008    Team B… 14208   Johnso… WR    #> 10 2021-02-09 03:23:01 04    01         10 0008    Team B… 13156   Smith-… WR    #> # … with 80 more rows, 2 more variables: age <dbl>, team <chr>, and abbreviated #> #   variable names ¹​franchise_id, ²​franchise_name, ³​player_id, ⁴​player_name # }  # \\donttest{ try({ # try only shown here because sometimes CRAN checks are weird   jml_conn <- ff_connect(platform = \"sleeper\", league_id = \"522458773317046272\", season = 2020)   ff_draft(jml_conn) }) # end try #> # A tibble: 48 × 13 #>    draft…¹ status type  season round  pick franc…² franc…³ playe…⁴ playe…⁵ pos   #>    <chr>   <chr>  <chr> <chr>  <int> <int>   <int> <chr>   <chr>   <chr>   <chr> #>  1 522458… compl… line… 2020       1     1       4 The FA… 6820    Clyde … RB    #>  2 522458… compl… line… 2020       1     2       5 Barbar… 6813    Jonath… RB    #>  3 522458… compl… line… 2020       1     3      11 Permia… 6806    J.K. D… RB    #>  4 522458… compl… line… 2020       1     4       2 KingGa… 6783    Jerry … WR    #>  5 522458… compl… line… 2020       1     5       8 Hocka … 6938    Cam Ak… RB    #>  6 522458… compl… line… 2020       1     6       2 KingGa… 6790    D'Andr… RB    #>  7 522458… compl… line… 2020       1     7       2 KingGa… 6786    CeeDee… WR    #>  8 522458… compl… line… 2020       1     8       2 KingGa… 6794    Justin… WR    #>  9 522458… compl… line… 2020       1     9       6 sox05s… 6798    Jalen … WR    #> 10 522458… compl… line… 2020       1    10       9 ZPMill… 6789    Henry … WR    #> # … with 38 more rows, 2 more variables: age <dbl>, team <chr>, and abbreviated #> #   variable names ¹​draft_id, ²​franchise_id, ³​franchise_name, ⁴​player_id, #> #   ⁵​player_name # }"},{"path":"https://ffscrapr.ffverse.com/reference/ff_draftpicks.html","id":null,"dir":"Reference","previous_headings":"","what":"Get Draft Picks — ff_draftpicks","title":"Get Draft Picks — ff_draftpicks","text":"Returns draft picks (current future) belong specific franchise yet converted players (.e. selected.)","code":""},{"path":"https://ffscrapr.ffverse.com/reference/ff_draftpicks.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get Draft Picks — ff_draftpicks","text":"","code":"ff_draftpicks(conn, ...)  # S3 method for espn_conn ff_draftpicks(conn, ...)  # S3 method for flea_conn ff_draftpicks(conn, franchise_id = NULL, ...)  # S3 method for mfl_conn ff_draftpicks(conn, ...)  # S3 method for sleeper_conn ff_draftpicks(conn, ...)"},{"path":"https://ffscrapr.ffverse.com/reference/ff_draftpicks.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get Draft Picks — ff_draftpicks","text":"conn list object created ff_connect() ... arguments (currently unused) franchise_id list franchise IDs pull, NULL return franchise IDs","code":""},{"path":"https://ffscrapr.ffverse.com/reference/ff_draftpicks.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get Draft Picks — ff_draftpicks","text":"Returns dataframe current future draft picks franchise","code":""},{"path":"https://ffscrapr.ffverse.com/reference/ff_draftpicks.html","id":"methods-by-class-","dir":"Reference","previous_headings":"","what":"Methods (by class)","title":"Get Draft Picks — ff_draftpicks","text":"espn_conn: ESPN: support future/draft pick trades - draft results, please use ff_draft. flea_conn: Fleaflicker: retrieves current future draft picks, potentially specified team. mfl_conn: MFL: returns current future picks sleeper_conn: Sleeper: retrieves current future draft picks","code":""},{"path":"https://ffscrapr.ffverse.com/reference/ff_draftpicks.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get Draft Picks — ff_draftpicks","text":"","code":"# \\donttest{ try({ # try only shown here because sometimes CRAN checks are weird   conn <- espn_connect(     season = 2018,     league_id = 1178049,     espn_s2 = Sys.getenv(\"TAN_ESPN_S2\"),     swid = Sys.getenv(\"TAN_SWID\")   )    ff_draftpicks(conn) }) # end try #> Warning: ESPN does not support draft pick trades. For draft results, please use ff_draft() #> NULL # }  # \\donttest{ try({ # try only shown here because sometimes CRAN checks are weird   conn <- fleaflicker_connect(2020, 206154)   ff_draftpicks(conn, franchise_id = 1373475) }) # end try # }  # \\donttest{ try({ # try only shown here because sometimes CRAN checks are weird   dlf_conn <- mfl_connect(2020, league_id = 37920)   ff_draftpicks(conn = dlf_conn) }) # end try #> # A tibble: 80 × 5 #>    season franchise_id franchise_name round original_franchise_id #>     <dbl> <chr>        <chr>          <dbl> <chr>                 #>  1   2021 0001         @dibari22          1 0001                  #>  2   2021 0001         @dibari22          2 0001                  #>  3   2021 0001         @dibari22          3 0001                  #>  4   2021 0001         @dibari22          5 0001                  #>  5   2021 0001         @dibari22          2 0009                  #>  6   2021 0002         OPEN               1 0002                  #>  7   2021 0002         OPEN               2 0002                  #>  8   2021 0002         OPEN               3 0002                  #>  9   2021 0002         OPEN               4 0002                  #> 10   2021 0002         OPEN               5 0002                  #> # … with 70 more rows # }  # \\donttest{ try({ # try only shown here because sometimes CRAN checks are weird   jml_conn <- ff_connect(platform = \"sleeper\", league_id = \"522458773317046272\", season = 2020)   ff_draftpicks(jml_conn) }) # end try #> # A tibble: 144 × 5 #>    season franchise_id franchise_name round original_franchise_id #>    <chr>         <int> <chr>          <int>                 <int> #>  1 2021              1 Fake News          3                     1 #>  2 2021              1 Fake News          4                     1 #>  3 2022              1 Fake News          2                     1 #>  4 2022              1 Fake News          3                     1 #>  5 2022              1 Fake News          4                     1 #>  6 2023              1 Fake News          1                     1 #>  7 2023              1 Fake News          2                     1 #>  8 2023              1 Fake News          3                     1 #>  9 2023              1 Fake News          4                     1 #> 10 2021              2 KingGabe           1                     2 #> # … with 134 more rows # }"},{"path":"https://ffscrapr.ffverse.com/reference/ff_franchises.html","id":null,"dir":"Reference","previous_headings":"","what":"Get League Franchises — ff_franchises","title":"Get League Franchises — ff_franchises","text":"Return franchise-level data (including divisions, usernames, etc) - available data may vary slightly based platform.","code":""},{"path":"https://ffscrapr.ffverse.com/reference/ff_franchises.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get League Franchises — ff_franchises","text":"","code":"ff_franchises(conn)  # S3 method for espn_conn ff_franchises(conn)  # S3 method for flea_conn ff_franchises(conn)  # S3 method for mfl_conn ff_franchises(conn)  # S3 method for sleeper_conn ff_franchises(conn)"},{"path":"https://ffscrapr.ffverse.com/reference/ff_franchises.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get League Franchises — ff_franchises","text":"conn conn object created ff_connect()","code":""},{"path":"https://ffscrapr.ffverse.com/reference/ff_franchises.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get League Franchises — ff_franchises","text":"tidy dataframe franchises, complete IDs","code":""},{"path":"https://ffscrapr.ffverse.com/reference/ff_franchises.html","id":"methods-by-class-","dir":"Reference","previous_headings":"","what":"Methods (by class)","title":"Get League Franchises — ff_franchises","text":"espn_conn: ESPN: returns franchise division information. flea_conn: Fleaflicker: returns franchise division information. mfl_conn: MFL: returns franchise division information. sleeper_conn: Sleeper: retrieves list franchise information, including user IDs co-owner IDs.","code":""},{"path":"https://ffscrapr.ffverse.com/reference/ff_franchises.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get League Franchises — ff_franchises","text":"","code":"# \\donttest{ try({ # try only shown here because sometimes CRAN checks are weird    conn <- espn_connect(season = 2020, league_id = 1178049)    ff_franchises(conn) }) # end try #> # A tibble: 14 × 8 #>    franchise_id franchise_name     franc…¹ logo  waive…² user_id user_…³ user_…⁴ #>           <int> <chr>              <chr>   <chr>   <int> <chr>   <chr>   <chr>   #>  1            1 Rushin' Collusion  RC      http…       3 {6CE35… Aaron … Jack_a… #>  2            2 Gurleys Gone Wild  GGW     http…       6 {74ADB… ian ja… ianjaap #>  3            3 The Name's Mage    Mage    http…      12 {141C9… Colin … tksdev… #>  4            4 dlp:: thoriyan     thor    http…       5 {1E6BB… H Tan   tanho63 #>  5            5 No Ultrasmurfs Al… ALH     http…       9 {E88F5… Alex Tu No Ult… #>  6            6 Dak Street Boys    DSB     http…      11 {441A5… I Guess Americ… #>  7            7 Kung-Fu Kenny      KDOT    http…      10 {C6050… Raheel… PolarR… #>  8            8 Sticky Simians     LEL     http…       4 {599F7… Taylor… Monkey… #>  9            9 The Wright Stuff   TWS     NA          8 {F831B… Adam K… Klaelm… #> 10           10 Too Many Cooks     COOK    http…       7 {C9AE3… K R     eidolo… #> 11           11 Team Typhon        TYPH    http…      14 {070C0… Kade W… Typhon… #> 12           12 Homicidal Hicks    HH      http…       1 {CBF26… Travis… Kai Sh… #> 13           13 Baby You Can Driv… POKE    http…      13 {A5DC8… D R     phishc… #> 14           14 Boralus Booty      BB      http…       2 {1778D… Willia… Cephir… #> # … with abbreviated variable names ¹​franchise_abbrev, ²​waiver_order, #> #   ³​user_name, ⁴​user_nickname # }  # \\donttest{ try({ # try only shown here because sometimes CRAN checks are weird   conn <- fleaflicker_connect(season = 2020, league_id = 206154)   ff_franchises(conn) }) # end try #> # A tibble: 16 × 10 #>    division_id divisio…¹ franc…² franc…³ franc…⁴ franc…⁵ user_id user_…⁶ user_…⁷ #>          <int> <chr>       <int> <chr>   <chr>   <chr>     <int> <chr>   <chr>   #>  1      606681 JDL North 1373501 Midgar… https:… MG      1031700 Darry   NA      #>  2      606681 JDL North 1371776 Winter… https:… WH       894210 Mitchw… NA      #>  3      606681 JDL North 1373973 Red Ri… https:… RR      1148208 Ldub32  NA      #>  4      606681 JDL North 1373991 Top Ci… https:… TC      1032237 Sirhur… NA      #>  5      606682 JDL East  1373475 Winter… https:… WD       749239 syd12n… NA      #>  6      606682 JDL East  1373480 Golden… https:… GC       752341 DieNas… NA      #>  7      606682 JDL East  1374252 Centra… https:… CC       751687 noelbo… https:… #>  8      606682 JDL East  1374255 Mushro… https:… MC       749720 Diabet… NA      #>  9      606683 JDL South 1374271 Clutch… https:… CC           NA NA      NA      #> 10      606683 JDL South 1373970 Bamend… https:… BH      1032089 greate… NA      #> 11      606683 JDL South 1373993 Boomto… https:… BS      1142313 Foxtro… https:… #> 12      606683 JDL South 1374315 Shangh… NA      SC      1032619 Commie… NA      #> 13      606684 JDL West  1373393 Philad… https:… PF           NA NA      NA      #> 14      606684 JDL West  1373535 Winter… https:… WA           NA NA      NA      #> 15      606684 JDL West  1373883 Manito… NA      MM      1000915 Fonduc… NA      #> 16      606684 JDL West  1373988 Spring… https:… SI           NA NA      NA      #> # … with 1 more variable: user_lastlogin <dttm>, and abbreviated variable names #> #   ¹​division_name, ²​franchise_id, ³​franchise_name, ⁴​franchise_logo, #> #   ⁵​franchise_abbrev, ⁶​user_name, ⁷​user_avatar # }  # \\donttest{ try({ # try only shown here because sometimes CRAN checks are weird   ssb_conn <- ff_connect(platform = \"mfl\", league_id = 54040, season = 2020)   ff_franchises(ssb_conn) }) # end try #> # A tibble: 14 × 7 #>    franchise_id franchise_name     icon             abbrev bbidA…¹ waive…² logo  #>    <chr>        <chr>              <chr>            <chr>  <chr>   <chr>   <chr> #>  1 0001         Team Pikachu       https://i.imgur… PIKA   159.00  1       http… #>  2 0002         Team Simon Belmont https://i.imgur… SIMN   99.00   7       http… #>  3 0003         Team Donkey Kong   https://i.imgur… DK     50.00   6       http… #>  4 0004         Team Ice Climbers  https://i.imgur… ICE    0.00    5       http… #>  5 0005         Team Dr. Mario     https://i.imgur… DRM    84.00   4       http… #>  6 0006         Team King Dedede   https://i.imgur… KDDD   87.00   10      http… #>  7 0007         Team Kirby         https://i.imgur… KRBY   40.00   8       http… #>  8 0008         Team Bowser        https://i.imgur… BWSR   0.00    9       http… #>  9 0009         Team Link          https://i.imgur… LINK   81.00   13      http… #> 10 0010         Team Yoshi         https://i.imgur… YSHI   0.00    12      http… #> 11 0011         Team Diddy Kong    https://i.imgur… DDY    173.00  11      http… #> 12 0012         Team Mewtwo        https://i.imgur… MEW2   0.00    3       http… #> 13 0013         Team Ness          https://i.imgur… NESS   0.00    2       http… #> 14 0014         Team Luigi         https://i.imgur… LUIG   0.00    14      http… #> # … with abbreviated variable names ¹​bbidAvailableBalance, ²​waiverSortOrder # }  # \\donttest{ try({ # try only shown here because sometimes CRAN checks are weird   jml_conn <- ff_connect(platform = \"sleeper\", league_id = \"522458773317046272\", season = 2020)   ff_franchises(jml_conn) }) # end try #> # A tibble: 12 × 5 #>    franchise_id franchise_name    user_name      user_id            co_owners  #>           <int> <chr>             <chr>          <chr>              <list>     #>  1            1 Fake News         Jcurtis44      70729037081100288  <NULL>     #>  2            2 KingGabe          KingGabe       76686532077305856  <NULL>     #>  3            3 solarpool         solarpool      202892038360801280 <NULL>     #>  4            4 The FANTom Menace weeknee        202882046337490944 <NULL>     #>  5            5 Barbarians        ABitterHomer   386383436639973376 <NULL>     #>  6            6 sox05syd          sox05syd       409797051455393792 <NULL>     #>  7            7 Flipadelphia05    Flipadelphia05 386950378371207168 <NULL>     #>  8            8 Hocka Flocka      TwoFrames      386976568364306432 <NULL>     #>  9            9 ZPMiller97        ZPMiller97     386571720443764736 <NULL>     #> 10           10 JMLarkin          JMLarkin       387070108625039360 <NULL>     #> 11           11 Permian Panthers  theoracleETS   198540145396289536 <list [1]> #> 12           12 jaydk             jaydk          401485903224193024 <NULL>     # }"},{"path":"https://ffscrapr.ffverse.com/reference/ff_league.html","id":null,"dir":"Reference","previous_headings":"","what":"Get League Summary — ff_league","title":"Get League Summary — ff_league","text":"function returns tidy dataframe common league settings, including details like \"1QB\" \"2QB/SF\", scoring, best ball, team count, IDP etc. potentially useful summarising features multiple leagues.","code":""},{"path":"https://ffscrapr.ffverse.com/reference/ff_league.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get League Summary — ff_league","text":"","code":"ff_league(conn)  # S3 method for espn_conn ff_league(conn)  # S3 method for flea_conn ff_league(conn)  # S3 method for mfl_conn ff_league(conn)  # S3 method for sleeper_conn ff_league(conn)"},{"path":"https://ffscrapr.ffverse.com/reference/ff_league.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get League Summary — ff_league","text":"conn connection object created ff_connect()","code":""},{"path":"https://ffscrapr.ffverse.com/reference/ff_league.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get League Summary — ff_league","text":"one-row summary league's main features.","code":""},{"path":"https://ffscrapr.ffverse.com/reference/ff_league.html","id":"methods-by-class-","dir":"Reference","previous_headings":"","what":"Methods (by class)","title":"Get League Summary — ff_league","text":"espn_conn: ESPN: returns summary league features. flea_conn: Flea: returns summary league features. mfl_conn: MFL: returns summary league features. sleeper_conn: Sleeper: returns summary league features.","code":""},{"path":"https://ffscrapr.ffverse.com/reference/ff_league.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get League Summary — ff_league","text":"","code":"# \\donttest{ try({ # try only shown here because sometimes CRAN checks are weird    conn <- espn_connect(season = 2020, league_id = 899513)    ff_league(conn) }) # end try #> # A tibble: 1 × 16 #>   league_id leagu…¹ season leagu…² franc…³ qb_type idp   scori…⁴ best_…⁵ salar…⁶ #>   <chr>     <chr>    <int> <chr>     <int> <chr>   <lgl> <chr>   <lgl>   <lgl>   #> 1 899513    Sucio …   2020 keeper       10 2QB/SF  FALSE 0.5_ppr FALSE   FALSE   #> # … with 6 more variables: player_copies <dbl>, years_active <chr>, #> #   qb_count <chr>, roster_size <int>, league_depth <dbl>, keeper_count <int>, #> #   and abbreviated variable names ¹​league_name, ²​league_type, #> #   ³​franchise_count, ⁴​scoring_flags, ⁵​best_ball, ⁶​salary_cap # }  # \\donttest{ try({ # try only shown here because sometimes CRAN checks are weird   conn <- fleaflicker_connect(2020, 206154)   ff_league(conn) }) # end try #> # A tibble: 1 × 15 #>   league_id leagu…¹ season leagu…² franc…³ qb_type idp   scori…⁴ best_…⁵ salar…⁶ #>   <chr>     <chr>    <int> <chr>     <dbl> <chr>   <lgl> <chr>   <lgl>   <lgl>   #> 1 206154    Jackpo…   2020 dynasty      16 1QB     TRUE  0.5_pp… FALSE   FALSE   #> # … with 5 more variables: player_copies <dbl>, qb_count <chr>, #> #   roster_size <int>, league_depth <dbl>, keeper_count <int>, and abbreviated #> #   variable names ¹​league_name, ²​league_type, ³​franchise_count, #> #   ⁴​scoring_flags, ⁵​best_ball, ⁶​salary_cap # }  # \\donttest{ try({ # try only shown here because sometimes CRAN checks are weird   ssb_conn <- ff_connect(platform = \"mfl\", league_id = 22627, season = 2021)   ff_league(ssb_conn) }) # end try #> # A tibble: 1 × 17 #>   league_id leagu…¹ season leagu…² franc…³ qb_type idp   scori…⁴ best_…⁵ salar…⁶ #>   <chr>     <chr>    <int> <chr>     <dbl> <chr>   <lgl> <chr>   <lgl>   <lgl>   #> 1 22627     Four-E…   2021 dynasty      12 2QB/SF  TRUE  zero_p… FALSE   TRUE    #> # … with 7 more variables: player_copies <dbl>, years_active <chr>, #> #   qb_count <chr>, roster_size <dbl>, league_depth <dbl>, draft_type <chr>, #> #   draft_player_pool <chr>, and abbreviated variable names ¹​league_name, #> #   ²​league_type, ³​franchise_count, ⁴​scoring_flags, ⁵​best_ball, ⁶​salary_cap # }  # \\donttest{ try({ # try only shown here because sometimes CRAN checks are weird   jml_conn <- ff_connect(platform = \"sleeper\", league_id = \"522458773317046272\", season = 2020)   ff_league(jml_conn) }) # end try #> # A tibble: 1 × 16 #>   league_id leagu…¹ season leagu…² franc…³ qb_type idp   scori…⁴ best_…⁵ salar…⁶ #>   <chr>     <chr>    <int> <chr>     <dbl> <chr>   <lgl> <chr>   <lgl>   <lgl>   #> 1 52245877… The Ja…   2020 dynasty      12 1QB     FALSE 0.5_ppr FALSE   FALSE   #> # … with 6 more variables: player_copies <dbl>, years_active <chr>, #> #   qb_count <chr>, roster_size <int>, league_depth <dbl>, #> #   prev_league_ids <chr>, and abbreviated variable names ¹​league_name, #> #   ²​league_type, ³​franchise_count, ⁴​scoring_flags, ⁵​best_ball, ⁶​salary_cap # }"},{"path":"https://ffscrapr.ffverse.com/reference/ff_playerscores.html","id":null,"dir":"Reference","previous_headings":"","what":"Get Player Scoring History — ff_playerscores","title":"Get Player Scoring History — ff_playerscores","text":"function returns tidy dataframe player scores based league rules. Unfortunately, Sleeper deprecated player stats endpoint supported/open API. Please see ff_scoringhistory() alternative reconstruction.","code":""},{"path":"https://ffscrapr.ffverse.com/reference/ff_playerscores.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get Player Scoring History — ff_playerscores","text":"","code":"ff_playerscores(conn, ...)  # S3 method for espn_conn ff_playerscores(conn, limit = 1000, ...)  # S3 method for flea_conn ff_playerscores(conn, page_limit = NULL, ...)  # S3 method for mfl_conn ff_playerscores(conn, season, week, ...)  # S3 method for sleeper_conn ff_playerscores(conn, ...)"},{"path":"https://ffscrapr.ffverse.com/reference/ff_playerscores.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get Player Scoring History — ff_playerscores","text":"conn list object created ff_connect() ... arguments (currently unused) limit numeric describing number players return - default 1000 page_limit numeric describing number pages return - default NULL returns available season season interest - generally recent 2-3 seasons available week numeric vector (ie 1:17) one YTD (year--date) AVG (average date)","code":""},{"path":"https://ffscrapr.ffverse.com/reference/ff_playerscores.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get Player Scoring History — ff_playerscores","text":"tibble historical player scoring","code":""},{"path":"https://ffscrapr.ffverse.com/reference/ff_playerscores.html","id":"methods-by-class-","dir":"Reference","previous_headings":"","what":"Methods (by class)","title":"Get Player Scoring History — ff_playerscores","text":"espn_conn: ESPN: returns total points season average per game, current previous season. flea_conn: Fleaflicker: returns season, season average, standard deviation mfl_conn: MFL: returns player fantasy scores week (actual stats) sleeper_conn: Sleeper: Deprecated open API endpoint player scores","code":""},{"path":[]},{"path":"https://ffscrapr.ffverse.com/reference/ff_playerscores.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get Player Scoring History — ff_playerscores","text":"","code":"# \\donttest{ try({ # try only shown here because sometimes CRAN checks are weird    conn <- espn_connect(season = 2020, league_id = 899513)    ff_playerscores(conn, limit = 5) }) # end try #> # A tibble: 5 × 8 #>   season player_id player_name     pos   score_total score_ave…¹ franc…² franc…³ #>    <int>     <int> <chr>           <chr>       <dbl>       <dbl>   <int> <chr>   #> 1   2020   3054850 Alvin Kamara    RB           337.        22.5       9 \"RAFI … #> 2   2020   3043078 Derrick Henry   RB           324.        20.2       4 \"I'm A… #> 3   2020     16800 Davante Adams   WR           301.        21.5       2 \"Coom … #> 4   2020     15795 DeAndre Hopkins WR           230.        14.4       4 \"I'm A… #> 5   2020   2576925 Darren Waller   TE           225.        14.1       4 \"I'm A… #> # … with abbreviated variable names ¹​score_average, ²​franchise_id, #> #   ³​franchise_name # } # \\donttest{ try({ # try only shown here because sometimes CRAN checks are weird   conn <- fleaflicker_connect(2020, 312861)   ff_playerscores(conn, page_limit = 2) }) # end try #> # A tibble: 60 × 8 #>    player_id player_name      pos   team  games score_total score_avg score_sd #>        <int> <chr>            <chr> <chr> <dbl>       <dbl>     <dbl>    <dbl> #>  1     16242 Trevor Lawrence  QB    JAC      NA          NA        NA       NA #>  2     15581 Jalen Hurts      QB    PHI      NA          NA        NA       NA #>  3     12906 Evan Engram      TE    JAC      NA          NA        NA       NA #>  4     12102 Jared Goff       QB    DET      NA          NA        NA       NA #>  5      8598 Russell Wilson   QB    DEN      NA          NA        NA       NA #>  6      8625 Kirk Cousins     QB    MIN      NA          NA        NA       NA #>  7     12894 Patrick Mahomes  QB    KC       NA          NA        NA       NA #>  8      9372 Geno Smith       QB    SEA      NA          NA        NA       NA #>  9     15540 Justin Jefferson WR    MIN      NA          NA        NA       NA #> 10     15544 Jerry Jeudy      WR    DEN      NA          NA        NA       NA #> # … with 50 more rows # } # \\donttest{ try({ # try only shown here because sometimes CRAN checks are weird   sfb_conn <- mfl_connect(2020, league_id = 65443)   ff_playerscores(conn = sfb_conn, season = 2019, week = \"YTD\") }) # end try #> # A tibble: 589 × 8 #>    season week  player_id player_name          pos   team  points is_available #>     <dbl> <chr> <chr>     <chr>                <chr> <chr>  <dbl> <chr>        #>  1   2019 YTD   13593     Jackson, Lamar       QB    BAL     489. 1            #>  2   2019 YTD   13130     McCaffrey, Christian RB    CAR     447. 1            #>  3   2019 YTD   12652     Thomas, Michael      WR    NOS     338. 1            #>  4   2019 YTD   13113     Watson, Deshaun      QB    HOU     330. 1            #>  5   2019 YTD   11244     Kelce, Travis        TE    KCC     317. 1            #>  6   2019 YTD   10703     Wilson, Russell      QB    SEA     315. 1            #>  7   2019 YTD   12620     Prescott, Dak        QB    DAL     314. 1            #>  8   2019 YTD   13128     Cook, Dalvin         RB    MIN     313. 1            #>  9   2019 YTD   13319     Jones, Aaron         RB    GBP     312  1            #> 10   2019 YTD   12625     Elliott, Ezekiel     RB    DAL     309. 1            #> # … with 579 more rows # }"},{"path":"https://ffscrapr.ffverse.com/reference/ff_rosters.html","id":null,"dir":"Reference","previous_headings":"","what":"Get League Rosters — ff_rosters","title":"Get League Rosters — ff_rosters","text":"function returns tidy dataframe team rosters","code":""},{"path":"https://ffscrapr.ffverse.com/reference/ff_rosters.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get League Rosters — ff_rosters","text":"","code":"ff_rosters(conn, ...)  # S3 method for espn_conn ff_rosters(conn, week = NULL, ...)  # S3 method for flea_conn ff_rosters(conn, ...)  # S3 method for mfl_conn ff_rosters(conn, custom_players = deprecated(), week = NULL, ...)  # S3 method for sleeper_conn ff_rosters(conn, ...)"},{"path":"https://ffscrapr.ffverse.com/reference/ff_rosters.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get League Rosters — ff_rosters","text":"conn conn object created ff_connect() ... arguments passed methods (currently none) week numeric specifies week return custom_players \"\" - now returns custom players default","code":""},{"path":"https://ffscrapr.ffverse.com/reference/ff_rosters.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get League Rosters — ff_rosters","text":"tidy dataframe rosters, joined basic player information basic franchise information","code":""},{"path":"https://ffscrapr.ffverse.com/reference/ff_rosters.html","id":"methods-by-class-","dir":"Reference","previous_headings":"","what":"Methods (by class)","title":"Get League Rosters — ff_rosters","text":"espn_conn: ESPN: Returns roster data. flea_conn: Fleaflicker: Returns roster data (minus age right now) mfl_conn: MFL: returns roster data sleeper_conn: Sleeper: Returns roster data.","code":""},{"path":"https://ffscrapr.ffverse.com/reference/ff_rosters.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get League Rosters — ff_rosters","text":"","code":"# \\donttest{ try({ # try only shown here because sometimes CRAN checks are weird   conn <- espn_connect(season = 2020, league_id = 899513)   ff_league(conn) }) # end try #> # A tibble: 1 × 16 #>   league_id leagu…¹ season leagu…² franc…³ qb_type idp   scori…⁴ best_…⁵ salar…⁶ #>   <chr>     <chr>    <int> <chr>     <int> <chr>   <lgl> <chr>   <lgl>   <lgl>   #> 1 899513    Sucio …   2020 keeper       10 2QB/SF  FALSE 0.5_ppr FALSE   FALSE   #> # … with 6 more variables: player_copies <dbl>, years_active <chr>, #> #   qb_count <chr>, roster_size <int>, league_depth <dbl>, keeper_count <int>, #> #   and abbreviated variable names ¹​league_name, ²​league_type, #> #   ³​franchise_count, ⁴​scoring_flags, ⁵​best_ball, ⁶​salary_cap # } # \\donttest{ try({ # try only shown here because sometimes CRAN checks are weird   joe_conn <- ff_connect(platform = \"fleaflicker\", league_id = 312861, season = 2020)    ff_rosters(joe_conn) }) # end try #> # A tibble: 348 × 7 #>    franchise_id franchise_name player_id player_name      pos   team  sportrad…¹ #>           <int> <chr>              <int> <chr>            <chr> <chr> <chr>      #>  1      1578553 Running Bear       12159 Dak Prescott     QB    DAL   86197778-… #>  2      1578553 Running Bear       16259 Trey Lance       QB    SF    676a508c-… #>  3      1578553 Running Bear       14736 Devin Singletary RB    BUF   a961b0d4-… #>  4      1578553 Running Bear       13772 Rashaad Penny    RB    SEA   2b119688-… #>  5      1578553 Running Bear       12017 Laquon Treadwell WR    SEA   2e0badcd-… #>  6      1578553 Running Bear       15531 Brandon Aiyuk    WR    SF    c90471cc-… #>  7      1578553 Running Bear       13788 Michael Gallup   WR    DAL   9e174ff2-… #>  8      1578553 Running Bear       15564 Van Jefferson    WR    LAR   8e1285f7-… #>  9      1578553 Running Bear       16250 Ja'Marr Chase    WR    CIN   fa99e984-… #> 10      1578553 Running Bear       12972 Gerald Everett   TE    LAC   ebeceb00-… #> # … with 338 more rows, and abbreviated variable name ¹​sportradar_id # } # \\donttest{ try({ # try only shown here because sometimes CRAN checks are weird   ssb_conn <- ff_connect(platform = \"mfl\", league_id = 54040, season = 2020)   ff_rosters(ssb_conn) }) # end try #> # A tibble: 417 × 11 #>    franchise…¹ franc…² playe…³ playe…⁴ pos   team    age roste…⁵ drafted draft…⁶ #>    <chr>       <chr>   <chr>   <chr>   <chr> <chr> <dbl> <chr>   <chr>   <chr>   #>  1 0001        Team P… 13189   Engram… TE    NYG    28.3 ROSTER  3.04    2017    #>  2 0001        Team P… 11680   Landry… WR    CLE    30   ROSTER  4.02    2014    #>  3 0001        Team P… 13645   Smith,… WR    NOS    26.9 ROSTER  18.02   2018    #>  4 0001        Team P… 12110   Brate,… TE    TBB    31.4 ROSTER  19.04   2014    #>  5 0001        Team P… 13168   Reynol… WR    LAR    27.8 ROSTER  20.02   2017    #>  6 0001        Team P… 13793   Valdes… WR    GBP    28.2 ROSTER  21.04   2018    #>  7 0001        Team P… 13377   Patric… WR    DEN    29.1 ROSTER  25.04   2017    #>  8 0001        Team P… 13254   Shahee… TE    MIA    28.9 ROSTER  26.02   2017    #>  9 0001        Team P… 14803   Edward… RB    KCC    23.7 ROSTER  1.01    2020    #> 10 0001        Team P… 14838   Shenau… WR    JAC    24.2 ROSTER  2.02    2020    #> # … with 407 more rows, 1 more variable: draft_round <chr>, and abbreviated #> #   variable names ¹​franchise_id, ²​franchise_name, ³​player_id, ⁴​player_name, #> #   ⁵​roster_status, ⁶​draft_year # }  # \\donttest{ try({ # try only shown here because sometimes CRAN checks are weird   jml_conn <- ff_connect(platform = \"sleeper\", league_id = \"522458773317046272\", season = 2020)   ff_rosters(jml_conn) }) # end try #> # A tibble: 350 × 7 #>    franchise_id franchise_name player_id player_name     pos   team    age #>    <chr>        <chr>          <chr>     <chr>           <chr> <chr> <dbl> #>  1 1            Fake News      1110      T.Y. Hilton     WR    NA     33.1 #>  2 1            Fake News      1339      Zach Ertz       TE    ARI    32.1 #>  3 1            Fake News      1426      DeAndre Hopkins WR    ARI    30.5 #>  4 1            Fake News      1825      Jarvis Landry   WR    NO     30   #>  5 1            Fake News      2025      Albert Wilson   WR    LV     30.4 #>  6 1            Fake News      2197      Brandin Cooks   WR    HOU    29.2 #>  7 1            Fake News      2319      DeVante Parker  WR    NE     29.9 #>  8 1            Fake News      232       Frank Gore      RB    NA     39.6 #>  9 1            Fake News      2822      Adam Humphries  WR    NA     29.5 #> 10 1            Fake News      289       Drew Brees      QB    NA     43.9 #> # … with 340 more rows # }"},{"path":"https://ffscrapr.ffverse.com/reference/ff_schedule.html","id":null,"dir":"Reference","previous_headings":"","what":"Get Schedule — ff_schedule","title":"Get Schedule — ff_schedule","text":"function returns tidy dataframe one row every team every weekly matchup","code":""},{"path":"https://ffscrapr.ffverse.com/reference/ff_schedule.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get Schedule — ff_schedule","text":"","code":"ff_schedule(conn, ...)  # S3 method for espn_conn ff_schedule(conn, ...)  # S3 method for flea_conn ff_schedule(conn, week = 1:17, ...)  # S3 method for mfl_conn ff_schedule(conn, ...)  # S3 method for sleeper_conn ff_schedule(conn, ...)"},{"path":"https://ffscrapr.ffverse.com/reference/ff_schedule.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get Schedule — ff_schedule","text":"conn conn object created ff_connect() ... platforms week numeric numeric vector specifying weeks pull","code":""},{"path":"https://ffscrapr.ffverse.com/reference/ff_schedule.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get Schedule — ff_schedule","text":"tidy dataframe one row per game per franchise per week","code":""},{"path":"https://ffscrapr.ffverse.com/reference/ff_schedule.html","id":"methods-by-class-","dir":"Reference","previous_headings":"","what":"Methods (by class)","title":"Get Schedule — ff_schedule","text":"espn_conn: ESPN: returns schedule data, one row every franchise every week. Completed games result data. flea_conn: Flea: returns schedule data, one row every franchise every week. Completed games result data. mfl_conn: MFL: returns schedule data, one row every franchise every week. Completed games result data. sleeper_conn: Sleeper: returns schedule data","code":""},{"path":"https://ffscrapr.ffverse.com/reference/ff_schedule.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get Schedule — ff_schedule","text":"","code":"# \\donttest{ try({ # try only shown here because sometimes CRAN checks are weird   espn_conn <- espn_connect(season = 2020, league_id = 899513)   ff_schedule(espn_conn) }) # end try #> # A tibble: 140 × 6 #>     week franchise_id franchise_score result opponent_id opponent_score #>    <int>        <int>           <dbl> <chr>        <int>          <dbl> #>  1     1            1            102. L                4           130. #>  2     1            2            156. W                3           135. #>  3     1            3            135. L                2           156. #>  4     1            4            130. W                1           102. #>  5     1            5            133. W                7           131. #>  6     1            6            119. L                9           124. #>  7     1            7            131. L                5           133. #>  8     1            8            120. L               10           122. #>  9     1            9            124. W                6           119. #> 10     1           10            122. W                8           120. #> # … with 130 more rows # }  # \\donttest{ try({ # try only shown here because sometimes CRAN checks are weird   conn <- fleaflicker_connect(season = 2019, league_id = 206154)   ff_schedule(conn, week = 2:4) }) # end try #> # A tibble: 48 × 14 #>     week franch…¹ franc…² franc…³ result oppon…⁴ oppon…⁵ oppon…⁶ game_id isFin…⁷ #>    <int>    <int> <chr>     <dbl> <chr>    <int> <chr>     <dbl> <chr>   <lgl>   #>  1     2  1373991 Top Ci…    226. WIN    1373393 Philad…    138. 425065… TRUE    #>  2     2  1373480 Golden…    161. LOSE   1373475 Winter…    300. 422451… TRUE    #>  3     2  1371776 Winter…    178. WIN    1373501 Midgar…    172. 425065… TRUE    #>  4     2  1373993 Boomto…    167. WIN    1373970 Bamend…    159. 422451… TRUE    #>  5     2  1373883 Manito…    201. WIN    1373973 Red Ri…    103. 425065… TRUE    #>  6     2  1373535 Winter…    147. LOSE   1373988 Spring…    229. 425065… TRUE    #>  7     2  1374252 Centra…    160. LOSE   1374255 Mushro…    210. 422451… TRUE    #>  8     2  1374271 Clutch…    174. WIN    1374315 Shangh…    132. 422451… TRUE    #>  9     2  1373393 Philad…    138. LOSE   1373991 Top Ci…    226. 425065… TRUE    #> 10     2  1373475 Winter…    300. WIN    1373480 Golden…    161. 422451… TRUE    #> # … with 38 more rows, 4 more variables: isDivisional <lgl>, isPlayoffs <lgl>, #> #   isThirdPlaceGame <lgl>, isChampionshipGame <lgl>, and abbreviated variable #> #   names ¹​franchise_id, ²​franchise_name, ³​franchise_score, ⁴​opponent_id, #> #   ⁵​opponent_name, ⁶​opponent_score, ⁷​isFinalScore # }  # \\donttest{ try({ # try only shown here because sometimes CRAN checks are weird   ssb_conn <- ff_connect(platform = \"mfl\", league_id = 54040, season = 2020)   ff_schedule(ssb_conn) }) # end try #> # A tibble: 234 × 6 #>     week franchise_id franchise_score result opponent_id opponent_score #>    <dbl> <chr>                  <dbl> <chr>  <chr>                <dbl> #>  1     1 0001                    123. W      0002                  103. #>  2     1 0002                    103. L      0001                  123. #>  3     1 0003                    128. L      0004                  174. #>  4     1 0004                    174. W      0003                  128. #>  5     1 0005                    144. W      0011                  130. #>  6     1 0006                    173. W      0013                  125. #>  7     1 0007                    145. W      0010                  127. #>  8     1 0008                    185. W      0009                  176. #>  9     1 0009                    176. L      0008                  185. #> 10     1 0010                    127. L      0007                  145. #> # … with 224 more rows # }  # \\donttest{ try({ # try only shown here because sometimes CRAN checks are weird   jml_conn <- ff_connect(platform = \"sleeper\", league_id = \"522458773317046272\", season = 2020)   ff_schedule(jml_conn) }) # end try #> # A tibble: 184 × 6 #>     week franchise_id franchise_score opponent_id opponent_score result #>    <int>        <int>           <dbl>       <int>          <dbl> <chr>  #>  1     1            1            97.8          12          160.  L      #>  2     1            2            65.9           8           70.2 L      #>  3     1            3           103.           10           71   W      #>  4     1            4           133.            7          106.  W      #>  5     1            5            82.4           6           99.3 L      #>  6     1            6            99.3           5           82.4 W      #>  7     1            7           106.            4          133.  L      #>  8     1            8            70.2           2           65.9 W      #>  9     1            9            78.3          11          147   L      #> 10     1           10            71             3          103.  L      #> # … with 174 more rows # }"},{"path":"https://ffscrapr.ffverse.com/reference/ff_scoring.html","id":null,"dir":"Reference","previous_headings":"","what":"Get League Scoring Settings — ff_scoring","title":"Get League Scoring Settings — ff_scoring","text":"function returns dataframe detailed scoring settings league - broken event, points, (available) position.","code":""},{"path":"https://ffscrapr.ffverse.com/reference/ff_scoring.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get League Scoring Settings — ff_scoring","text":"","code":"ff_scoring(conn)  # S3 method for espn_conn ff_scoring(conn)  # S3 method for flea_conn ff_scoring(conn)  # S3 method for mfl_conn ff_scoring(conn)  # S3 method for sleeper_conn ff_scoring(conn)  # S3 method for template_conn ff_scoring(conn)"},{"path":"https://ffscrapr.ffverse.com/reference/ff_scoring.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get League Scoring Settings — ff_scoring","text":"conn conn object created ff_connect()","code":""},{"path":"https://ffscrapr.ffverse.com/reference/ff_scoring.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get League Scoring Settings — ff_scoring","text":"tibble league scoring rules position defined.","code":""},{"path":"https://ffscrapr.ffverse.com/reference/ff_scoring.html","id":"methods-by-class-","dir":"Reference","previous_headings":"","what":"Methods (by class)","title":"Get League Scoring Settings — ff_scoring","text":"espn_conn: ESPN: returns scoring settings flat table, override positions scoring. flea_conn: Fleaflicker: returns scoring settings flat table, one row per position per rule. mfl_conn: MFL: returns scoring settings flat table, one row per position per rule. sleeper_conn: Sleeper: returns scoring settings flat table, one row per position per rule. template_conn: Template: returns MFL style scoring settings flat table, one row per position per rule.","code":""},{"path":[]},{"path":"https://ffscrapr.ffverse.com/reference/ff_scoring.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get League Scoring Settings — ff_scoring","text":"","code":"# \\donttest{ try({ # try only shown here because sometimes CRAN checks are weird   conn <- espn_connect(season = 2020, league_id = 899513)   ff_scoring(conn) }) # end try #> # A tibble: 627 × 4 #>    pos   points stat_id stat_name                     #>    <chr>  <dbl>   <int> <chr>                         #>  1 QB         0     133 defensive400To449YardsAllowed #>  2 RB         0     133 defensive400To449YardsAllowed #>  3 WR         0     133 defensive400To449YardsAllowed #>  4 TE         0     133 defensive400To449YardsAllowed #>  5 K          0     133 defensive400To449YardsAllowed #>  6 P          0     133 defensive400To449YardsAllowed #>  7 DT         0     133 defensive400To449YardsAllowed #>  8 DE         0     133 defensive400To449YardsAllowed #>  9 LB         0     133 defensive400To449YardsAllowed #> 10 CB         0     133 defensive400To449YardsAllowed #> # … with 617 more rows # }  # \\donttest{ try({ # try only shown here because sometimes CRAN checks are weird   joe_conn <- ff_connect(platform = \"fleaflicker\", league_id = 312861, season = 2020)   ff_scoring(joe_conn) }) # end try #> # A tibble: 72 × 7 #>    pos   event                   abbrev points label   desc              event…¹ #>    <chr> <chr>                   <chr>   <dbl> <chr>   <chr>               <int> #>  1 QB    Passing Yard            Yd       0.04 Passing 1 point for ever…       3 #>  2 RB    Passing Yard            Yd       0.04 Passing 1 point for ever…       3 #>  3 WR    Passing Yard            Yd       0.04 Passing 1 point for ever…       3 #>  4 TE    Passing Yard            Yd       0.04 Passing 1 point for ever…       3 #>  5 QB    Passing TD              TD       6    Passing 6 points for eve…       5 #>  6 RB    Passing TD              TD       6    Passing 6 points for eve…       5 #>  7 WR    Passing TD              TD       6    Passing 6 points for eve…       5 #>  8 TE    Passing TD              TD       6    Passing 6 points for eve…       5 #>  9 QB    2 Pt Conversion Passing 2PC      2    Passing 2 points for eve…       4 #> 10 RB    2 Pt Conversion Passing 2PC      2    Passing 2 points for eve…       4 #> # … with 62 more rows, and abbreviated variable name ¹​event_id # }  # \\donttest{ try({ # try only shown here because sometimes CRAN checks are weird   ssb_conn <- ff_connect(platform = \"mfl\", league_id = 54040, season = 2020)   ff_scoring(ssb_conn) }) # end try #> # A tibble: 71 × 7 #>    pos   points range   event points_type short_desc                long_desc    #>    <chr>  <dbl> <chr>   <chr> <chr>       <chr>                     <chr>        #>  1 QB      6    0-10    #P    each        Number of Passing TDs     \"This is th… #>  2 RB      6    0-10    #P    each        Number of Passing TDs     \"This is th… #>  3 WR      6    0-10    #P    each        Number of Passing TDs     \"This is th… #>  4 TE      6    0-10    #P    each        Number of Passing TDs     \"This is th… #>  5 QB      0.04 -50-999 PY    each        Passing Yards             \"This is th… #>  6 RB      0.04 -50-999 PY    each        Passing Yards             \"This is th… #>  7 WR      0.04 -50-999 PY    each        Passing Yards             \"This is th… #>  8 TE      0.04 -50-999 PY    each        Passing Yards             \"This is th… #>  9 QB     -4    0-10    IN    each        Pass Interceptions Thrown \"This is th… #> 10 RB     -4    0-10    IN    each        Pass Interceptions Thrown \"This is th… #> # … with 61 more rows # }  # \\donttest{ try({ # try only shown here because sometimes CRAN checks are weird   jml_conn <- ff_connect(platform = \"sleeper\", league_id = \"522458773317046272\", season = 2020)   ff_scoring(jml_conn) }) # end try #> # A tibble: 169 × 3 #>    pos   event    points #>    <chr> <chr>     <dbl> #>  1 QB    pass_2pt      2 #>  2 RB    pass_2pt      2 #>  3 WR    pass_2pt      2 #>  4 TE    pass_2pt      2 #>  5 K     pass_2pt      2 #>  6 QB    pass_int     -2 #>  7 RB    pass_int     -2 #>  8 WR    pass_int     -2 #>  9 TE    pass_int     -2 #> 10 K     pass_int     -2 #> # … with 159 more rows # }  # \\donttest{ template_ppr <- ff_template(scoring_type = \"ppr\") ff_scoring(template_ppr) #> # A tibble: 228 × 7 #>    pos   points range event points_type short_desc              long_desc        #>    <chr>  <dbl> <chr> <chr> <chr>       <chr>                   <chr>            #>  1 TE         6 0-10  #C    each        Number of Receiving TDs This is the tot… #>  2 QB         6 0-10  #C    each        Number of Receiving TDs This is the tot… #>  3 RB         6 0-10  #C    each        Number of Receiving TDs This is the tot… #>  4 PK         6 0-10  #C    each        Number of Receiving TDs This is the tot… #>  5 WR         6 0-10  #C    each        Number of Receiving TDs This is the tot… #>  6 DT         6 0-10  #C    each        Number of Receiving TDs This is the tot… #>  7 DE         6 0-10  #C    each        Number of Receiving TDs This is the tot… #>  8 LB         6 0-10  #C    each        Number of Receiving TDs This is the tot… #>  9 CB         6 0-10  #C    each        Number of Receiving TDs This is the tot… #> 10 S          6 0-10  #C    each        Number of Receiving TDs This is the tot… #> # … with 218 more rows # }"},{"path":"https://ffscrapr.ffverse.com/reference/ff_scoringhistory.html","id":null,"dir":"Reference","previous_headings":"","what":"Get League-Specific Scoring History — ff_scoringhistory","title":"Get League-Specific Scoring History — ff_scoringhistory","text":"(Experimental!) function reads league's ff_scoring rules maps nflfastr week-level data. scoring rules league may nflfastr equivalents, common ones available!","code":""},{"path":"https://ffscrapr.ffverse.com/reference/ff_scoringhistory.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get League-Specific Scoring History — ff_scoringhistory","text":"","code":"ff_scoringhistory(conn, season, ...)  # S3 method for espn_conn ff_scoringhistory(conn, season = 1999:nflreadr::most_recent_season(), ...)  # S3 method for flea_conn ff_scoringhistory(conn, season = 1999:nflreadr::most_recent_season(), ...)  # S3 method for mfl_conn ff_scoringhistory(conn, season = 1999:nflreadr::most_recent_season(), ...)  # S3 method for sleeper_conn ff_scoringhistory(conn, season = 1999:nflreadr::most_recent_season(), ...)  # S3 method for template_conn ff_scoringhistory(conn, season = 1999:nflreadr::most_recent_season(), ...)"},{"path":"https://ffscrapr.ffverse.com/reference/ff_scoringhistory.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get League-Specific Scoring History — ff_scoringhistory","text":"conn conn object created ff_connect() season season numeric vector seasons (earliest available year 1999) ... arguments","code":""},{"path":"https://ffscrapr.ffverse.com/reference/ff_scoringhistory.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get League-Specific Scoring History — ff_scoringhistory","text":"tidy dataframe weekly fantasy scoring data, one row per player per week","code":""},{"path":"https://ffscrapr.ffverse.com/reference/ff_scoringhistory.html","id":"methods-by-class-","dir":"Reference","previous_headings":"","what":"Methods (by class)","title":"Get League-Specific Scoring History — ff_scoringhistory","text":"espn_conn: ESPN: returns scoring history flat table, one row per player per week. flea_conn: Fleaflicker: returns scoring history flat table, one row per player per week. mfl_conn: MFL: returns scoring history flat table, one row per player per week. sleeper_conn: Sleeper: returns scoring history flat table, one row per player per week. template_conn: template: returns scoring history flat table, one row per player per week.","code":""},{"path":[]},{"path":"https://ffscrapr.ffverse.com/reference/ff_scoringhistory.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get League-Specific Scoring History — ff_scoringhistory","text":"","code":"# \\donttest{ try({ # try only shown here because sometimes CRAN checks are weird   conn <- espn_connect(season = 2020, league_id = 899513)   ff_scoringhistory(conn, season = 2020) }) # end try #> # A tibble: 5,397 × 24 #>    season  week gsis_id    sportrad…¹ espn_id playe…² pos   team  points inter…³ #>     <int> <int> <chr>      <chr>      <chr>   <chr>   <chr> <chr>  <dbl>   <dbl> #>  1   2020    15 00-0034490 83849bc5-… 3894901 Ezekie… LB    ARI      3.1       0 #>  2   2020     1 00-0035752 23461354-… 3040206 Chris … QB    ARI      0.3       0 #>  3   2020    17 00-0035752 23461354-… 3040206 Chris … QB    ARI      7.4       1 #>  4   2020     1 00-0035228 dd5a6b6e-… 3917315 Kyler … QB    ARI     26.3       1 #>  5   2020     2 00-0035228 dd5a6b6e-… 3917315 Kyler … QB    ARI     32.1       1 #>  6   2020     3 00-0035228 dd5a6b6e-… 3917315 Kyler … QB    ARI     21.7       3 #>  7   2020     4 00-0035228 dd5a6b6e-… 3917315 Kyler … QB    ARI     23.1       0 #>  8   2020     5 00-0035228 dd5a6b6e-… 3917315 Kyler … QB    ARI     26.3       1 #>  9   2020     6 00-0035228 dd5a6b6e-… 3917315 Kyler … QB    ARI     28.9       0 #> 10   2020     7 00-0035228 dd5a6b6e-… 3917315 Kyler … QB    ARI     37.1       1 #> # … with 5,387 more rows, 14 more variables: passing_2pt_conversions <dbl>, #> #   passing_tds <dbl>, passing_yards <dbl>, receiving_2pt_conversions <dbl>, #> #   receiving_fumbles_lost <dbl>, receiving_tds <dbl>, receiving_yards <dbl>, #> #   receptions <dbl>, rushing_2pt_conversions <dbl>, #> #   rushing_fumbles_lost <dbl>, rushing_tds <dbl>, rushing_yards <dbl>, #> #   sack_fumbles_lost <dbl>, special_teams_tds <dbl>, and abbreviated variable #> #   names ¹​sportradar_id, ²​player_name, ³​interceptions # }  # \\donttest{ try({ # try only shown here because sometimes CRAN checks are weird   conn <- fleaflicker_connect(2020, 312861)   ff_scoringhistory(conn, season = 2020) }) # end try #> # A tibble: 5,392 × 24 #>    season  week gsis_id    sportrad…¹ fleaf…² playe…³ pos   team  points inter…⁴ #>     <int> <int> <chr>      <chr>      <chr>   <chr>   <chr> <chr>  <dbl>   <dbl> #>  1   2020     1 00-0035752 23461354-… NA      Chris … QB    ARI     0.55       0 #>  2   2020    17 00-0035752 23461354-… NA      Chris … QB    ARI    11.9        1 #>  3   2020     1 00-0035228 dd5a6b6e-… NA      Kyler … QB    ARI    33.3        1 #>  4   2020     2 00-0035228 dd5a6b6e-… NA      Kyler … QB    ARI    39.1        1 #>  5   2020     3 00-0035228 dd5a6b6e-… NA      Kyler … QB    ARI    33.4        3 #>  6   2020     4 00-0035228 dd5a6b6e-… NA      Kyler … QB    ARI    34.6        0 #>  7   2020     5 00-0035228 dd5a6b6e-… NA      Kyler … QB    ARI    34.6        1 #>  8   2020     6 00-0035228 dd5a6b6e-… NA      Kyler … QB    ARI    36.2        0 #>  9   2020     7 00-0035228 dd5a6b6e-… NA      Kyler … QB    ARI    49.6        1 #> 10   2020     9 00-0035228 dd5a6b6e-… NA      Kyler … QB    ARI    51.7        0 #> # … with 5,382 more rows, 14 more variables: passing_2pt_conversions <dbl>, #> #   passing_first_downs <dbl>, passing_tds <dbl>, passing_yards <dbl>, #> #   receiving_2pt_conversions <dbl>, receiving_first_downs <dbl>, #> #   receiving_tds <dbl>, receiving_yards <dbl>, receptions <dbl>, #> #   rushing_2pt_conversions <dbl>, rushing_first_downs <dbl>, #> #   rushing_tds <dbl>, rushing_yards <dbl>, special_teams_tds <dbl>, and #> #   abbreviated variable names ¹​sportradar_id, ²​fleaflicker_id, ³​player_name, … # }  # \\donttest{ try({ # try only shown here because sometimes CRAN checks are weird   ssb_conn <- ff_connect(platform = \"mfl\", league_id = 54040, season = 2020)   ff_scoringhistory(ssb_conn, season = 2020) }) # end try #> # A tibble: 5,392 × 26 #>    season  week gsis_id    sportrada…¹ mfl_id playe…² pos   team  points inter…³ #>     <int> <int> <chr>      <chr>       <chr>  <chr>   <chr> <chr>  <dbl>   <dbl> #>  1   2020     1 00-0035752 23461354-f… 15060  Chris … QB    ARI      0.8       0 #>  2   2020    17 00-0035752 23461354-f… 15060  Chris … QB    ARI      7.9       1 #>  3   2020     1 00-0035228 dd5a6b6e-f… 14056  Kyler … QB    ARI     28.3       1 #>  4   2020     2 00-0035228 dd5a6b6e-f… 14056  Kyler … QB    ARI     33.6       1 #>  5   2020     3 00-0035228 dd5a6b6e-f… 14056  Kyler … QB    ARI     21.2       3 #>  6   2020     4 00-0035228 dd5a6b6e-f… 14056  Kyler … QB    ARI     30.6       0 #>  7   2020     5 00-0035228 dd5a6b6e-f… 14056  Kyler … QB    ARI     28.3       1 #>  8   2020     6 00-0035228 dd5a6b6e-f… 14056  Kyler … QB    ARI     35.9       0 #>  9   2020     7 00-0035228 dd5a6b6e-f… 14056  Kyler … QB    ARI     43.6       1 #> 10   2020     9 00-0035228 dd5a6b6e-f… 14056  Kyler … QB    ARI     46.9       0 #> # … with 5,382 more rows, 16 more variables: passing_2pt_conversions <dbl>, #> #   passing_tds <dbl>, passing_yards <dbl>, receiving_2pt_conversions <dbl>, #> #   receiving_fumbles_lost <dbl>, receiving_tds <dbl>, receiving_yards <dbl>, #> #   receptions <dbl>, rushing_2pt_conversions <dbl>, rushing_first_downs <dbl>, #> #   rushing_fumbles_lost <dbl>, rushing_tds <dbl>, rushing_yards <dbl>, #> #   sack_fumbles_lost <dbl>, special_teams_tds <dbl>, #> #   receiving_first_downs <dbl>, and abbreviated variable names … # }  # \\donttest{ try({ # try only shown here because sometimes CRAN checks are weird   conn <- ff_connect(platform = \"sleeper\", league_id = \"522458773317046272\", season = 2020)   ff_scoringhistory(conn, season = 2020) }) # end try #> # A tibble: 5,417 × 23 #>    season  week gsis_id    sportrad…¹ sleep…² playe…³ pos   team  points recei…⁴ #>     <int> <int> <chr>      <chr>      <chr>   <chr>   <chr> <chr>  <dbl>   <dbl> #>  1   2020    15 00-0034490 83849bc5-… 5161    Ezekie… LB    ARI      0         0 #>  2   2020     1 00-0035752 23461354-… 6778    Chris … QB    ARI      0.3       0 #>  3   2020    17 00-0035752 23461354-… 6778    Chris … QB    ARI      7.4       0 #>  4   2020     1 00-0035228 dd5a6b6e-… 5849    Kyler … QB    ARI     26.3       0 #>  5   2020     2 00-0035228 dd5a6b6e-… 5849    Kyler … QB    ARI     32.1       0 #>  6   2020     3 00-0035228 dd5a6b6e-… 5849    Kyler … QB    ARI     21.7       0 #>  7   2020     4 00-0035228 dd5a6b6e-… 5849    Kyler … QB    ARI     23.1       0 #>  8   2020     5 00-0035228 dd5a6b6e-… 5849    Kyler … QB    ARI     26.3       0 #>  9   2020     6 00-0035228 dd5a6b6e-… 5849    Kyler … QB    ARI     28.9       0 #> 10   2020     7 00-0035228 dd5a6b6e-… 5849    Kyler … QB    ARI     37.1       0 #> # … with 5,407 more rows, 13 more variables: rushing_fumbles_lost <dbl>, #> #   sack_fumbles_lost <dbl>, interceptions <dbl>, #> #   passing_2pt_conversions <dbl>, passing_tds <dbl>, passing_yards <dbl>, #> #   receiving_2pt_conversions <dbl>, receiving_tds <dbl>, #> #   receiving_yards <dbl>, receptions <dbl>, rushing_2pt_conversions <dbl>, #> #   rushing_tds <dbl>, rushing_yards <dbl>, and abbreviated variable names #> #   ¹​sportradar_id, ²​sleeper_id, ³​player_name, ⁴​receiving_fumbles_lost # }  # \\donttest{ try({ # try only shown here because sometimes CRAN checks are weird   template_conn <- ff_template(scoring_type = \"sfb11\", roster_type = \"sfb11\")   ff_scoringhistory(template_conn, season = 2020) }) # end try #> # A tibble: 5,392 × 26 #>    season  week gsis_id    sportrada…¹ mfl_id playe…² pos   team  points compl…³ #>     <int> <int> <chr>      <chr>       <chr>  <chr>   <chr> <chr>  <dbl>   <dbl> #>  1   2020     1 00-0035752 23461354-f… 15060  Chris … QB    ARI      0.8       0 #>  2   2020    17 00-0035752 23461354-f… 15060  Chris … QB    ARI     11.4      11 #>  3   2020     1 00-0035228 dd5a6b6e-f… 14056  Kyler … QB    ARI     39.3      26 #>  4   2020     2 00-0035228 dd5a6b6e-f… 14056  Kyler … QB    ARI     43.6      26 #>  5   2020     3 00-0035228 dd5a6b6e-f… 14056  Kyler … QB    ARI     31.7      23 #>  6   2020     4 00-0035228 dd5a6b6e-f… 14056  Kyler … QB    ARI     43.6      24 #>  7   2020     5 00-0035228 dd5a6b6e-f… 14056  Kyler … QB    ARI     40.8      27 #>  8   2020     6 00-0035228 dd5a6b6e-f… 14056  Kyler … QB    ARI     39.4       9 #>  9   2020     7 00-0035228 dd5a6b6e-f… 14056  Kyler … QB    ARI     60.6      34 #> 10   2020     9 00-0035228 dd5a6b6e-f… 14056  Kyler … QB    ARI     58.4      21 #> # … with 5,382 more rows, 16 more variables: interceptions <dbl>, #> #   passing_2pt_conversions <dbl>, passing_tds <dbl>, passing_yards <dbl>, #> #   receiving_2pt_conversions <dbl>, receiving_tds <dbl>, #> #   receiving_yards <dbl>, receptions <dbl>, rushing_2pt_conversions <dbl>, #> #   rushing_first_downs <dbl>, rushing_tds <dbl>, rushing_yards <dbl>, #> #   sacks <dbl>, special_teams_tds <dbl>, receiving_first_downs <dbl>, #> #   passing_first_downs <dbl>, and abbreviated variable names ¹​sportradar_id, … # }"},{"path":"https://ffscrapr.ffverse.com/reference/ff_standings.html","id":null,"dir":"Reference","previous_headings":"","what":"Get Standings — ff_standings","title":"Get Standings — ff_standings","text":"function returns tidy dataframe season-long fantasy team stats, including H2H wins well points, potential points, -play.","code":""},{"path":"https://ffscrapr.ffverse.com/reference/ff_standings.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get Standings — ff_standings","text":"","code":"ff_standings(conn, ...)  # S3 method for espn_conn ff_standings(conn, ...)  # S3 method for flea_conn ff_standings(conn, include_allplay = TRUE, include_potentialpoints = TRUE, ...)  # S3 method for mfl_conn ff_standings(conn, ...)  # S3 method for sleeper_conn ff_standings(conn, ...)"},{"path":"https://ffscrapr.ffverse.com/reference/ff_standings.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get Standings — ff_standings","text":"conn conn object created ff_connect() ... arguments passed methods (currently none) include_allplay TRUE/FALSE - return -play win pct calculation? defaults TRUE include_potentialpoints TRUE/FALSE - return potential points calculation? defaults TRUE.","code":""},{"path":"https://ffscrapr.ffverse.com/reference/ff_standings.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get Standings — ff_standings","text":"tidy dataframe standings data","code":""},{"path":"https://ffscrapr.ffverse.com/reference/ff_standings.html","id":"methods-by-class-","dir":"Reference","previous_headings":"","what":"Methods (by class)","title":"Get Standings — ff_standings","text":"espn_conn: ESPN: returns standings points data. flea_conn: Fleaflicker: returns H2H/points/-play/best-ball data table. mfl_conn: MFL: returns H2H/points/-play/best-ball data table. sleeper_conn: Sleeper: returns standings points data manually calculates allplay results.","code":""},{"path":"https://ffscrapr.ffverse.com/reference/ff_standings.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get Standings — ff_standings","text":"","code":"# \\donttest{ try({ # try only shown here because sometimes CRAN checks are weird   espn_conn <- espn_connect(season = 2020, league_id = 899513)   ff_standings(espn_conn) }) # end try #> # A tibble: 10 × 12 #>    franchise_id franch…¹ leagu…² h2h_w…³ h2h_l…⁴ h2h_t…⁵ h2h_w…⁶ point…⁷ point…⁸ #>           <int> <chr>      <int>   <int>   <int>   <int>   <dbl>   <dbl>   <dbl> #>  1            1 \"The Ea…       7       3       9       0   0.25    1313.   1587. #>  2            2 \"Coom  …       3       7       5       0   0.583   1561.   1608. #>  3            3 \"PAKI S…       6       4       8       0   0.333   1484.   1573. #>  4            4 \"I'm Al…       5       7       5       0   0.583   1448.   1495. #>  5            5 \"The Ju…       1       9       3       0   0.75    1620.   1472. #>  6            6 \"OBJ's …       4       8       4       0   0.667   1609.   1420. #>  7            7 \"Tony E…       9       5       7       0   0.417   1677.   1592. #>  8            8 \"Big Co…       8       6       6       0   0.5     1480.   1385. #>  9            9 \"RAFI C…       2       7       5       0   0.583   1562.   1521. #> 10           10 \"Austin…      10       4       8       0   0.333   1336.   1434. #> # … with 3 more variables: allplay_wins <dbl>, allplay_losses <dbl>, #> #   allplay_winpct <dbl>, and abbreviated variable names ¹​franchise_name, #> #   ²​league_rank, ³​h2h_wins, ⁴​h2h_losses, ⁵​h2h_ties, ⁶​h2h_winpct, ⁷​points_for, #> #   ⁸​points_against # }  # \\donttest{ try({ # try only shown here because sometimes CRAN checks are weird   conn <- fleaflicker_connect(season = 2020, league_id = 206154)   x <- ff_standings(conn) }) # end try # }  # \\donttest{ try({ # try only shown here because sometimes CRAN checks are weird   ssb_conn <- ff_connect(platform = \"mfl\", league_id = 54040, season = 2020)   ff_standings(ssb_conn) }) # end try #> Warning: NAs introduced by coercion #> # A tibble: 14 × 10 #>    franchise_id franch…¹ h2h_w…² h2h_wlt allpl…³ point…⁴ point…⁵ avg_p…⁶ avg_p…⁷ #>    <chr>        <chr>      <dbl> <chr>     <dbl>   <dbl>   <dbl>   <dbl>   <dbl> #>  1 0009         Team Li…   0.769 10-3-0    0.725   2063.   1862.    159.    143. #>  2 0010         Team Yo…   0.692 9-4-0     0.65    1956.   1706.    150.    131. #>  3 0014         Team Lu…   0.769 10-3-0    0.72    2086.   1882.    160.    145. #>  4 0003         Team Do…   0.462 6-7-0     0.615   1937.   1957.    149     151. #>  5 0006         Team Ki…   0.615 8-5-0     0.68    2138.   1864.    164.    143. #>  6 0011         Team Di…   0.615 8-5-0     0.56    1927.   1786.    148.    137. #>  7 0008         Team Bo…   0.538 7-6-0     0.462   1820.   1861.    140     143. #>  8 0007         Team Ki…   0.538 7-6-0     0.545   1829.   1800.    141.    138. #>  9 0002         Team Si…   0.462 6-7-0     0.328   1623.   1719.    125.    132. #> 10 0004         Team Ic…   0.385 5-8-0     0.495   1852.   1823.    142.    140. #> 11 0005         Team Dr…   0.385 5-8-0     0.368   1698.   1874.    131.    144. #> 12 0013         Team Ne…   0.231 3-10-0    0.26    1553.   1828.    119.    141. #> 13 0012         Team Me…   0.308 4-9-0     0.396   1708.   1865.    131.    144. #> 14 0001         Team Pi…   0.231 3-10-0    0.151   1459.   1821.    112.    140. #> # … with 1 more variable: faab_balance <dbl>, and abbreviated variable names #> #   ¹​franchise_name, ²​h2h_winpct, ³​allplay_winpct, ⁴​points_for, #> #   ⁵​points_against, ⁶​avg_points_for, ⁷​avg_points_against # }  # \\donttest{ try({ # try only shown here because sometimes CRAN checks are weird   jml_conn <- ff_connect(platform = \"sleeper\", league_id = \"522458773317046272\", season = 2020)   ff_standings(jml_conn) }) # end try #> # A tibble: 12 × 12 #>    franchise_id franch…¹ h2h_w…² h2h_l…³ h2h_t…⁴ h2h_w…⁵ point…⁶ point…⁷ poten…⁸ #>           <int> <chr>      <int>   <int>   <int>   <dbl>   <dbl>   <dbl>   <dbl> #>  1            1 Fake Ne…       8       5       0  0.615    1271.   1278.   1632. #>  2            2 KingGabe       1      12       0  0.0769    887.   1245.   1019. #>  3            3 solarpo…       8       5       0  0.615    1413.   1327.   1767. #>  4            4 The FAN…       8       5       0  0.615    1441.   1237.   1823. #>  5            5 Barbari…       6       7       0  0.462    1281.   1121.   1585. #>  6            6 sox05syd       8       5       0  0.615    1259.   1159.   1643. #>  7            7 Flipade…      10       3       0  0.769    1274.   1124.   1554. #>  8            8 Hocka F…       7       6       0  0.538    1186.   1281.   1558. #>  9            9 ZPMille…       4       9       0  0.308    1243.   1346.   1463. #> 10           10 JMLarkin       1      12       0  0.0769    871.   1289.   1106. #> 11           11 Permian…       8       5       0  0.615    1415.   1215.   1763. #> 12           12 jaydk          9       4       0  0.692    1396.   1314.   1763. #> # … with 3 more variables: allplay_wins <dbl>, allplay_losses <dbl>, #> #   allplay_winpct <dbl>, and abbreviated variable names ¹​franchise_name, #> #   ²​h2h_wins, ³​h2h_losses, ⁴​h2h_ties, ⁵​h2h_winpct, ⁶​points_for, #> #   ⁷​points_against, ⁸​potential_points # }"},{"path":"https://ffscrapr.ffverse.com/reference/ff_starter_positions.html","id":null,"dir":"Reference","previous_headings":"","what":"Get Starting Lineup Settings — ff_starter_positions","title":"Get Starting Lineup Settings — ff_starter_positions","text":"function returns tidy dataframe positional lineup rules.","code":""},{"path":"https://ffscrapr.ffverse.com/reference/ff_starter_positions.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get Starting Lineup Settings — ff_starter_positions","text":"","code":"ff_starter_positions(conn, ...)  # S3 method for espn_conn ff_starter_positions(conn, ...)  # S3 method for flea_conn ff_starter_positions(conn, ...)  # S3 method for mfl_conn ff_starter_positions(conn, ...)  # S3 method for sleeper_conn ff_starter_positions(conn, ...)  # S3 method for template_conn ff_starter_positions(conn, ...)"},{"path":"https://ffscrapr.ffverse.com/reference/ff_starter_positions.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get Starting Lineup Settings — ff_starter_positions","text":"conn list object created ff_connect() ... arguments (currently unused)","code":""},{"path":"https://ffscrapr.ffverse.com/reference/ff_starter_positions.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get Starting Lineup Settings — ff_starter_positions","text":"tidy dataframe positional lineup rules, one row per position minimum maximum starters well total starter calculations.","code":""},{"path":"https://ffscrapr.ffverse.com/reference/ff_starter_positions.html","id":"methods-by-class-","dir":"Reference","previous_headings":"","what":"Methods (by class)","title":"Get Starting Lineup Settings — ff_starter_positions","text":"espn_conn: ESPN: returns min/max starters main player position flea_conn: Fleaflicker: returns minimum maximum starters player position. mfl_conn: MFL: returns minimum maximum starters player position. sleeper_conn: Sleeper: returns minimum maximum starters player position. template_conn: Template: returns minimum maximum starters player position.","code":""},{"path":"https://ffscrapr.ffverse.com/reference/ff_starter_positions.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get Starting Lineup Settings — ff_starter_positions","text":"","code":"# \\donttest{ try({ # try only shown here because sometimes CRAN checks are weird   conn <- espn_connect(season = 2020, league_id = 1178049)   ff_starter_positions(conn) }) # end try #> # A tibble: 6 × 7 #>   pos     min   max offense_starters defense_starters kdst_starters total_star…¹ #>   <chr> <int> <int>            <int>            <int>         <int>        <int> #> 1 QB        1     1                7                0             2            9 #> 2 RB        2     4                7                0             2            9 #> 3 WR        3     5                7                0             2            9 #> 4 TE        1     3                7                0             2            9 #> 5 DST       1     1                7                0             2            9 #> 6 K         1     1                7                0             2            9 #> # … with abbreviated variable name ¹​total_starters # }  # \\donttest{ try({ # try only shown here because sometimes CRAN checks are weird   conn <- fleaflicker_connect(season = 2020, league_id = 206154)   ff_starter_positions(conn) }) # end try #> # A tibble: 10 × 7 #>    pos     min   max offense_starters defense_starters kdst_starters total_sta…¹ #>    <chr> <int> <int>            <int>            <int>         <int>       <int> #>  1 CB        2     4                7                8             1          16 #>  2 EDR       0     4                7                8             1          16 #>  3 IL        0     4                7                8             1          16 #>  4 K         1     1                7                8             1          16 #>  5 LB        2     4                7                8             1          16 #>  6 QB        1     1                7                8             1          16 #>  7 RB        2     3                7                8             1          16 #>  8 S         2     4                7                8             1          16 #>  9 TE        1     2                7                8             1          16 #> 10 WR        2     3                7                8             1          16 #> # … with abbreviated variable name ¹​total_starters # }  # \\donttest{ try({ # try only shown here because sometimes CRAN checks are weird   dlfidp_conn <- mfl_connect(2020, league_id = 33158)   ff_starter_positions(conn = dlfidp_conn) }) # end try #> # A tibble: 9 × 7 #>   pos     min   max offense_starters defense_starters kdst_starters total_star…¹ #>   <chr> <int> <int>            <dbl>            <dbl>         <int>        <int> #> 1 CB        2     4                8               10             0           18 #> 2 DE        2     4                8               10             0           18 #> 3 DT        1     3                8               10             0           18 #> 4 LB        2     4                8               10             0           18 #> 5 QB        1     1                8               10             0           18 #> 6 RB        1     6                8               10             0           18 #> 7 S         1     3                8               10             0           18 #> 8 TE        0     5                8               10             0           18 #> 9 WR        1     6                8               10             0           18 #> # … with abbreviated variable name ¹​total_starters # }  # \\donttest{ try({ # try only shown here because sometimes CRAN checks are weird   jml_conn <- sleeper_connect(league_id = \"652718526494253056\", season = 2021)   ff_starter_positions(jml_conn) }) # end try #> # A tibble: 4 × 6 #>   pos     min   max offense_starters defense_starters total_starters #>   <chr> <int> <int>            <int>            <int>          <int> #> 1 QB        1     1                9                0              9 #> 2 RB        2     5                9                0              9 #> 3 WR        2     5                9                0              9 #> 4 TE        1     4                9                0              9 # }  # \\donttest{ template_conn <- ff_template(roster_type = \"idp\") ff_starter_positions(template_conn) #> # A tibble: 9 × 7 #>   pos     min   max offense_starters defense_starters kdst_starters total_star…¹ #>   <chr> <dbl> <dbl>            <dbl>            <dbl>         <dbl>        <dbl> #> 1 QB        1     2               10               10             0           20 #> 2 RB        2     5               10               10             0           20 #> 3 WR        3     6               10               10             0           20 #> 4 TE        1     4               10               10             0           20 #> 5 DT        1     3               10               10             0           20 #> 6 DE        2     4               10               10             0           20 #> 7 LB        2     4               10               10             0           20 #> 8 CB        2     4               10               10             0           20 #> 9 S         1     3               10               10             0           20 #> # … with abbreviated variable name ¹​total_starters # }"},{"path":"https://ffscrapr.ffverse.com/reference/ff_starters.html","id":null,"dir":"Reference","previous_headings":"","what":"Get Starting Lineups — ff_starters","title":"Get Starting Lineups — ff_starters","text":"function returns tidy dataframe one row every starter (bench) every week scoring, available.","code":""},{"path":"https://ffscrapr.ffverse.com/reference/ff_starters.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get Starting Lineups — ff_starters","text":"","code":"ff_starters(conn, ...)  # S3 method for espn_conn ff_starters(conn, weeks = 1:17, ...)  # S3 method for flea_conn ff_starters(conn, week = 1:17, ...)  # S3 method for mfl_conn ff_starters(conn, week = 1:17, season = NULL, ...)  # S3 method for sleeper_conn ff_starters(conn, week = 1:17, ...)"},{"path":"https://ffscrapr.ffverse.com/reference/ff_starters.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get Starting Lineups — ff_starters","text":"conn list object created ff_connect() ... arguments (currently unused) weeks weeks calculate, number numeric vector week numeric one YTD (year--date) AVG (average date) season season interest - generally recent 2-3 seasons available","code":""},{"path":"https://ffscrapr.ffverse.com/reference/ff_starters.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get Starting Lineups — ff_starters","text":"tidy dataframe every player every week, including flag whether started ","code":""},{"path":"https://ffscrapr.ffverse.com/reference/ff_starters.html","id":"methods-by-class-","dir":"Reference","previous_headings":"","what":"Methods (by class)","title":"Get Starting Lineups — ff_starters","text":"espn_conn: ESPN: returns started well scored. flea_conn: Fleaflicker: returns started well scored. mfl_conn: MFL: returns player fantasy scores week (actual stats) sleeper_conn: Sleeper: returns \"\" started, without scoring/stats data. returns season specified initial connection object.","code":""},{"path":"https://ffscrapr.ffverse.com/reference/ff_starters.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get Starting Lineups — ff_starters","text":"","code":"# \\donttest{ try({ # try only shown here because sometimes CRAN checks are weird   conn <- espn_connect(season = 2020, league_id = 1178049)   ff_starters(conn, weeks = 1:3) }) # end try #> # A tibble: 714 × 12 #>     week franchi…¹ franc…² franc…³ lineu…⁴ playe…⁵ proje…⁶ playe…⁷ playe…⁸ pos   #>    <int>     <int> <chr>     <dbl> <chr>     <dbl>   <dbl>   <int> <chr>   <chr> #>  1     1         1 Rushin…     118 QB         27.5    22.5 3916387 Lamar … QB    #>  2     1         1 Rushin…     118 RB          9.2    13.6 3068267 Austin… RB    #>  3     1         1 Rushin…     118 RB          6.7     8   3060022 Jordan… RB    #>  4     1         1 Rushin…     118 WR         13.1    14.3 3116406 Tyreek… WR    #>  5     1         1 Rushin…     118 WR          8.6    10.7 3121422 Terry … WR    #>  6     1         1 Rushin…     118 WR         12.6     9.8 4241372 Marqui… WR    #>  7     1         1 Rushin…     118 TE         16.6     8   4036131 Noah F… TE    #>  8     1         1 Rushin…     118 DST         0       5.2  -16006 Cowboy… DST   #>  9     1         1 Rushin…     118 K           9       7.4 2473037 Jason … K     #> 10     1         1 Rushin…     118 BE          4.8     6.3   15920 Latavi… RB    #> # … with 704 more rows, 2 more variables: team <chr>, #> #   eligible_lineup_slots <list>, and abbreviated variable names ¹​franchise_id, #> #   ²​franchise_name, ³​franchise_score, ⁴​lineup_slot, ⁵​player_score, #> #   ⁶​projected_score, ⁷​player_id, ⁸​player_name # }  # \\donttest{ try({ # try only shown here because sometimes CRAN checks are weird   conn <- fleaflicker_connect(season = 2020, league_id = 206154)   ff_starters(conn) }) # end try # }  # \\donttest{ try({ # try only shown here because sometimes CRAN checks are weird   dlf_conn <- mfl_connect(2020, league_id = 37920)   ff_starters(conn = dlf_conn) }) # end try #> # A tibble: 6,371 × 11 #>    franchis…¹ franc…² season  week start…³ shoul…⁴ playe…⁵ playe…⁶ playe…⁷ pos   #>    <chr>      <chr>    <dbl> <int> <chr>     <dbl>   <dbl> <chr>   <chr>   <chr> #>  1 0013       Advanc…   2020     1 starter       1    30.3 14056   Murray… QB    #>  2 0013       Advanc…   2020     1 starter       1    21.7 13132   Kamara… RB    #>  3 0013       Advanc…   2020     1 starter       1    27.1 12447   Moster… RB    #>  4 0013       Advanc…   2020     1 starter       1    13   13668   Chark,… WR    #>  5 0013       Advanc…   2020     1 starter       1     9.6 14833   Jeudy,… WR    #>  6 0013       Advanc…   2020     1 starter       1    13.4 14280   Miller… WR    #>  7 0013       Advanc…   2020     1 starter       1     9.7 12176   Parker… WR    #>  8 0013       Advanc…   2020     1 starter       1     9.3 13680   Hurst,… TE    #>  9 0013       Advanc…   2020     1 starter       1    18.7 11647   Thomas… TE    #> 10 0013       Advanc…   2020     1 nonsta…       0     8.1 13131   Mixon,… RB    #> # … with 6,361 more rows, 1 more variable: team <chr>, and abbreviated variable #> #   names ¹​franchise_id, ²​franchise_name, ³​starter_status, ⁴​should_start, #> #   ⁵​player_score, ⁶​player_id, ⁷​player_name # }  # \\donttest{ try({ # try only shown here because sometimes CRAN checks are weird   jml_conn <- sleeper_connect(league_id = \"522458773317046272\", season = 2020)   ff_starters(jml_conn, week = 3) }) # end try #> # A tibble: 344 × 8 #>    franchise_id franchise_name  week starter_status player…¹ playe…² pos   team  #>           <int> <chr>          <dbl> <chr>          <chr>    <chr>   <chr> <chr> #>  1            1 Fake News          3 nonstarter     7082     Dalton… TE    NA    #>  2            1 Fake News          3 nonstarter     6826     Cole K… TE    CHI   #>  3            1 Fake News          3 nonstarter     6804     Jordan… QB    GB    #>  4            1 Fake News          3 nonstarter     676      LeSean… RB    NA    #>  5            1 Fake News          3 nonstarter     6149     Darius… WR    NYG   #>  6            1 Fake News          3 nonstarter     6068     Devine… RB    DEN   #>  7            1 Fake News          3 nonstarter     6001     Drew S… TE    CIN   #>  8            1 Fake News          3 nonstarter     5965     Miles … WR    PIT   #>  9            1 Fake News          3 nonstarter     5068     Kerryo… RB    NA    #> 10            1 Fake News          3 nonstarter     5022     Dallas… TE    PHI   #> # … with 334 more rows, and abbreviated variable names ¹​player_id, ²​player_name # }"},{"path":"https://ffscrapr.ffverse.com/reference/ff_template.html","id":null,"dir":"Reference","previous_headings":"","what":"Default conn objects — ff_template","title":"Default conn objects — ff_template","text":"function creates connection league templates, can used instead real conn object following functions: ff_scoring(), ff_scoringhistory(), ff_starterpositions().","code":""},{"path":"https://ffscrapr.ffverse.com/reference/ff_template.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Default conn objects — ff_template","text":"","code":"ff_template(   scoring_type = c(\"ppr\", \"half_ppr\", \"zero_ppr\", \"sfb11\"),   roster_type = c(\"1qb\", \"superflex\", \"sfb11\", \"idp\") )"},{"path":"https://ffscrapr.ffverse.com/reference/ff_template.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Default conn objects — ff_template","text":"scoring_type One c(\"default\", \"ppr\", \"half_ppr\", \"zero_ppr\", \"te_prem\", \"sfb11\") roster_type One c(\"1qb\", \"superflex\",\"sfb11\", \"idp\")","code":""},{"path":"https://ffscrapr.ffverse.com/reference/ff_template.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Default conn objects — ff_template","text":"connection object can used ff_scoring(), ff_scoringhistory(), ff_starterpositions()","code":""},{"path":"https://ffscrapr.ffverse.com/reference/ff_template.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Default conn objects — ff_template","text":"Scoring types defined : ppr: 6 pt passing/rushing/receiving touchdowns, 0.1 rushing/receiving yards, 1 point per reception, -2 fumbles/interceptions half_ppr: ppr 0.5 points per reception zero_ppr: ppr 0 points per reception te_prem: ppr TEs get 1.5 points per reception sfb11: scoring defined https://scottfishbowl.com/2021/rules.php Roster settings defined : 1qb:  Starts 1 QB, 2 RB, 3 WR, 1 TE, 2 FLEX superflex: Starts 1 QB, 2 RB, 3 WR, 1 TE, 2 FLEX, 1 SUPERFLEX sfb11: Starts 1 QB, 2 RB, 3 WR, 1 TE, 3 FLEX, 1 SUPERFLEX (flex positions can also start kicker) idp: Starts 1QB also starts 3 DL, 3 LB, 3 DB, two IDP FLEX","code":""},{"path":"https://ffscrapr.ffverse.com/reference/ff_transactions.html","id":null,"dir":"Reference","previous_headings":"","what":"Get League Transactions — ff_transactions","title":"Get League Transactions — ff_transactions","text":"function returns tidy dataframe transactions - generally one row per player per transaction per team. trade represented twice, per team.","code":""},{"path":"https://ffscrapr.ffverse.com/reference/ff_transactions.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get League Transactions — ff_transactions","text":"","code":"ff_transactions(conn, ...)  # S3 method for espn_conn ff_transactions(conn, limit = 1000, ...)  # S3 method for flea_conn ff_transactions(conn, franchise_id = NULL, ...)  # S3 method for mfl_conn ff_transactions(conn, transaction_type = \"*\", ...)  # S3 method for sleeper_conn ff_transactions(conn, week = 1:17, ...)"},{"path":"https://ffscrapr.ffverse.com/reference/ff_transactions.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get League Transactions — ff_transactions","text":"conn list object created ff_connect() ... additional args methods limit number recent transactions return franchise_id fleaflicker returns transactions grouped franchise id, pass list filter transaction_type parameter return transactions specified type. Types : WAIVER, BBID_WAIVER, FREE_AGENT, TRADE, IR, TAXI, AUCTION_INIT, AUCTION_BID, AUCTION_WON, * . Can also pass comma-separated string.  Defaults *. Note types listed actually cleaned processed ffscrapr - need make custom api request mfl_getendpoint() receive things. week week filter transactions - 1 returns offseason transactions. Default 1:17 returns transactions.","code":""},{"path":"https://ffscrapr.ffverse.com/reference/ff_transactions.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get League Transactions — ff_transactions","text":"tidy dataframe transaction data","code":""},{"path":"https://ffscrapr.ffverse.com/reference/ff_transactions.html","id":"methods-by-class-","dir":"Reference","previous_headings":"","what":"Methods (by class)","title":"Get League Transactions — ff_transactions","text":"espn_conn: ESPN: returns adds, drops, trades. Requires private/auth-cookie. flea_conn: Fleaflicker: returns transactions, including free agents, waivers, trades. mfl_conn: MFL: returns transactions, including auction, free agents, IR, TS, waivers, trades. sleeper_conn: Sleeper: returns transactions, including free agents, waivers, trades.","code":""},{"path":"https://ffscrapr.ffverse.com/reference/ff_transactions.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get League Transactions — ff_transactions","text":"","code":"if (FALSE) { # Marked as don't run because this endpoint requires private authentication  conn <- espn_connect(   season = 2020,   league_id = 1178049,   swid = Sys.getenv(\"TAN_SWID\"),   espn_s2 = Sys.getenv(\"TAN_ESPN_S2\") ) ff_transactions(conn) }  # \\donttest{ try({ # try only shown here because sometimes CRAN checks are weird   conn <- fleaflicker_connect(season = 2020, league_id = 312861)   ff_transactions(conn) }) # end try #> # A tibble: 494 × 12 #>    timestamp           type  type_…¹ franc…² franc…³ playe…⁴ playe…⁵ pos   team  #>    <dttm>              <chr> <chr>     <int> <chr>   <glue>  <glue>  <chr> <chr> #>  1 2022-04-30 02:20:15 free… dropped 1582423 The Ve… 12934   Kareem… RB    CLE   #>  2 2022-04-30 02:18:46 free… dropped 1582423 The Ve… 12906   Evan E… TE    JAC   #>  3 2022-04-30 02:18:33 free… dropped 1582423 The Ve… 7378    Cam Ne… QB    FA    #>  4 2022-04-30 02:18:24 free… dropped 1582423 The Ve… 6660    Antoni… WR    FA    #>  5 2022-01-01 11:00:00 free… dropped 1581720 brosen… 5479    Josh J… QB    SF    #>  6 2022-01-01 11:00:00 waiv… added   1581720 brosen… 11245   Sean M… QB    SEA   #>  7 2021-12-30 11:00:00 free… dropped 1581720 brosen… 12223   Rashar… WR    CAR   #>  8 2021-12-30 11:00:00 free… dropped 1581720 brosen… 10449   Garret… QB    NE    #>  9 2021-12-30 11:00:00 waiv… added   1581720 brosen… 11300   Brett … QB    BAL   #> 10 2021-12-30 11:00:00 waiv… added   1581720 brosen… 16404   Sam Eh… QB    IND   #> # … with 484 more rows, 3 more variables: trade_partner_id <int>, #> #   trade_partner_name <chr>, trade_id <int>, and abbreviated variable names #> #   ¹​type_desc, ²​franchise_id, ³​franchise_name, ⁴​player_id, ⁵​player_name # }  # \\donttest{ try({ # try only shown here because sometimes CRAN checks are weird   dlf_conn <- mfl_connect(2019, league_id = 37920)   ff_transactions(dlf_conn) }) # end try #> # A tibble: 1,146 × 12 #>    timestamp           type  type_…¹ franc…² franc…³ playe…⁴ playe…⁵ pos   team  #>    <dttm>              <chr> <chr>   <chr>   <chr>   <chr>   <chr>   <chr> <chr> #>  1 2019-12-19 11:56:49 FREE… added   0003    Electr… 13868   Boone,… RB    MIN   #>  2 2019-12-19 11:56:49 FREE… dropped 0003    Electr… 13387   Johnso… WR    IND   #>  3 2019-12-19 03:03:13 FREE… added   0019    Advanc… 12857   Washin… RB    OAK   #>  4 2019-12-19 03:03:13 FREE… dropped 0019    Advanc… 11186   Thomps… RB    WAS   #>  5 2019-12-19 03:02:26 FREE… added   0019    Advanc… 13868   Boone,… RB    MIN   #>  6 2019-12-19 03:02:26 FREE… dropped 0019    Advanc… 14305   Johnso… WR    MIN   #>  7 2019-12-15 17:28:15 FREE… added   0003    Electr… 12197   Perrim… WR    TBB   #>  8 2019-12-15 17:27:28 FREE… dropped 0003    Electr… 12623   Driske… QB    DET   #>  9 2019-12-15 17:27:00 FREE… added   0003    Electr… 13387   Johnso… WR    IND   #> 10 2019-12-15 17:26:27 IR    deacti… 0003    Electr… 14138   Hocken… TE    DET   #> # … with 1,136 more rows, 3 more variables: bbid_spent <dbl>, #> #   trade_partner <chr>, comments <chr>, and abbreviated variable names #> #   ¹​type_desc, ²​franchise_id, ³​franchise_name, ⁴​player_id, ⁵​player_name # } # \\donttest{ try({ # try only shown here because sometimes CRAN checks are weird   jml_conn <- ff_connect(platform = \"sleeper\", league_id = \"522458773317046272\", season = 2020)   ff_transactions(jml_conn, week = 1:2) }) # end try #> # A tibble: 661 × 13 #>    timestamp           type  type_…¹ franc…² franc…³ playe…⁴ playe…⁵ pos   team  #>    <dttm>              <chr> <chr>   <chr>   <chr>   <chr>   <chr>   <chr> <chr> #>  1 2020-09-23 08:04:23 waiv… added   5       Barbar… 5162    Reggie… RB    NA    #>  2 2020-09-23 08:04:23 waiv… dropped 5       Barbar… 6074    Donald… TE    LAC   #>  3 2020-09-23 08:04:23 waiv… added   3       solarp… 4054    Mo Ali… TE    IND   #>  4 2020-09-23 08:04:23 waiv… added   3       solarp… 2431    Mike D… RB    NA    #>  5 2020-09-23 08:04:23 waiv… added   4       The FA… 5001    Dalton… TE    DAL   #>  6 2020-09-23 08:04:23 waiv… dropped 4       The FA… 4994    Kalen … RB    NA    #>  7 2020-09-23 08:04:23 waiv… added   4       The FA… 2431    Mike D… RB    NA    #>  8 2020-09-23 08:04:23 waiv… dropped 4       The FA… 4994    Kalen … RB    NA    #>  9 2020-09-23 08:04:23 waiv… added   6       sox05s… 6001    Drew S… TE    CIN   #> 10 2020-09-23 08:04:23 waiv… dropped 6       sox05s… 827     Tyrod … QB    NYG   #> # … with 651 more rows, 4 more variables: bbid_amount <int>, #> #   trade_partner <chr>, waiver_priority <int>, comment <chr>, and abbreviated #> #   variable names ¹​type_desc, ²​franchise_id, ³​franchise_name, ⁴​player_id, #> #   ⁵​player_name # }"},{"path":"https://ffscrapr.ffverse.com/reference/ff_userleagues.html","id":null,"dir":"Reference","previous_headings":"","what":"Get User Leagues — ff_userleagues","title":"Get User Leagues — ff_userleagues","text":"function returns tidy dataframe one row every league user . requries authentication cookies MFL usage.","code":""},{"path":"https://ffscrapr.ffverse.com/reference/ff_userleagues.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get User Leagues — ff_userleagues","text":"","code":"ff_userleagues(conn, ...)  # S3 method for espn_conn ff_userleagues(conn = NULL, ...)  # S3 method for flea_conn ff_userleagues(conn = NULL, user_email = NULL, season = NULL, ...)  # S3 method for mfl_conn ff_userleagues(conn, season = NULL, ...)  # S3 method for sleeper_conn ff_userleagues(conn = NULL, user_name = NULL, season = NULL, ...)"},{"path":"https://ffscrapr.ffverse.com/reference/ff_userleagues.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get User Leagues — ff_userleagues","text":"conn connection object created ff_connect() ... arguments may passed methods (method consistency) user_email username look - defaults user created conn available season season look leagues user_name username look - defaults user created conn available","code":""},{"path":"https://ffscrapr.ffverse.com/reference/ff_userleagues.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get User Leagues — ff_userleagues","text":"tidy dataframe one row every league user ","code":""},{"path":"https://ffscrapr.ffverse.com/reference/ff_userleagues.html","id":"methods-by-class-","dir":"Reference","previous_headings":"","what":"Methods (by class)","title":"Get User Leagues — ff_userleagues","text":"espn_conn: ESPN: support lookup user leagues email user ID time. flea_conn: flea: returns listing leagues given user_email mfl_conn: MFL: username/password, return list user leagues. sleeper_conn: Sleeper: returns listing leagues given user_id user_name","code":""},{"path":[]},{"path":"https://ffscrapr.ffverse.com/reference/ffscrapr-package.html","id":null,"dir":"Reference","previous_headings":"","what":"ffscrapr: API Client for Fantasy Football League Platforms — ffscrapr-package","title":"ffscrapr: API Client for Fantasy Football League Platforms — ffscrapr-package","text":"Helps access various Fantasy Football APIs handling authentication rate-limiting, forming appropriate calls, returning tidy dataframes can easily connected data sources.","code":""},{"path":[]},{"path":"https://ffscrapr.ffverse.com/reference/ffscrapr-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"ffscrapr: API Client for Fantasy Football League Platforms — ffscrapr-package","text":"Maintainer: Tan Ho tan@tanho.ca contributors: Tony ElHabr anthonyelhabr@gmail.com [contributor] Joe Sydlowski syd235@gmail.com [contributor]","code":""},{"path":"https://ffscrapr.ffverse.com/reference/fleaflicker_connect.html","id":null,"dir":"Reference","previous_headings":"","what":"Connect to Fleaflicker League — fleaflicker_connect","title":"Connect to Fleaflicker League — fleaflicker_connect","text":"function creates connection object stores parameters user ID available.","code":""},{"path":"https://ffscrapr.ffverse.com/reference/fleaflicker_connect.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Connect to Fleaflicker League — fleaflicker_connect","text":"","code":"fleaflicker_connect(   season = NULL,   league_id = NULL,   user_email = NULL,   user_agent = NULL,   rate_limit = TRUE,   rate_limit_number = NULL,   rate_limit_seconds = NULL,   ... )"},{"path":"https://ffscrapr.ffverse.com/reference/fleaflicker_connect.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Connect to Fleaflicker League — fleaflicker_connect","text":"season Season access Fleaflicker - missing, guess based system date (current year March later, otherwise previous year) league_id League ID user_email Optional - attempts get user's user ID email user_agent User agent self-identify (optional) rate_limit TRUE default - turn rate limiting FALSE rate_limit_number number calls per rate_limit_seconds, suggested 1000 calls per 60 seconds rate_limit_seconds number seconds denominator rate_limit ... arguments (methods, R compat)","code":""},{"path":"https://ffscrapr.ffverse.com/reference/fleaflicker_connect.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Connect to Fleaflicker League — fleaflicker_connect","text":"list stores Fleaflicker connection objects","code":""},{"path":"https://ffscrapr.ffverse.com/reference/fleaflicker_getendpoint.html","id":null,"dir":"Reference","previous_headings":"","what":"GET any Fleaflicker endpoint — fleaflicker_getendpoint","title":"GET any Fleaflicker endpoint — fleaflicker_getendpoint","text":"endpoint names HTTP parameters (.e. argument names) CASE SENSITIVE passed exactly displayed Fleaflicker API reference page.","code":""},{"path":"https://ffscrapr.ffverse.com/reference/fleaflicker_getendpoint.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"GET any Fleaflicker endpoint — fleaflicker_getendpoint","text":"","code":"fleaflicker_getendpoint(endpoint, ...)"},{"path":"https://ffscrapr.ffverse.com/reference/fleaflicker_getendpoint.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"GET any Fleaflicker endpoint — fleaflicker_getendpoint","text":"endpoint string defining endpoint return API ... Arguments passed \"argumentname = argument\" HTTP query parameter","code":""},{"path":"https://ffscrapr.ffverse.com/reference/fleaflicker_getendpoint.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"GET any Fleaflicker endpoint — fleaflicker_getendpoint","text":"list object containing query, response, parsed content.","code":""},{"path":"https://ffscrapr.ffverse.com/reference/fleaflicker_getendpoint.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"GET any Fleaflicker endpoint — fleaflicker_getendpoint","text":"Check vignette details example usage.","code":""},{"path":[]},{"path":"https://ffscrapr.ffverse.com/reference/fleaflicker_players.html","id":null,"dir":"Reference","previous_headings":"","what":"Fleaflicker players library — fleaflicker_players","title":"Fleaflicker players library — fleaflicker_players","text":"cached table Fleaflicker NFL players. store memory session! (via memoise zzz.R)","code":""},{"path":"https://ffscrapr.ffverse.com/reference/fleaflicker_players.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Fleaflicker players library — fleaflicker_players","text":"","code":"fleaflicker_players(conn, page_limit = NULL)"},{"path":"https://ffscrapr.ffverse.com/reference/fleaflicker_players.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Fleaflicker players library — fleaflicker_players","text":"conn conn object created ff_connect() page_limit number limiting number players return, NULL (default) returns ","code":""},{"path":"https://ffscrapr.ffverse.com/reference/fleaflicker_players.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Fleaflicker players library — fleaflicker_players","text":"dataframe containing ~7000+ players Fleaflicker database","code":""},{"path":"https://ffscrapr.ffverse.com/reference/fleaflicker_players.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Fleaflicker players library — fleaflicker_players","text":"","code":"# \\donttest{ try({ # try only shown here because sometimes CRAN checks are weird   conn <- fleaflicker_connect(2020, 312861)   player_list <- fleaflicker_players(conn, page_limit = 2) }) # end try # }"},{"path":"https://ffscrapr.ffverse.com/reference/fleaflicker_userleagues.html","id":null,"dir":"Reference","previous_headings":"","what":"Fleaflicker - Get User Leagues — fleaflicker_userleagues","title":"Fleaflicker - Get User Leagues — fleaflicker_userleagues","text":"function returns leagues specific user . variant can used without first creating connection object.","code":""},{"path":"https://ffscrapr.ffverse.com/reference/fleaflicker_userleagues.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Fleaflicker - Get User Leagues — fleaflicker_userleagues","text":"","code":"fleaflicker_userleagues(user_email, season = NULL)"},{"path":"https://ffscrapr.ffverse.com/reference/fleaflicker_userleagues.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Fleaflicker - Get User Leagues — fleaflicker_userleagues","text":"user_email username look season season return leagues - defaults current year based heuristics","code":""},{"path":"https://ffscrapr.ffverse.com/reference/fleaflicker_userleagues.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Fleaflicker - Get User Leagues — fleaflicker_userleagues","text":"dataframe leagues specified user","code":""},{"path":[]},{"path":"https://ffscrapr.ffverse.com/reference/mfl_allrules.html","id":null,"dir":"Reference","previous_headings":"","what":"MFL rules library - memoised via zzz.R — mfl_allrules","title":"MFL rules library - memoised via zzz.R — mfl_allrules","text":"MFL rules library - memoised via zzz.R","code":""},{"path":"https://ffscrapr.ffverse.com/reference/mfl_allrules.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"MFL rules library - memoised via zzz.R — mfl_allrules","text":"","code":"mfl_allrules(conn)"},{"path":"https://ffscrapr.ffverse.com/reference/mfl_connect.html","id":null,"dir":"Reference","previous_headings":"","what":"Connect to MFL League — mfl_connect","title":"Connect to MFL League — mfl_connect","text":"function creates connection object stores parameters gets login-cookie available","code":""},{"path":"https://ffscrapr.ffverse.com/reference/mfl_connect.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Connect to MFL League — mfl_connect","text":"","code":"mfl_connect(   season = NULL,   league_id = NULL,   APIKEY = NULL,   user_name = NULL,   password = NULL,   user_agent = NULL,   rate_limit = TRUE,   rate_limit_number = NULL,   rate_limit_seconds = NULL,   ... )"},{"path":"https://ffscrapr.ffverse.com/reference/mfl_connect.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Connect to MFL League — mfl_connect","text":"season Season access MFL - missing, guess based system date (current year March later, otherwise previous year) league_id league_id Numeric ID parameter league, typically found URL APIKEY APIKEY - optional - allows access private leagues. Key unique league accessible Developer's API page (currently assuming one league time) user_name MFL user_name - optional - supplied conjunction password, attempt retrieve authentication token password MFL password - optional - supplied conjunction user_name, attempt retrieve authentication token user_agent string representing user agent used identify calls - may find improved rate_limits verified token rate_limit TRUE default, pass FALSE turn rate limiting rate_limit_number number calls per rate_limit_seconds, suggested 60 calls per 60 seconds rate_limit_seconds number seconds denominator rate_limit ... silently swallows unused arguments","code":""},{"path":"https://ffscrapr.ffverse.com/reference/mfl_connect.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Connect to MFL League — mfl_connect","text":"connection object used ff_* functions","code":""},{"path":"https://ffscrapr.ffverse.com/reference/mfl_connect.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Connect to MFL League — mfl_connect","text":"","code":"# \\donttest{ mfl_connect(season = 2020, league_id = 54040) #> <MFL connection 2020_54040> #> List of 5 #>  $ platform   : chr \"MFL\" #>  $ season     : num 2020 #>  $ league_id  : chr \"54040\" #>  $ APIKEY     : NULL #>  $ auth_cookie: NULL #>  - attr(*, \"class\")= chr \"mfl_conn\" mfl_connect(season = 2019, league_id = 54040, rate_limit = FALSE) #> <MFL connection 2019_54040> #> List of 5 #>  $ platform   : chr \"MFL\" #>  $ season     : num 2019 #>  $ league_id  : chr \"54040\" #>  $ APIKEY     : NULL #>  $ auth_cookie: NULL #>  - attr(*, \"class\")= chr \"mfl_conn\" # }"},{"path":"https://ffscrapr.ffverse.com/reference/mfl_getendpoint.html","id":null,"dir":"Reference","previous_headings":"","what":"GET any MFL endpoint — mfl_getendpoint","title":"GET any MFL endpoint — mfl_getendpoint","text":"Create GET request MFL export endpoint.","code":""},{"path":"https://ffscrapr.ffverse.com/reference/mfl_getendpoint.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"GET any MFL endpoint — mfl_getendpoint","text":"","code":"mfl_getendpoint(conn, endpoint, ...)"},{"path":"https://ffscrapr.ffverse.com/reference/mfl_getendpoint.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"GET any MFL endpoint — mfl_getendpoint","text":"conn list object created mfl_connect() endpoint string defining endpoint return API ... Arguments passed \"argumentname = argument\" HTTP query parameter","code":""},{"path":"https://ffscrapr.ffverse.com/reference/mfl_getendpoint.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"GET any MFL endpoint — mfl_getendpoint","text":"list object containing query, response, parsed content.","code":""},{"path":"https://ffscrapr.ffverse.com/reference/mfl_getendpoint.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"GET any MFL endpoint — mfl_getendpoint","text":"function read connection object automatically pass rate-limiting, league ID (L), authentication cookie, /API key (APIKEY) configured connection object. endpoint names HTTP parameters (.e. argument names) CASE SENSITIVE passed exactly displayed MFL API reference page. Check vignette details example usage.","code":""},{"path":[]},{"path":"https://ffscrapr.ffverse.com/reference/mfl_players.html","id":null,"dir":"Reference","previous_headings":"","what":"MFL players library — mfl_players","title":"MFL players library — mfl_players","text":"cached table MFL players. store memory session! (via memoise zzz.R)","code":""},{"path":"https://ffscrapr.ffverse.com/reference/mfl_players.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"MFL players library — mfl_players","text":"","code":"mfl_players(conn = NULL)"},{"path":"https://ffscrapr.ffverse.com/reference/mfl_players.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"MFL players library — mfl_players","text":"conn optionally, pass conn object generated ff_connect receive league-specific custom players","code":""},{"path":"https://ffscrapr.ffverse.com/reference/mfl_players.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"MFL players library — mfl_players","text":"dataframe containing ~2000+ players MFL database","code":""},{"path":"https://ffscrapr.ffverse.com/reference/mfl_players.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"MFL players library — mfl_players","text":"","code":"# \\donttest{ try({ # try only shown here because sometimes CRAN checks are weird   player_list <- mfl_players()   dplyr::sample_n(player_list, 5) }) # end try #> # A tibble: 5 × 25 #>   player_id player_name pos     age team  status draft…¹ draft…² draft…³ draft…⁴ #>   <chr>     <chr>       <chr> <dbl> <chr> <chr>  <chr>   <chr>   <chr>   <chr>   #> 1 13148     Ogunbowale… RB     28.6 HOU   NA     2017    FA      NA      NA      #> 2 15825     Beavers, D… LB     23.4 NYG   R      2022    NYG     6       3       #> 3 12443     Kumerow, J… WR     30.8 BUF   NA     2017    FA      NA      NA      #> 4 14823     Dowdle, Ri… RB     24.5 DAL   NA     2020    FA      NA      NA      #> 5 0772      Lions, Det… TMPN   NA   DET   NA     1970    DET     NA      NA      #> # … with 15 more variables: stats_global_id <chr>, stats_id <chr>, #> #   cbs_id <chr>, fleaflicker_id <chr>, sportsdata_id <chr>, #> #   rotoworld_id <chr>, rotowire_id <chr>, espn_id <chr>, nfl_id <chr>, #> #   twitter_username <chr>, college <chr>, height <chr>, weight <chr>, #> #   birthdate <date>, jersey <chr>, and abbreviated variable names ¹​draft_year, #> #   ²​draft_team, ³​draft_round, ⁴​draft_pick # }"},{"path":"https://ffscrapr.ffverse.com/reference/nflfastr_rosters.html","id":null,"dir":"Reference","previous_headings":"","what":"Import nflfastr roster data — nflfastr_rosters","title":"Import nflfastr roster data — nflfastr_rosters","text":"Fetches copy roster data nflfastr's data repository. input/output nflfastr's fast_scraper_roster function.","code":""},{"path":"https://ffscrapr.ffverse.com/reference/nflfastr_rosters.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Import nflfastr roster data — nflfastr_rosters","text":"","code":"nflfastr_rosters(seasons)"},{"path":"https://ffscrapr.ffverse.com/reference/nflfastr_rosters.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Import nflfastr roster data — nflfastr_rosters","text":"seasons numeric vector seasons, earliest 1999. TRUE returns seasons, NULL returns latest season.","code":""},{"path":"https://ffscrapr.ffverse.com/reference/nflfastr_rosters.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Import nflfastr roster data — nflfastr_rosters","text":"Data frame individual row represents player roster given team season","code":""},{"path":"https://ffscrapr.ffverse.com/reference/nflfastr_rosters.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Import nflfastr roster data — nflfastr_rosters","text":"issues output data, please open issue nflfastr repository.","code":""},{"path":[]},{"path":"https://ffscrapr.ffverse.com/reference/nflfastr_rosters.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Import nflfastr roster data — nflfastr_rosters","text":"","code":"# \\donttest{ try( # try only shown here because sometimes CRAN checks are weird   nflfastr_rosters(seasons = 2019:2020) ) #> ── nflverse roster data ──────────────────────────────────────────────────────── #> ℹ Data updated: 2022-08-18 20:01:49 UTC #> # A tibble: 6,428 × 36 #>    season team  position depth_chart_po…¹ jerse…² status full_…³ first…⁴ last_…⁵ #>     <int> <chr> <chr>    <chr>              <int> <chr>  <chr>   <chr>   <chr>   #>  1   2019 ARI   DB       CB                    21 Active Patric… Patrick Peters… #>  2   2019 ARI   DB       SS                    38 Active Chris … Ayorun… Banjo   #>  3   2019 ARI   DB       CB                    23 NA     Robert… Robert  Alford  #>  4   2019 ARI   DB       CB                    27 NA     Josh S… Josh    Shaw    #>  5   2019 ARI   DB       CB                    26 NA     Brando… Brandon Willia… #>  6   2019 ARI   DB       FS                    28 Active Charle… Charles Washin… #>  7   2019 ARI   DB       CB                    34 NA     Duke T… Duke    Thomas  #>  8   2019 ARI   DB       CB                    27 NA     Kevin … Kevin   Peters… #>  9   2019 ARI   DB       CB                    22 NA     Trevor… Trevor  Willia… #> 10   2019 ARI   DB       CB                    22 NA     Trevor… Trevor  Willia… #> # … with 6,418 more rows, 27 more variables: birth_date <date>, height <chr>, #> #   weight <int>, college <chr>, gsis_id <chr>, espn_id <chr>, #> #   sportradar_id <chr>, yahoo_id <chr>, rotowire_id <chr>, pff_id <chr>, #> #   pfr_id <chr>, fantasy_data_id <chr>, sleeper_id <chr>, years_exp <int>, #> #   headshot_url <chr>, ngs_position <chr>, week <int>, game_type <chr>, #> #   status_description_abbr <chr>, football_name <chr>, esb_id <chr>, #> #   gsis_it_id <chr>, smart_id <chr>, entry_year <int>, rookie_year <int>, … # }"},{"path":"https://ffscrapr.ffverse.com/reference/nflfastr_stat_mapping.html","id":null,"dir":"Reference","previous_headings":"","what":"Mappings for nflfastr to fantasy platform scoring — nflfastr_stat_mapping","title":"Mappings for nflfastr to fantasy platform scoring — nflfastr_stat_mapping","text":"small helper dataframe connecting nflfastr specific fantasy platform rules.","code":""},{"path":"https://ffscrapr.ffverse.com/reference/nflfastr_stat_mapping.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Mappings for nflfastr to fantasy platform scoring — nflfastr_stat_mapping","text":"","code":"nflfastr_stat_mapping"},{"path":"https://ffscrapr.ffverse.com/reference/nflfastr_stat_mapping.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Mappings for nflfastr to fantasy platform scoring — nflfastr_stat_mapping","text":"data frame ~85 rows 3 variables: nflfastr_event column name statistic nflfastr_weekly dataset platform specific platform mapping applies ff_event name statistic platform","code":""},{"path":"https://ffscrapr.ffverse.com/reference/nflfastr_weekly.html","id":null,"dir":"Reference","previous_headings":"","what":"Import latest nflfastr weekly stats — nflfastr_weekly","title":"Import latest nflfastr weekly stats — nflfastr_weekly","text":"Fetches copy latest week-level stats nflfastr's data repository, via nflreadr package.","code":""},{"path":"https://ffscrapr.ffverse.com/reference/nflfastr_weekly.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Import latest nflfastr weekly stats — nflfastr_weekly","text":"","code":"nflfastr_weekly(seasons = TRUE, type = c(\"offense\", \"kicking\"))"},{"path":"https://ffscrapr.ffverse.com/reference/nflfastr_weekly.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Import latest nflfastr weekly stats — nflfastr_weekly","text":"seasons seasons return, TRUE returns data available. type One \"offense\" \"kicking\"","code":""},{"path":"https://ffscrapr.ffverse.com/reference/nflfastr_weekly.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Import latest nflfastr weekly stats — nflfastr_weekly","text":"Weekly stats passers, rushers receivers nflverse play--play data 1999 season recent season","code":""},{"path":"https://ffscrapr.ffverse.com/reference/nflfastr_weekly.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Import latest nflfastr weekly stats — nflfastr_weekly","text":"goal data replicate NFL's official weekly stats, can diverge bit fantasy data feeds display. issues output data, please open issue nflfastr repository.","code":""},{"path":[]},{"path":"https://ffscrapr.ffverse.com/reference/nflfastr_weekly.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Import latest nflfastr weekly stats — nflfastr_weekly","text":"","code":"# \\donttest{ try( # try only shown here because sometimes CRAN checks are weird   nflfastr_weekly() ) #> ── nflverse player stats: offense ────────────────────────────────────────────── #> ℹ Data updated: 2022-12-12 01:57:05 UTC #> # A tibble: 122,544 × 52 #>    player…¹ playe…² playe…³ posit…⁴ posit…⁵ heads…⁶ recen…⁷ season  week seaso…⁸ #>    <chr>    <chr>   <chr>   <chr>   <chr>   <chr>   <chr>    <int> <int> <chr>   #>  1 00-0000… NA      Abdul-… RB      RB      NA      MIA       1999     1 REG     #>  2 00-0000… NA      Abdul-… RB      RB      NA      MIA       1999     2 REG     #>  3 00-0000… NA      Abdul-… RB      RB      NA      MIA       1999     4 REG     #>  4 00-0000… NA      Abdul-… RB      RB      NA      CLE       1999     7 REG     #>  5 00-0000… NA      Abdul-… RB      RB      NA      CLE       1999     8 REG     #>  6 00-0000… NA      Abdul-… RB      RB      NA      CLE       1999     9 REG     #>  7 00-0000… NA      Abdul-… RB      RB      NA      CLE       1999    10 REG     #>  8 00-0000… NA      Abdul-… RB      RB      NA      CLE       1999    11 REG     #>  9 00-0000… NA      Abdul-… RB      RB      NA      CLE       1999    12 REG     #> 10 00-0000… NA      Abdul-… RB      RB      NA      CLE       1999    13 REG     #> # … with 122,534 more rows, 42 more variables: completions <int>, #> #   attempts <int>, passing_yards <dbl>, passing_tds <int>, #> #   interceptions <dbl>, sacks <dbl>, sack_yards <dbl>, sack_fumbles <int>, #> #   sack_fumbles_lost <int>, passing_air_yards <dbl>, #> #   passing_yards_after_catch <dbl>, passing_first_downs <dbl>, #> #   passing_epa <dbl>, passing_2pt_conversions <int>, pacr <dbl>, dakota <dbl>, #> #   carries <int>, rushing_yards <dbl>, rushing_tds <int>, … # }"},{"path":"https://ffscrapr.ffverse.com/reference/pipe.html","id":null,"dir":"Reference","previous_headings":"","what":"Pipe operator — %>%","title":"Pipe operator — %>%","text":"See magrittr::%>% details.","code":""},{"path":"https://ffscrapr.ffverse.com/reference/release_bullets.html","id":null,"dir":"Reference","previous_headings":"","what":"Release questions — release_bullets","title":"Release questions — release_bullets","text":"Release questions","code":""},{"path":"https://ffscrapr.ffverse.com/reference/release_bullets.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Release questions — release_bullets","text":"","code":"release_bullets()"},{"path":"https://ffscrapr.ffverse.com/reference/set_unescaped_cookies.html","id":null,"dir":"Reference","previous_headings":"","what":"Add unescaped cookies — set_unescaped_cookies","title":"Add unescaped cookies — set_unescaped_cookies","text":"Useful ESPN already URL escaped","code":""},{"path":"https://ffscrapr.ffverse.com/reference/set_unescaped_cookies.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add unescaped cookies — set_unescaped_cookies","text":"","code":"set_unescaped_cookies(...)"},{"path":"https://ffscrapr.ffverse.com/reference/set_unescaped_cookies.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add unescaped cookies — set_unescaped_cookies","text":"... named cookie values","code":""},{"path":[]},{"path":"https://ffscrapr.ffverse.com/reference/sitrep.html","id":null,"dir":"Reference","previous_headings":"","what":"ffverse sitrep — ffverse_sitrep","title":"ffverse sitrep — ffverse_sitrep","text":"See nflreadr::ffverse_sitrep details.","code":""},{"path":"https://ffscrapr.ffverse.com/reference/sleeper_connect.html","id":null,"dir":"Reference","previous_headings":"","what":"Connect to Sleeper League — sleeper_connect","title":"Connect to Sleeper League — sleeper_connect","text":"function creates connection object stores parameters user ID available.","code":""},{"path":"https://ffscrapr.ffverse.com/reference/sleeper_connect.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Connect to Sleeper League — sleeper_connect","text":"","code":"sleeper_connect(   season = NULL,   league_id = NULL,   user_name = NULL,   user_agent = NULL,   rate_limit = TRUE,   rate_limit_number = NULL,   rate_limit_seconds = NULL,   ... )"},{"path":"https://ffscrapr.ffverse.com/reference/sleeper_connect.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Connect to Sleeper League — sleeper_connect","text":"season Season access Sleeper - missing, guess based system date (current year March later, otherwise previous year) league_id League ID (currently assuming one league time) user_name Sleeper user_name - optional - attempts get user's user ID user_agent User agent self-identify (optional) rate_limit TRUE default - turn rate limiting FALSE rate_limit_number number calls per rate_limit_seconds, suggested 1000 calls per 60 seconds rate_limit_seconds number seconds denominator rate_limit ... arguments (methods)","code":""},{"path":"https://ffscrapr.ffverse.com/reference/sleeper_connect.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Connect to Sleeper League — sleeper_connect","text":"list stores Sleeper connection objects","code":""},{"path":"https://ffscrapr.ffverse.com/reference/sleeper_getendpoint.html","id":null,"dir":"Reference","previous_headings":"","what":"GET any Sleeper endpoint — sleeper_getendpoint","title":"GET any Sleeper endpoint — sleeper_getendpoint","text":"endpoint names HTTP parameters (.e. argument names) CASE SENSITIVE passed exactly displayed Sleeper API reference page.","code":""},{"path":"https://ffscrapr.ffverse.com/reference/sleeper_getendpoint.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"GET any Sleeper endpoint — sleeper_getendpoint","text":"","code":"sleeper_getendpoint(endpoint, ...)"},{"path":"https://ffscrapr.ffverse.com/reference/sleeper_getendpoint.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"GET any Sleeper endpoint — sleeper_getendpoint","text":"endpoint string defining endpoint return API ... Arguments passed \"argumentname = argument\" HTTP query parameter","code":""},{"path":"https://ffscrapr.ffverse.com/reference/sleeper_getendpoint.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"GET any Sleeper endpoint — sleeper_getendpoint","text":"list object containing query, response, parsed content.","code":""},{"path":"https://ffscrapr.ffverse.com/reference/sleeper_getendpoint.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"GET any Sleeper endpoint — sleeper_getendpoint","text":"Check vignette details example usage.","code":""},{"path":[]},{"path":"https://ffscrapr.ffverse.com/reference/sleeper_players.html","id":null,"dir":"Reference","previous_headings":"","what":"Sleeper players library — sleeper_players","title":"Sleeper players library — sleeper_players","text":"cached table Sleeper NFL players. store memory session! (via memoise zzz.R)","code":""},{"path":"https://ffscrapr.ffverse.com/reference/sleeper_players.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Sleeper players library — sleeper_players","text":"","code":"sleeper_players()"},{"path":"https://ffscrapr.ffverse.com/reference/sleeper_players.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Sleeper players library — sleeper_players","text":"dataframe containing ~7000+ players Sleeper database","code":""},{"path":"https://ffscrapr.ffverse.com/reference/sleeper_players.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Sleeper players library — sleeper_players","text":"","code":"# \\donttest{ try({ # try only shown here because sometimes CRAN checks are weird   x <- sleeper_players()   dplyr::sample_n(x, 5) }) # end try #> # A tibble: 5 × 39 #>   player_id player_name pos     age team  status years…¹ sport…² rotow…³ yahoo…⁴ #>   <chr>     <chr>       <chr> <dbl> <chr> <chr>    <int> <chr>     <int>   <int> #> 1 3103      Sean McDer… NA     NA   NA    Inact…       0 \"\"         9285      NA #> 2 5459      Mason McKe… LB     NA   NA    Active       4 \"44e91…      NA   31246 #> 3 14        Sidney Rice WR     36.3 NA    Inact…       7 \"\"           NA      NA #> 4 7056      Darrell St… WR     26.4 NA    Inact…       2 \"4f077…      NA   33233 #> 5 26        Roman Harp… SS     40   NA    Inact…      14 \"682a7…    3697    7792 #> # … with 29 more variables: espn_id <int>, fantasy_data_id <int>, #> #   stats_id <int>, swish_id <int>, pandascore_id <lgl>, gsis_id <chr>, #> #   rotowire_id <int>, injury_body_part <chr>, injury_notes <chr>, #> #   birth_city <lgl>, number <int>, injury_start_date <lgl>, sport <chr>, #> #   college <chr>, injury_status <chr>, height <chr>, birth_state <lgl>, #> #   high_school <chr>, fantasy_positions <chr>, practice_description <chr>, #> #   birth_date <date>, depth_chart_position <chr>, birth_country <lgl>, … # }"},{"path":"https://ffscrapr.ffverse.com/reference/sleeper_userleagues.html","id":null,"dir":"Reference","previous_headings":"","what":"Sleeper - Get User Leagues — sleeper_userleagues","title":"Sleeper - Get User Leagues — sleeper_userleagues","text":"function returns leagues specific user . variant can used without first creating connection object.","code":""},{"path":"https://ffscrapr.ffverse.com/reference/sleeper_userleagues.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Sleeper - Get User Leagues — sleeper_userleagues","text":"","code":"sleeper_userleagues(user_name, season = NULL)"},{"path":"https://ffscrapr.ffverse.com/reference/sleeper_userleagues.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Sleeper - Get User Leagues — sleeper_userleagues","text":"user_name username look season season return leagues - defaults current year based heuristics","code":""},{"path":"https://ffscrapr.ffverse.com/reference/sleeper_userleagues.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Sleeper - Get User Leagues — sleeper_userleagues","text":"dataframe leagues specified user","code":""},{"path":[]},{"path":[]},{"path":"https://ffscrapr.ffverse.com/news/index.html","id":"fixes-development-version","dir":"Changelog","previous_headings":"","what":"Fixes","title":"ffscrapr (development version)","text":"Fix ff_league.mfl_conn() bug created duplicate rows leagues email auction email draft. (v1.4.7.01) (resolves #349) Fix hardcoded league year ff_scoringhistory() default arguments, now uses nflreadr::most_recent_season() default upper bound. (v1.4.7.02) (resolves #347) Require nflreadr v1.2.0+ due data repository change. dp_values() now explicitly returns rather invisibly returns. (1.4.7.03) Simplified GitHub repo GitHub Flow structure rather Git Flow structure ease maintenance. (1.4.7.04) Re-export nflreadr::ffverse_sitrep() encourage usage bug reporting. (1.4.7.05) Fix ff_transactions.mfl_conn() bug return auction bids, resolves #354 (1.4.7.06) ff_league.espn_conn() now counts TQB evaluating qb_type qb_count, resolves #367. (1.4.7.07) ff_starter_positions.mfl_conn() now splits RB+WR RB+WR+TE positions positional rows resummarises. (v1.4.7.08) sleeper_connect() now warns use non-character league_id parameter - Sleeper league IDs long (18 characters) longdouble support inconsistent OS OS. (1.4.7.09) ff_standings.mfl_conn() changed adapt MFL API changes documented 2022 API release notes, resolves #366. (1.4.7.10) ff_starters.sleeper_conn() bugfixed API change (last-scored-leg -> leg) (1.4.7.11) ff_scoring() fixed dev purrr issues. (1.4.7.12) ff_transactions.flea_conn() bugfixed infinite loop problem, resolves #356 (thank @jdegregorio!) (1.4.7.13)","code":""},{"path":"https://ffscrapr.ffverse.com/news/index.html","id":"ffscrapr-147","dir":"Changelog","previous_headings":"","what":"ffscrapr 1.4.7","title":"ffscrapr 1.4.7","text":"CRAN release: 2021-11-10 main goal v1.4.7 patch minor bugs pre-emptively correct issues related upstream dependency tidyr.","code":""},{"path":"https://ffscrapr.ffverse.com/news/index.html","id":"changes-1-4-7","dir":"Changelog","previous_headings":"","what":"Changes","title":"ffscrapr 1.4.7","text":"Fix ff_scoringhistory.flea_conn() kicking bug. Fix ff_schedule.mfl_conn() NA bug. Remove lubridate dep Update .espn_stat_map() add threshold-based scoring fix missing defensive scoring setting Update ff_scoringhistory.espn_conn() add threshold calcs. (thank , @scottfrechette!) Fix espn_potentialpoints() move regular flex ahead superflex ff_scoring() MFL gets tweaks support changes tidyr (thanks, @DavisVaughan!)","code":""},{"path":"https://ffscrapr.ffverse.com/news/index.html","id":"thanks-1-4-7","dir":"Changelog","previous_headings":"","what":"Thanks","title":"ffscrapr 1.4.7","text":"Grateful @davisderodes,@DavisVaughan, @draftydesert277,@scottfrechette, @TheMathNinja contributions release - feedback, issues, PRs!","code":""},{"path":"https://ffscrapr.ffverse.com/news/index.html","id":"ffscrapr-146","dir":"Changelog","previous_headings":"","what":"ffscrapr 1.4.6","title":"ffscrapr 1.4.6","text":"CRAN release: 2021-09-02 main goal v1.4.6 patch minor bugs, introduce unified dependency nflreadr, add support kicker scoring.","code":""},{"path":"https://ffscrapr.ffverse.com/news/index.html","id":"new-features-1-4-6","dir":"Changelog","previous_headings":"","what":"New features","title":"ffscrapr 1.4.6","text":"ff_template() adds template connection ff_starter_positions(), ff_scoring(), ff_scoringhistory() easily pull common scoring templates. Add kicker stat mappings ff_scoringhistory() support ~ kicker scorings (MFL’s may weird.)","code":""},{"path":"https://ffscrapr.ffverse.com/news/index.html","id":"minor-changes-1-4-6","dir":"Changelog","previous_headings":"","what":"Minor changes","title":"ffscrapr 1.4.6","text":"ff_league() MFL now returns league type (“dynasty”, “keeper”, “redraft”) field set. ff_league() MFL now returns draft type (e.g. “email draft”, “live auction”) field set. ff_league() MFL now returns draft player pool (e.g. “Rookie”, “Veteran”, “”) field set. (three changes fix #311, thanks @maat7043!) ff_schedule() ESPN now credits bye team win instead causing error. espn_getendpoint() longer returns error seasons prior 2018. (Thanks, @JoeSydlowski!) nflfastr_weekly() nflfastr_roster() now use nflreadr package functions back-end Added names name database, c/o @scasanova via #320 - thank , Santiago! ff_starters() ESPN now also tries return projected score week - thank , @scottfrechette! Resolves #323. ff_schedule() Sleeper longer broken - resolves #322. ff_schedule() MFL now returns NA result unplayed games becomes consistent platforms. ff_scoringhistory() MFL now parses decimal ranges correctly Refactor ff_scoringhistory() memoisable pieces (.nflfastr_offense_long, .nflfastr_kicker_long, .nflfastr_roster) Update http error messages user readability. Minimum R version bumped 3.6.0 - nflreadr uses RDS versions require minimum R3.6.","code":""},{"path":"https://ffscrapr.ffverse.com/news/index.html","id":"thanks-1-4-6","dir":"Changelog","previous_headings":"","what":"Thanks","title":"ffscrapr 1.4.6","text":"Immensely grateful : Joe Sydlowski, Matt Spencer, Santiago Casanova, Scott Frechette, others raised issues contributed code towards release!","code":""},{"path":"https://ffscrapr.ffverse.com/news/index.html","id":"ffscrapr-145","dir":"Changelog","previous_headings":"","what":"ffscrapr 1.4.5","title":"ffscrapr 1.4.5","text":"CRAN release: 2021-07-25 main goal v1.4.5 comply CRAN somehow testing examples.","code":""},{"path":"https://ffscrapr.ffverse.com/news/index.html","id":"minor-changes-1-4-5","dir":"Changelog","previous_headings":"","what":"Minor changes","title":"ffscrapr 1.4.5","text":"ff_league() ESPN now works non-ppr leagues. Include try() examples apparently \\donttest doesn’t anything anymore 😡 (fixes #308)","code":""},{"path":"https://ffscrapr.ffverse.com/news/index.html","id":"ffscrapr-144","dir":"Changelog","previous_headings":"","what":"ffscrapr 1.4.4","title":"ffscrapr 1.4.4","text":"CRAN release: 2021-07-20 main goal v1.4.4 patch minor bugs add minor extensions HTML cleaning function. v1.4.4 also served different github organization website domain.","code":""},{"path":"https://ffscrapr.ffverse.com/news/index.html","id":"minor-changes-1-4-4","dir":"Changelog","previous_headings":"","what":"Minor changes","title":"ffscrapr 1.4.4","text":"mfl_getendpoint() similar get_endpoint functions improved print method tells whether request successful. Added errorhandling ESPN methods ff_starters(), ff_transactions(), ff_rosters(), espn_potentialpoints(), ff_draft(). Fixes #297, thanks report @jpiburn! Added message warn memoise turned , onAttach. ff_transactions() now correctly handles leagues using waiver priority, fixes #299 - thanks report @BarkovMVP! ff_league() Sleeper now identifies best ball leagues, fixes #300 ff_scoring() MFL now points_type column either “” “” - helps delineate fantasy points awarded meeting thresholds/bonuses points awarded per-stat, fixes #301 ff_scoringhistory() MFL applies new ff_scoring() points_type column calculate scoring history. result sensible results leagues bonus scoring! Fixes #301. Add mismatch names (Michael -> Mike Vick, Chris Wells -> Beanie Wells) Add dp_clean_html() clean html names (cough MFL cough) ff_starter_positions() now handles “range” inside total_starters column MFL, resolves #304 Cutover ffverse.com domain github organization","code":""},{"path":"https://ffscrapr.ffverse.com/news/index.html","id":"ffscrapr-143","dir":"Changelog","previous_headings":"","what":"ffscrapr 1.4.3","title":"ffscrapr 1.4.3","text":"CRAN release: 2021-06-12 main goal v1.4.3 patch minor bugs.","code":""},{"path":"https://ffscrapr.ffverse.com/news/index.html","id":"minor-changes-1-4-3","dir":"Changelog","previous_headings":"","what":"Minor changes","title":"ffscrapr 1.4.3","text":"ff_league() now column returns platform’s season - useful running ff_league batch. Thank @joeflan contribution! (Fixes #287) Added helper script dev/ switching test cache versions. Added helper script dev/ rebuilding test cache. ff_schedule() Sleeper now extend playoff weeks. (Fixes #289) ff_draft() Sleeper now auction_amount column auction draft. (Fixes #291) dp_cleannames() now can flip names originally presented LastName, FirstName order First Last, also custom name database convert common alternate names unified one. nflfastr_stat_mapping dp_name_mapping namespaced within package, can used internally externally little robustly. Rebuilt test cache ffscrapr-tests.","code":""},{"path":"https://ffscrapr.ffverse.com/news/index.html","id":"ffscrapr-142","dir":"Changelog","previous_headings":"","what":"ffscrapr 1.4.2","title":"ffscrapr 1.4.2","text":"CRAN release: 2021-05-10 main goal v1.4.2 patch minor bugs.","code":""},{"path":"https://ffscrapr.ffverse.com/news/index.html","id":"minor-changes-1-4-2","dir":"Changelog","previous_headings":"","what":"Minor changes","title":"ffscrapr 1.4.2","text":"espn_rosters now week argument return specific week data. (Fixes #276, thanks @scottfrechette!) ff_scoringhistory now tries return platform-specific player ID, available. (Fixes #275) Roxygen configured use markdown (roxygen2md package) - hopefully fixes lifecycle badge issues? sleeper_players() - gsis_id gets str_squish applied resolve stowaway whitespaces. mfl_players() - add any_of handling columns handle column name changes. sleeper_transactions now handles offseason transactions correctly","code":""},{"path":"https://ffscrapr.ffverse.com/news/index.html","id":"ffscrapr-141","dir":"Changelog","previous_headings":"","what":"ffscrapr 1.4.1","title":"ffscrapr 1.4.1","text":"CRAN release: 2021-04-18 main goal v1.4.1 patch issues raised CRAN checks also correct bugs new experimental ff_scoringhistory ff_starter_positions functions released v1.4.0.","code":""},{"path":"https://ffscrapr.ffverse.com/news/index.html","id":"new-features-1-4-1","dir":"Changelog","previous_headings":"","what":"New features","title":"ffscrapr 1.4.1","text":"nflfastr_stat_mapping dataframe maps nflfastr columns fantasy scoring rules, now exported end-user usage. primarily used inside ff_scoringhistory().","code":""},{"path":"https://ffscrapr.ffverse.com/news/index.html","id":"minor-changes-1-4-1","dir":"Changelog","previous_headings":"","what":"Minor changes","title":"ffscrapr 1.4.1","text":"Added release_questions help remind maintain test infrastructure mfl_starter_positions now correctly calculates offensive starters (first via “iop_starters” defined otherwise subtracting idp starters) well kdst_starters (Resolves #264) Redirected nflfastr download functions new nflverse/ repository locations. (Resolves #268) .ffscrapr_env relocated child base environment child empty environment (Resolves #269) ff_scoringhistory refactored adds better support MFL’s fumbles firstdowns. (Resolves #265)","code":""},{"path":"https://ffscrapr.ffverse.com/news/index.html","id":"ffscrapr-140","dir":"Changelog","previous_headings":"","what":"ffscrapr 1.4.0","title":"ffscrapr 1.4.0","text":"CRAN release: 2021-04-13 main goal v1.4.0 add preliminary support connecting ffscrapr nflfastR weekly data, clean bugs v1.3.0. Huge thanks goes Joe Sydlowski contributions scoring history (everything else DynastyProcess!)","code":""},{"path":"https://ffscrapr.ffverse.com/news/index.html","id":"new-features-1-4-0","dir":"Changelog","previous_headings":"","what":"New Features","title":"ffscrapr 1.4.0","text":"nflfastr_weekly() imports weekly offensive statistics nflfastR’s data repository. nflfastr_rosters() imports team rosters nflfastR’s roster repository. ff_scoringhistory() connects league’s scoring settings nflfastr data (c/o functions ), allows reconstruct historical scoring league! ff_starter_positions() describes starter rules player/position, including min max starters position accounting flex spots. useful calculating things like value replacement!","code":""},{"path":"https://ffscrapr.ffverse.com/news/index.html","id":"breaking-changes-1-4-0","dir":"Changelog","previous_headings":"","what":"Breaking Changes","title":"ffscrapr 1.4.0","text":"ff_scoring ESPN loses “override_pos” value 16 D/ST specific rules ff_scoring rules ESPN Sleeper expanded one line per rule one line per position per rule","code":""},{"path":"https://ffscrapr.ffverse.com/news/index.html","id":"minor-changes-1-4-0","dir":"Changelog","previous_headings":"","what":"Minor Changes","title":"ffscrapr 1.4.0","text":"Force mfl_playerscores use season + league specific players call possible (#239) Reduce minimum rows flea_rosters test 200, fixes API check issue (#242) Switching memoise backend cachem package, fixes CRAN check issue digest longer imported memoise. Cachem also apparently performant! (#244) sleeper_transactions now correctly handles multiple dropped players one transaction. (#246). mfl_transactions - adds numeric string parsing fix bug auction bid amount (#) mfl_draft now calculates age timestamp also adds overall column. (#259, #260)","code":""},{"path":"https://ffscrapr.ffverse.com/news/index.html","id":"ffscrapr-130","dir":"Changelog","previous_headings":"","what":"ffscrapr 1.3.0","title":"ffscrapr 1.3.0","text":"CRAN release: 2021-03-07 main goal ffscrapr 1.3.0 add support ESPN platform. also includes several bug fixes, code quality improvements, major refactor tests reduce overall package size. huge thank-goes Tony ElHabr contributions package ESPN methods.","code":""},{"path":"https://ffscrapr.ffverse.com/news/index.html","id":"breaking-changes-1-3-0","dir":"Changelog","previous_headings":"","what":"Breaking Changes","title":"ffscrapr 1.3.0","text":"custom_players arguments deprecated MFL - now return default.","code":""},{"path":"https://ffscrapr.ffverse.com/news/index.html","id":"espn-details-1-3-0","dir":"Changelog","previous_headings":"","what":"ESPN Details","title":"ffscrapr 1.3.0","text":"ESPN tricky undocumented API. Private leagues accessible use SWID/ESPN_S2 authentication arguments, lot like API keys - see ESPN authentication vignette. Unsupported functions: ff_draftpicks() - apply ESPN primarily support draft pick trades. ff_userleagues() - ESPN support looking user’s leagues, even authenticated Username password features - ESPN used way authenticate via username/password, recently made difficult. area can revisited /Python package manages , time accessible SWID/ESPN_S2 keys.","code":""},{"path":"https://ffscrapr.ffverse.com/news/index.html","id":"new-functions-1-3-0","dir":"Changelog","previous_headings":"","what":"New Functions","title":"ffscrapr 1.3.0","text":"dp_cleannames() utility function cleaning player names removes common suffixes, periods, apostrophes. espn_potentialpoints() calculates optimal lineup week. ","code":""},{"path":"https://ffscrapr.ffverse.com/news/index.html","id":"minor-patches-1-3-0","dir":"Changelog","previous_headings":"","what":"Minor patches","title":"ffscrapr 1.3.0","text":"Converted GET requests use httr::RETRY instead - adds robustness server-side issues. suggested Maelle Salmon’s blog post reinventing wheel. Added type conversions renaming snake_case consistency mfl_rosters mfl_playerscores Fixed bug MFL’s ff_playerscores() function correctly pulls older names. (Resolves #196) Refactored tests move test cache files separate/non-package location (https://github.com/ffverse/ffscrapr-tests) - included CRAN’s package sizing Fixed bugs MFL’s ff_starters() function - bad default arg, bad players call. (Fixes #202) Resolve MFL’s playerscores handle vectorized request (Fixes #206) Resolve bugs related .fn_choose_season tests (Fixes #217, #219) Resolved bug MFL’s ff_rosters() adding week parameter (Fixes #215) Coerced ff_transactions() bid_amount numeric (Fixes #210) Removed bye franchises ff_starters() (Fixes #212)","code":""},{"path":"https://ffscrapr.ffverse.com/news/index.html","id":"ffscrapr-122","dir":"Changelog","previous_headings":"","what":"ffscrapr 1.2.2","title":"ffscrapr 1.2.2","text":"CRAN release: 2021-02-08 Minor patches dp_import functions address issues discovered CRAN checks. Also adds minor helper function, dp_cleannames(), utility function cleaning player names removes common suffixes, periods, apostrophes. Messed export , whoops. Fixing next release.","code":""},{"path":"https://ffscrapr.ffverse.com/news/index.html","id":"minor-patches-1-2-2","dir":"Changelog","previous_headings":"","what":"Minor patches","title":"ffscrapr 1.2.2","text":"Refactored dp_values() dp_playerids() functions use httr backend compat httptest, preventing CRAN errors. Added inst-level redactor httptest.","code":""},{"path":"https://ffscrapr.ffverse.com/news/index.html","id":"ffscrapr-121","dir":"Changelog","previous_headings":"","what":"ffscrapr 1.2.1","title":"ffscrapr 1.2.1","text":"CRAN release: 2020-12-16","code":""},{"path":"https://ffscrapr.ffverse.com/news/index.html","id":"minor-patches-1-2-1","dir":"Changelog","previous_headings":"","what":"Minor patches","title":"ffscrapr 1.2.1","text":"Caching vignette outputs tests/testthat making vignette-rebuilding less internet reliant Changing league_id output sleeper_userleagues character column (cran -longdouble support)","code":""},{"path":"https://ffscrapr.ffverse.com/news/index.html","id":"ffscrapr-120","dir":"Changelog","previous_headings":"","what":"ffscrapr 1.2.0","title":"ffscrapr 1.2.0","text":"CRAN release: 2020-11-27 main goal ffscrapr 1.2.0 add full set methods Fleaflicker. release also adds improved caching options, including writing filesystem persistent caching (see vignette!), one hotfix sleeper_getendpoint.","code":""},{"path":"https://ffscrapr.ffverse.com/news/index.html","id":"breaking-changes-1-2-0","dir":"Changelog","previous_headings":"","what":"BREAKING CHANGES","title":"ffscrapr 1.2.0","text":"sleeper_getendpoint() now behaves like getendpoint functions - first argument endpoint args passed query parameters.","code":""},{"path":"https://ffscrapr.ffverse.com/news/index.html","id":"other-tweaks-to-existing-platformsmethods-1-2-0","dir":"Changelog","previous_headings":"","what":"Other tweaks to existing platforms/methods","title":"ffscrapr 1.2.0","text":"Small copyedits existing vignettes. Added filesystem cache capabilities vignette detailing use .","code":""},{"path":"https://ffscrapr.ffverse.com/news/index.html","id":"fleaflicker-notes-1-2-0","dir":"Changelog","previous_headings":"","what":"Fleaflicker notes","title":"ffscrapr 1.2.0","text":"functions now Fleaflicker methods! notes isn’t : fleaflicker_players() requires connection/leagueID default - acts little oddly game days right now. ff_playerscores() - Fleaflicker’s API returns season level data easily, week-level readily available yet without workarounds. Everything else seems okay.","code":""},{"path":"https://ffscrapr.ffverse.com/news/index.html","id":"ffscrapr-110","dir":"Changelog","previous_headings":"","what":"ffscrapr 1.1.0","title":"ffscrapr 1.1.0","text":"CRAN release: 2020-11-16 main goal ffscrapr 1.1.0 add full set methods Sleeper. Also adds two new generics: ff_userleagues() ff_starters().","code":""},{"path":"https://ffscrapr.ffverse.com/news/index.html","id":"new-generic-functions-1-1-0","dir":"Changelog","previous_headings":"","what":"New generic functions","title":"ffscrapr 1.1.0","text":"list new functions available top level (ie platforms) ff_userleagues() returns list user leagues. deployed slightly differently MFL Sleeper - MFL requires authentication access user’s leagues, Sleeper doesn’t authentication can look user like. ff_starters() returns list players started/-started week. MFL return actual score player week calculate whether optimal, Sleeper just returns player .","code":""},{"path":"https://ffscrapr.ffverse.com/news/index.html","id":"sleeper-notes-1-1-0","dir":"Changelog","previous_headings":"","what":"Sleeper notes","title":"ffscrapr 1.1.0","text":"Almost functions now Sleeper methods - implemented hopes relatively familiar manner MFL. Outlining specifics isn’t : sleeper_userleagues() wrapper ff_userleagues() makes easier look user leagues without first creating connection object. ff_playerscores() available Sleeper Sleeper removed player stats endpoint - generate warning (rather error). Thinking creating functions calculate scoring based nflfastr. sleeper_getendpoint() little simple MFL’s equivalent - just pass string url (minus api.sleeper.app/v1) pass chunks code, function automatically paste together “/”. Added generic method ff_userleagues() - Sleeper league IDs annoying MFL handle, intuitive way look user’s league_ids username first. MFL parallel feature even used different purposes. Added two vignettes, showing “Getting Started” well one custom API calls","code":""},{"path":"https://ffscrapr.ffverse.com/news/index.html","id":"mfl-changes-1-1-0","dir":"Changelog","previous_headings":"","what":"MFL changes","title":"ffscrapr 1.1.0","text":"Added method ff_userleagues() Added handling offensive_points defensive_points ff_standings() (#69, nice.) Added ff_starters() requested #76 (thanks, Mike!) Added httr::handle_reset() call fix login-caching bug. Polished vignettes little.","code":""},{"path":"https://ffscrapr.ffverse.com/news/index.html","id":"other-release-tweaks-in-1-1-0","dir":"Changelog","previous_headings":"","what":"Other release tweaks in 1.1.0","title":"ffscrapr 1.1.0","text":"Now uses {checkmate} testing. Silently swallowing unused args mfl_connect sleeper_connect. Uses describeIn instead rdname method documentation. Wrap documentation examples donttest - ratelimiting running 5 seconds pretty challenging!","code":""},{"path":"https://ffscrapr.ffverse.com/news/index.html","id":"ffscrapr-100","dir":"Changelog","previous_headings":"","what":"ffscrapr 1.0.0","title":"ffscrapr 1.0.0","text":"CRAN release: 2020-08-17 first (major) version ffscrapr intended build full set functions first API platform: MFL. Future versions add platforms via methods mapped functions. Functions include: ff_connect (sibling mfl_connect) establish connection parameters ratelimiting mfl_getendpoint low-level function making GET requests MFL ff_draft gets draft results ff_draftpicks gets current future draft picks yet selected ff_franchises gets franchise-level identifiers divisions ff_league gets league-level summaries rules, players, franchises ff_playerscores gets playerweek-level scores ff_rosters gets franchise-level rosters complete naming ff_schedule gets weekly fantasy schedules ff_scoring gets scoring rules ff_standings gets league-level season summaries ff_transactions gets list transactions cleans data frame.","code":""}]
